{
    "docs": [
        {
            "location": "/", 
            "text": "Mathlion\n\n\nMathlion is a Kibana extension that enables equation parsing and advanced math under Timelion, which is part of Kibana.\n\n\nMathlion is developed by \nFermium LABS\n\n\nUsage\n\n\n.math()\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nmath()\n\n\nParse mathematical equations and expressions\n\n\nChainable\n\n\n\n\n\n\n\n\nExamples:\n\n\n.es(*).math(\na=source\n)  //the variable \na\n now contains the elasticsearch query.\n.nop().math(\na\n)  //this row now equals the former elasticsearch query\n\n.es(*).math(\nsource\n) //return the .es(*) query\n.es(*).math(\nsource+5\n) // add 5 to the .es(*) query\n\n.nop().math(\na=a+2 ; a=a+3 \n)  //adds 5 to a\n.nop().math(\na=a+2 ; a=a+3 ; a \n)  //adds 5 to a and displays a+5\n\n.es(*).math(\na=source\n)  //this query is invisible and does not generate an axis\n.es(*).math(\na=source; a\n)  //this query does\n\n.nop.math(\nsqrt(3^2 + 4^2)\n) //returns 5\n\n//Calculate power comsumption based on measured current and stimated voltage (in Europe)\n.nop().math(\nelectricPower(v,i)=(v*i)\n)\n.es(metric=avg:current).math(machineCurrent=source)\n.nop().math(\nelascPower(230,machineCurrent)\n)\n\n//plot the horizontal statistical mean and variance\n.es(*).math(\nme=mean(source); va=var(source)\n)\n.value(1).math(me*source) \n.value(1).math(\n(me+sqrt(va))*source\n) \n.value(1).math(\n(me-sqrt(va))*source\n)\n\n\n\n\n\nAs you may have understood, \nsource\n inside a mathematical expression returns the value of the precedent function. It acts as a local variable, and never exit the boundaries of the function you write it in.\n\n\nThe variable will now be accessible from the \nmath()\n functions. Internally every variable is considered a mathematical array. \n\n\nWhen you're working in Timelion each variable will be accessible from the whole Timelion sheet you're working in. Beware that you need to start a new chain for the variable to be accessible.\n\n\nIn Kibana dashboards variables are separated between plots.\n\n\n//this works\n.es(*).math(\na=source\n) \n.nop().math(\na\n)\n\n//Error: Undefine symbol a\n.es(*).math(\na=source\n).math(\na\n) //the two functions can't see each other\n\n//A better solution\n.es(*).math(\na=source; a\n) \n\n\n\n\n.nop()\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\n.nop()\n\n\nA fake datasource that returns no value at all. It's similar to \n.value(0)\n\n\nDatasource\n\n\n\n\n\n\n\n\nExamples:\n\n\n.nop() //returns nothing at all\n.nop().math(variable) //retrieve variable\n\n\n\n\nEquations examples\n\n\nYou can do farly complex stuff inside a math function:\n\n\nmode(a) //compute the mode of the whole set of data in \na\n in your window and display it as an y axis\n(a\n0) ? (a=1) : (a=-1) //if is positive a=1, else a=-1\\. A will be modified only temporarely for this equation\n\ndelta(a,b,c)=(b^2-4*a*c) //create a new function you can reuse\n\na=2; a=a+1 // a is now 3, the sub-expressions are evaluated sequentially The last is the one considered in the end \na=1 ; a=2; a+1 // exactly same as before, but returns directly 3 instead of a=3\n\n\n\n\n\nReference\n\n\n\n\nPhysical constants\n\n\nMathematical functions\n\n\nMathematical operators\n\n\nUnits of measurement\n\n\n\n\nThanks\n\n\nMathlion is based on \nMath.js", 
            "title": "Home"
        }, 
        {
            "location": "/#mathlion", 
            "text": "Mathlion is a Kibana extension that enables equation parsing and advanced math under Timelion, which is part of Kibana.  Mathlion is developed by  Fermium LABS", 
            "title": "Mathlion"
        }, 
        {
            "location": "/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/#math", 
            "text": "Function  Description  Type      math()  Parse mathematical equations and expressions  Chainable     Examples:  .es(*).math( a=source )  //the variable  a  now contains the elasticsearch query.\n.nop().math( a )  //this row now equals the former elasticsearch query\n\n.es(*).math( source ) //return the .es(*) query\n.es(*).math( source+5 ) // add 5 to the .es(*) query\n\n.nop().math( a=a+2 ; a=a+3  )  //adds 5 to a\n.nop().math( a=a+2 ; a=a+3 ; a  )  //adds 5 to a and displays a+5\n\n.es(*).math( a=source )  //this query is invisible and does not generate an axis\n.es(*).math( a=source; a )  //this query does\n\n.nop.math( sqrt(3^2 + 4^2) ) //returns 5\n\n//Calculate power comsumption based on measured current and stimated voltage (in Europe)\n.nop().math( electricPower(v,i)=(v*i) )\n.es(metric=avg:current).math(machineCurrent=source)\n.nop().math( elascPower(230,machineCurrent) )\n\n//plot the horizontal statistical mean and variance\n.es(*).math( me=mean(source); va=var(source) )\n.value(1).math(me*source) \n.value(1).math( (me+sqrt(va))*source ) \n.value(1).math( (me-sqrt(va))*source )  As you may have understood,  source  inside a mathematical expression returns the value of the precedent function. It acts as a local variable, and never exit the boundaries of the function you write it in.  The variable will now be accessible from the  math()  functions. Internally every variable is considered a mathematical array.   When you're working in Timelion each variable will be accessible from the whole Timelion sheet you're working in. Beware that you need to start a new chain for the variable to be accessible.  In Kibana dashboards variables are separated between plots.  //this works\n.es(*).math( a=source ) \n.nop().math( a )\n\n//Error: Undefine symbol a\n.es(*).math( a=source ).math( a ) //the two functions can't see each other\n\n//A better solution\n.es(*).math( a=source; a )", 
            "title": ".math()"
        }, 
        {
            "location": "/#nop", 
            "text": "Function  Description  Type      .nop()  A fake datasource that returns no value at all. It's similar to  .value(0)  Datasource     Examples:  .nop() //returns nothing at all\n.nop().math(variable) //retrieve variable", 
            "title": ".nop()"
        }, 
        {
            "location": "/#equations-examples", 
            "text": "You can do farly complex stuff inside a math function:  mode(a) //compute the mode of the whole set of data in  a  in your window and display it as an y axis\n(a 0) ? (a=1) : (a=-1) //if is positive a=1, else a=-1\\. A will be modified only temporarely for this equation\n\ndelta(a,b,c)=(b^2-4*a*c) //create a new function you can reuse\n\na=2; a=a+1 // a is now 3, the sub-expressions are evaluated sequentially The last is the one considered in the end \na=1 ; a=2; a+1 // exactly same as before, but returns directly 3 instead of a=3", 
            "title": "Equations examples"
        }, 
        {
            "location": "/#reference", 
            "text": "Physical constants  Mathematical functions  Mathematical operators  Units of measurement", 
            "title": "Reference"
        }, 
        {
            "location": "/#thanks", 
            "text": "Mathlion is based on  Math.js", 
            "title": "Thanks"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nCopy the last installation url for your version of Kibana from \nthe repository releases\n. The file follows the naming \nmathlion-major.minor.patch.zip\n where the version indicated it's the one in Kibana.\n\n\nRemember that starting from Kibana 5.0 you always need an update version of every plugin for it to start as indicated \nhere\n.\n\n\n#kibana \n5\n\n./bin/kibana-plugin install  https://github.com/fermiumlabs/mathlion/releases/download/version_name/mathlion-major.minor.patch.zip", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Copy the last installation url for your version of Kibana from  the repository releases . The file follows the naming  mathlion-major.minor.patch.zip  where the version indicated it's the one in Kibana.  Remember that starting from Kibana 5.0 you always need an update version of every plugin for it to start as indicated  here .  #kibana  5\n\n./bin/kibana-plugin install  https://github.com/fermiumlabs/mathlion/releases/download/version_name/mathlion-major.minor.patch.zip", 
            "title": "Installation"
        }, 
        {
            "location": "/costants/", 
            "text": "Supported phisical costants\n\n\nThis section lists all available units, prefixes, and physical constants. These can be used via the Unit object, or via \nmath.eval()\n.\n\n\nReference\n\n\nMathlion comes with the following built-in units.\n\n\n\n\n\n\n\n\nBase\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nLength\n\n\nmeter (m), inch (in), foot (ft), yard (yd), mile (mi), link (li), rod (rd), chain (ch), angstrom, mil\n\n\n\n\n\n\nSurface area\n\n\nm2, sqin, sqft, sqyd, sqmi, sqrd, sqch, sqmil, acre, hectare\n\n\n\n\n\n\nVolume\n\n\nm3, litre (l, L, lt, liter), cc, cuin, cuft, cuyd, teaspoon, tablespoon\n\n\n\n\n\n\nLiquid volume\n\n\nminim (min), fluiddram (fldr), fluidounce (floz), gill (gi), cup (cp), pint (pt), quart (qt), gallon (gal), beerbarrel (bbl), oilbarrel (obl), hogshead, drop (gtt)\n\n\n\n\n\n\nAngles\n\n\nrad (radian), deg (degree), grad (gradian), cycle, arcsec (arcsecond), arcmin (arcminute)\n\n\n\n\n\n\nTime\n\n\nsecond (s, secs, seconds), minute (mins, minutes), hour (h, hr, hrs, hours), day (days), week (weeks), month (months), year (years), decade (decades), century (centuries), millennium (millennia)\n\n\n\n\n\n\nFrequency\n\n\nhertz (Hz)\n\n\n\n\n\n\nMass\n\n\ngram(g), tonne, ton, grain (gr), dram (dr), ounce (oz), poundmass (lbm, lb, lbs), hundredweight (cwt), stick, stone\n\n\n\n\n\n\nElectric current\n\n\nampere (A)\n\n\n\n\n\n\nTemperature\n\n\nkelvin (K), celsius (degC), fahrenheit (degF), rankine (degR)\n\n\n\n\n\n\nAmount of substance\n\n\nmole (mol)\n\n\n\n\n\n\nLuminous intensity\n\n\ncandela (cd)\n\n\n\n\n\n\nForce\n\n\nnewton (N), dyne (dyn), poundforce (lbf), kip\n\n\n\n\n\n\nEnergy\n\n\njoule (J), erg, Wh, BTU, electronvolt (eV)\n\n\n\n\n\n\nPower\n\n\nwatt (W), hp\n\n\n\n\n\n\nPressure\n\n\nPa, psi, atm, torr, bar, mmHg, mmH2O, cmH2O\n\n\n\n\n\n\nElectricity and magnetism\n\n\nampere (A), coulomb (C), watt (W), volt (V), ohm, farad (F), weber (Wb), tesla (T), henry (H), siemens (S), electronvolt (eV)\n\n\n\n\n\n\nBinary\n\n\nbit (b), byte (B)\n\n\n\n\n\n\n\n\nNote: all time units are based on the Julian year, with one month being 1/12th of a Julian year, a year being one Julian year, a decade being 10 Julian years, a century being 100, and a millennium being 1000.\n\n\nNote that all relevant units can also be written in plural form, for example \n5 meters\n instead of \n5 meter\n or \n10 seconds\n instead of \n10 second\n. \n\n\nSurface and volume units can alternatively be expressed in terms of length units raised to a power, for example \n100 in^2\n instead of \n100 sqin\n.\n\n\nPrefixes\n\n\nThe following decimal prefixes are available.\n\n\n\n\n\n\n\n\nName\n\n\nAbbreviation\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ndeca\n\n\nda\n\n\n1e1\n\n\n\n\n\n\nhecto\n\n\nh\n\n\n1e2\n\n\n\n\n\n\nkilo\n\n\nk\n\n\n1e3\n\n\n\n\n\n\nmega\n\n\nM\n\n\n1e6\n\n\n\n\n\n\ngiga\n\n\nG\n\n\n1e9\n\n\n\n\n\n\ntera\n\n\nT\n\n\n1e12\n\n\n\n\n\n\npeta\n\n\nP\n\n\n1e15\n\n\n\n\n\n\nexa\n\n\nE\n\n\n1e18\n\n\n\n\n\n\nzetta\n\n\nZ\n\n\n1e21\n\n\n\n\n\n\nyotta\n\n\nY\n\n\n1e24\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nAbbreviation\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ndeci\n\n\nd\n\n\n1e-1\n\n\n\n\n\n\ncenti\n\n\nc\n\n\n1e-2\n\n\n\n\n\n\nmilli\n\n\nm\n\n\n1e-3\n\n\n\n\n\n\nmicro\n\n\nu\n\n\n1e-6\n\n\n\n\n\n\nnano\n\n\nn\n\n\n1e-9\n\n\n\n\n\n\npico\n\n\np\n\n\n1e-12\n\n\n\n\n\n\nfemto\n\n\nf\n\n\n1e-15\n\n\n\n\n\n\natto\n\n\na\n\n\n1e-18\n\n\n\n\n\n\nzepto\n\n\nz\n\n\n1e-21\n\n\n\n\n\n\nyocto\n\n\ny\n\n\n1e-24\n\n\n\n\n\n\n\n\nThe following binary prefixes are available.\nThey can be used with units \nbit\n (\nb\n) and \nbyte\n (\nB\n).\n\n\n\n\n\n\n\n\nName\n\n\nAbbreviation\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkibi\n\n\nKi\n\n\n1024\n\n\n\n\n\n\nmebi\n\n\nMi\n\n\n1024^2\n\n\n\n\n\n\ngibi\n\n\nGi\n\n\n1024^3\n\n\n\n\n\n\ntebi\n\n\nTi\n\n\n1024^4\n\n\n\n\n\n\npebi\n\n\nPi\n\n\n1024^5\n\n\n\n\n\n\nexi\n\n\nEi\n\n\n1024^6\n\n\n\n\n\n\nzebi\n\n\nZi\n\n\n1024^7\n\n\n\n\n\n\nyobi\n\n\nYi\n\n\n1024^8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\n\n\nAbbreviation\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nkilo\n\n\nk\n\n\n1e3\n\n\n\n\n\n\nmega\n\n\nM\n\n\n1e6\n\n\n\n\n\n\ngiga\n\n\nG\n\n\n1e9\n\n\n\n\n\n\ntera\n\n\nT\n\n\n1e12\n\n\n\n\n\n\npeta\n\n\nP\n\n\n1e15\n\n\n\n\n\n\nexa\n\n\nE\n\n\n1e18\n\n\n\n\n\n\nzetta\n\n\nZ\n\n\n1e21\n\n\n\n\n\n\nyotta\n\n\nY\n\n\n1e24\n\n\n\n\n\n\n\n\nPhysical Constants\n\n\nMathlion includes the following physical constants. See \nWikipedia\n for more information.\n\n\nUniversal constants\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nspeedOfLight\n\n\nc\n\n\n299792458\n\n\nm \n s\n-1\n\n\n\n\n\n\ngravitationConstant\n\n\nG\n\n\n6.6738480e-11\n\n\nm\n3\n \n kg\n-1\n \n s\n-2\n\n\n\n\n\n\nplanckConstant\n\n\nh\n\n\n6.626069311e-34\n\n\nJ \n s\n\n\n\n\n\n\nreducedPlanckConstant\n\n\nh\n\n\n1.05457172647e-34\n\n\nJ \n s\n\n\n\n\n\n\n\n\nElectromagnetic constants\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nmagneticConstant\n\n\n0\n\n\n1.2566370614e-6\n\n\nN \n A\n-2\n\n\n\n\n\n\nelectricConstant\n\n\n0\n\n\n8.854187817e-12\n\n\nF \n m\n-1\n\n\n\n\n\n\nvacuumImpedance\n\n\nZ\n0\n\n\n376.730313461\n\n\n\n\n\n\n\n\ncoulomb\n\n\n\n\n8.9875517873681764e9\n\n\nN \n m\n2\n \n C\n-2\n\n\n\n\n\n\nelementaryCharge\n\n\ne\n\n\n1.60217656535e-19\n\n\nC\n\n\n\n\n\n\nbohrMagneton\n\n\nB\n\n\n9.2740096820e-24\n\n\nJ \n T\n-1\n\n\n\n\n\n\nconductanceQuantum\n\n\nG\n0\n\n\n7.748091734625e-5\n\n\nS\n\n\n\n\n\n\ninverseConductanceQuantum\n\n\nG\n0\n-1\n\n\n12906.403721742\n\n\n\n\n\n\n\n\nmagneticFluxQuantum\n\n\nf\n0\n\n\n2.06783375846e-15\n\n\nWb\n\n\n\n\n\n\nnuclearMagneton\n\n\nN\n\n\n5.0507835311e-27\n\n\nJ \n T\n-1\n\n\n\n\n\n\nklitzing\n\n\nR\nK\n\n\n25812.807443484\n\n\n\n\n\n\n\n\n\n\n\n\n\nAtomic and nuclear constants\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nbohrRadius\n\n\na\n0\n\n\n5.291772109217e-11\n\n\nm\n\n\n\n\n\n\nclassicalElectronRadius\n\n\nr\ne\n\n\n2.817940326727e-15\n\n\nm\n\n\n\n\n\n\nelectronMass\n\n\nm\ne\n\n\n9.1093829140e-31\n\n\nkg\n\n\n\n\n\n\nfermiCoupling\n\n\nG\nF\n\n\n1.1663645e-5\n\n\nGeV\n-2\n\n\n\n\n\n\nfineStructure\n\n\n\n\n7.297352569824e-3\n\n\n-\n\n\n\n\n\n\nhartreeEnergy\n\n\nE\nh\n \n\n\n4.3597443419e-18\n\n\nJ\n\n\n\n\n\n\nprotonMass\n\n\nm\np\n\n\n1.67262177774e-27\n\n\nkg\n\n\n\n\n\n\ndeuteronMass\n\n\nm\nd\n\n\n3.3435830926e-27\n\n\nkg\n\n\n\n\n\n\nneutronMass\n\n\nm\nn\n\n\n1.6749271613e-27\n\n\nkg\n\n\n\n\n\n\nquantumOfCirculation\n\n\nh / (2m\ne\n)\n\n\n3.636947552024e-4\n\n\nm\n2\n \n s\n-1\n\n\n\n\n\n\nrydberg\n\n\nR\n\n\n10973731.56853955\n\n\nm\n-1\n\n\n\n\n\n\nthomsonCrossSection\n\n\n\n\n6.65245873413e-29\n\n\nm\n2\n\n\n\n\n\n\nweakMixingAngle\n\n\n\n\n0.222321\n\n\n-\n\n\n\n\n\n\nefimovFactor\n\n\n\n\n22.7\n\n\n-\n\n\n\n\n\n\n\n\nPhysico-chemical constants\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\natomicMass\n\n\nm\nu\n\n\n1.66053892173e-27\n\n\nkg\n\n\n\n\n\n\navogadro\n\n\nN\nA\n\n\n6.0221412927e23\n\n\nmol\n-1\n\n\n\n\n\n\nboltzmann\n\n\nk\n\n\n1.380648813e-23\n\n\nJ \n K\n-1\n\n\n\n\n\n\nfaraday\n\n\nF\n\n\n96485.336521\n\n\nC \n mol\n-1\n\n\n\n\n\n\nfirstRadiation\n\n\nc\n1\n\n\n3.7417715317e-16\n\n\nW \n m\n2\n\n\n\n\n\n\nloschmidt\n\n\nn\n0\n\n\n2.686780524e25\n\n\nm\n-3\n\n\n\n\n\n\ngasConstant\n\n\nR\n\n\n8.314462175\n\n\nJ \n K\n-1\n \n mol\n-1\n\n\n\n\n\n\nmolarPlanckConstant\n\n\nN\nA\n \n h\n\n\n3.990312717628e-10\n\n\nJ \n s \n mol\n-1\n\n\n\n\n\n\nmolarVolume\n\n\nV\nm\n\n\n2.241396820e-10\n\n\nm\n3\n \n mol\n-1\n\n\n\n\n\n\nsackurTetrode\n\n\n\n\n-1.164870823\n\n\n-\n\n\n\n\n\n\nsecondRadiation\n\n\nc\n2\n\n\n1.438777013e-2\n\n\nm \n K\n\n\n\n\n\n\nstefanBoltzmann\n\n\n\n\n5.67037321e-8\n\n\nW \n m\n-2\n \n K\n-4\n\n\n\n\n\n\nwienDisplacement\n\n\nb\n\n\n2.897772126e-3\n\n\nm \n K\n\n\n\n\n\n\n\n\n\n\n\nNote that the values of \nloschmidt\n and \nmolarVolume\n are at \nT = 273.15 K\n and \np = 101.325 kPa\n. \nThe value of \nsackurTetrode\n is at \nT = 1 K\n and \np = 101.325 kPa\n.\n\n\nAdopted values\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nmolarMass\n\n\nM\nu\n\n\n1e-3\n\n\nkg \n mol\n-1\n\n\n\n\n\n\nmolarMassC12\n\n\nM(\n12\nC)\n\n\n1.2e-2\n\n\nkg \n mol\n-1\n\n\n\n\n\n\ngravity\n\n\ng\nn\n\n\n9.80665\n\n\nm \n s\n-2\n\n\n\n\n\n\natm\n\n\natm\n\n\n101325\n\n\nPa\n\n\n\n\n\n\n\n\nNatural units\n\n\n\n\n\n\n\n\nName\n\n\nSymbol\n\n\nValue\n\n\nUnit\n\n\n\n\n\n\n\n\n\n\nplanckLength\n\n\nl\nP\n\n\n1.61619997e-35\n\n\nm\n\n\n\n\n\n\nplanckMass\n\n\nm\nP\n\n\n2.1765113e-8\n\n\nkg\n\n\n\n\n\n\nplanckTime\n\n\nt\nP\n\n\n5.3910632e-44\n\n\ns\n\n\n\n\n\n\nplanckCharge\n\n\nq\nP\n\n\n1.87554595641e-18\n\n\nC\n\n\n\n\n\n\nplanckTemperature\n\n\nT\nP\n\n\n1.41683385e+32\n\n\nK", 
            "title": "Mathematical costants"
        }, 
        {
            "location": "/costants/#supported-phisical-costants", 
            "text": "This section lists all available units, prefixes, and physical constants. These can be used via the Unit object, or via  math.eval() .", 
            "title": "Supported phisical costants"
        }, 
        {
            "location": "/costants/#reference", 
            "text": "Mathlion comes with the following built-in units.     Base  Unit      Length  meter (m), inch (in), foot (ft), yard (yd), mile (mi), link (li), rod (rd), chain (ch), angstrom, mil    Surface area  m2, sqin, sqft, sqyd, sqmi, sqrd, sqch, sqmil, acre, hectare    Volume  m3, litre (l, L, lt, liter), cc, cuin, cuft, cuyd, teaspoon, tablespoon    Liquid volume  minim (min), fluiddram (fldr), fluidounce (floz), gill (gi), cup (cp), pint (pt), quart (qt), gallon (gal), beerbarrel (bbl), oilbarrel (obl), hogshead, drop (gtt)    Angles  rad (radian), deg (degree), grad (gradian), cycle, arcsec (arcsecond), arcmin (arcminute)    Time  second (s, secs, seconds), minute (mins, minutes), hour (h, hr, hrs, hours), day (days), week (weeks), month (months), year (years), decade (decades), century (centuries), millennium (millennia)    Frequency  hertz (Hz)    Mass  gram(g), tonne, ton, grain (gr), dram (dr), ounce (oz), poundmass (lbm, lb, lbs), hundredweight (cwt), stick, stone    Electric current  ampere (A)    Temperature  kelvin (K), celsius (degC), fahrenheit (degF), rankine (degR)    Amount of substance  mole (mol)    Luminous intensity  candela (cd)    Force  newton (N), dyne (dyn), poundforce (lbf), kip    Energy  joule (J), erg, Wh, BTU, electronvolt (eV)    Power  watt (W), hp    Pressure  Pa, psi, atm, torr, bar, mmHg, mmH2O, cmH2O    Electricity and magnetism  ampere (A), coulomb (C), watt (W), volt (V), ohm, farad (F), weber (Wb), tesla (T), henry (H), siemens (S), electronvolt (eV)    Binary  bit (b), byte (B)     Note: all time units are based on the Julian year, with one month being 1/12th of a Julian year, a year being one Julian year, a decade being 10 Julian years, a century being 100, and a millennium being 1000.  Note that all relevant units can also be written in plural form, for example  5 meters  instead of  5 meter  or  10 seconds  instead of  10 second .   Surface and volume units can alternatively be expressed in terms of length units raised to a power, for example  100 in^2  instead of  100 sqin .", 
            "title": "Reference"
        }, 
        {
            "location": "/costants/#prefixes", 
            "text": "The following decimal prefixes are available.     Name  Abbreviation  Value      deca  da  1e1    hecto  h  1e2    kilo  k  1e3    mega  M  1e6    giga  G  1e9    tera  T  1e12    peta  P  1e15    exa  E  1e18    zetta  Z  1e21    yotta  Y  1e24        Name  Abbreviation  Value      deci  d  1e-1    centi  c  1e-2    milli  m  1e-3    micro  u  1e-6    nano  n  1e-9    pico  p  1e-12    femto  f  1e-15    atto  a  1e-18    zepto  z  1e-21    yocto  y  1e-24     The following binary prefixes are available.\nThey can be used with units  bit  ( b ) and  byte  ( B ).     Name  Abbreviation  Value      kibi  Ki  1024    mebi  Mi  1024^2    gibi  Gi  1024^3    tebi  Ti  1024^4    pebi  Pi  1024^5    exi  Ei  1024^6    zebi  Zi  1024^7    yobi  Yi  1024^8        Name  Abbreviation  Value      kilo  k  1e3    mega  M  1e6    giga  G  1e9    tera  T  1e12    peta  P  1e15    exa  E  1e18    zetta  Z  1e21    yotta  Y  1e24", 
            "title": "Prefixes"
        }, 
        {
            "location": "/costants/#physical-constants", 
            "text": "Mathlion includes the following physical constants. See  Wikipedia  for more information.", 
            "title": "Physical Constants"
        }, 
        {
            "location": "/costants/#universal-constants", 
            "text": "Name  Symbol  Value  Unit      speedOfLight  c  299792458  m   s -1    gravitationConstant  G  6.6738480e-11  m 3    kg -1    s -2    planckConstant  h  6.626069311e-34  J   s    reducedPlanckConstant  h  1.05457172647e-34  J   s", 
            "title": "Universal constants"
        }, 
        {
            "location": "/costants/#electromagnetic-constants", 
            "text": "Name  Symbol  Value  Unit      magneticConstant  0  1.2566370614e-6  N   A -2    electricConstant  0  8.854187817e-12  F   m -1    vacuumImpedance  Z 0  376.730313461     coulomb   8.9875517873681764e9  N   m 2    C -2    elementaryCharge  e  1.60217656535e-19  C    bohrMagneton  B  9.2740096820e-24  J   T -1    conductanceQuantum  G 0  7.748091734625e-5  S    inverseConductanceQuantum  G 0 -1  12906.403721742     magneticFluxQuantum  f 0  2.06783375846e-15  Wb    nuclearMagneton  N  5.0507835311e-27  J   T -1    klitzing  R K  25812.807443484", 
            "title": "Electromagnetic constants"
        }, 
        {
            "location": "/costants/#atomic-and-nuclear-constants", 
            "text": "Name  Symbol  Value  Unit      bohrRadius  a 0  5.291772109217e-11  m    classicalElectronRadius  r e  2.817940326727e-15  m    electronMass  m e  9.1093829140e-31  kg    fermiCoupling  G F  1.1663645e-5  GeV -2    fineStructure   7.297352569824e-3  -    hartreeEnergy  E h    4.3597443419e-18  J    protonMass  m p  1.67262177774e-27  kg    deuteronMass  m d  3.3435830926e-27  kg    neutronMass  m n  1.6749271613e-27  kg    quantumOfCirculation  h / (2m e )  3.636947552024e-4  m 2    s -1    rydberg  R  10973731.56853955  m -1    thomsonCrossSection   6.65245873413e-29  m 2    weakMixingAngle   0.222321  -    efimovFactor   22.7  -", 
            "title": "Atomic and nuclear constants"
        }, 
        {
            "location": "/costants/#physico-chemical-constants", 
            "text": "Name  Symbol  Value  Unit      atomicMass  m u  1.66053892173e-27  kg    avogadro  N A  6.0221412927e23  mol -1    boltzmann  k  1.380648813e-23  J   K -1    faraday  F  96485.336521  C   mol -1    firstRadiation  c 1  3.7417715317e-16  W   m 2    loschmidt  n 0  2.686780524e25  m -3    gasConstant  R  8.314462175  J   K -1    mol -1    molarPlanckConstant  N A    h  3.990312717628e-10  J   s   mol -1    molarVolume  V m  2.241396820e-10  m 3    mol -1    sackurTetrode   -1.164870823  -    secondRadiation  c 2  1.438777013e-2  m   K    stefanBoltzmann   5.67037321e-8  W   m -2    K -4    wienDisplacement  b  2.897772126e-3  m   K      Note that the values of  loschmidt  and  molarVolume  are at  T = 273.15 K  and  p = 101.325 kPa . \nThe value of  sackurTetrode  is at  T = 1 K  and  p = 101.325 kPa .", 
            "title": "Physico-chemical constants"
        }, 
        {
            "location": "/costants/#adopted-values", 
            "text": "Name  Symbol  Value  Unit      molarMass  M u  1e-3  kg   mol -1    molarMassC12  M( 12 C)  1.2e-2  kg   mol -1    gravity  g n  9.80665  m   s -2    atm  atm  101325  Pa", 
            "title": "Adopted values"
        }, 
        {
            "location": "/costants/#natural-units", 
            "text": "Name  Symbol  Value  Unit      planckLength  l P  1.61619997e-35  m    planckMass  m P  2.1765113e-8  kg    planckTime  t P  5.3910632e-44  s    planckCharge  q P  1.87554595641e-18  C    planckTemperature  T P  1.41683385e+32  K", 
            "title": "Natural units"
        }, 
        {
            "location": "/operators/", 
            "text": "Supported operators of .math()\n\n\nExpression syntax\n\n\nThis page describes the syntax of expression parser of Mathlion. It describes\nhow to work with the available data types, functions, operators, variables,\nand more.\n\n\nOperators\n\n\nThe expression parser has operators for all common arithmetic operations such\nas addition and multiplication. The expression parser uses conventional infix\nnotation for operators: an operator is placed between its arguments.\nRound parentheses can be used to override the default precedence of operators.\n\n\nThe following operators are available:\n\n\n\n\n\n\n\n\nOperator\n\n\nName\n\n\nSyntax\n\n\nAssociativity\n\n\nExample\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n(\n, \n)\n\n\nGrouping\n\n\n(x)\n\n\nNone\n\n\n2 * (3 + 4)\n\n\n14\n\n\n\n\n\n\n[\n, \n]\n\n\nMatrix, Index\n\n\n[...]\n\n\nNone\n\n\n[[1,2],[3,4]]\n\n\n[[1,2],[3,4]]\n\n\n\n\n\n\n{\n, \n}\n\n\nObject\n\n\n{...}\n\n\nNone\n\n\n{a: 1, b: 2}\n\n\n{a: 1, b: 2}\n\n\n\n\n\n\n,\n\n\nParameter separator\n\n\nx, y\n\n\nLeft to right\n\n\nmax(2, 1, 5)\n\n\n5\n\n\n\n\n\n\n.\n\n\nProperty accessor\n\n\nobj.prop\n\n\nLeft to right\n\n\nobj={a: 12}; obj.a\n\n\n12\n\n\n\n\n\n\n;\n\n\nStatement separator\n\n\nx; y\n\n\nLeft to right\n\n\na=2; b=3; a*b\n\n\n[6]\n\n\n\n\n\n\n;\n\n\nRow separator\n\n\n[x, y]\n\n\nLeft to right\n\n\n[1,2;3,4]\n\n\n[[1,2],[3,4]]\n\n\n\n\n\n\n\\n\n\n\nStatement separator\n\n\nx \\n y\n\n\nLeft to right\n\n\na=2 \\n b=3 \\n a*b\n\n\n[2,3,6]\n\n\n\n\n\n\n+\n\n\nAdd\n\n\nx + y\n\n\nLeft to right\n\n\n4 + 5\n\n\n9\n\n\n\n\n\n\n+\n\n\nUnary plus\n\n\n+y\n\n\nRight to left\n\n\n+4\n\n\n4\n\n\n\n\n\n\n-\n\n\nSubtract\n\n\nx - y\n\n\nLeft to right\n\n\n7 - 3\n\n\n4\n\n\n\n\n\n\n-\n\n\nUnary minus\n\n\n-y\n\n\nRight to left\n\n\n-4\n\n\n-4\n\n\n\n\n\n\n*\n\n\nMultiply\n\n\nx * y\n\n\nLeft to right\n\n\n2 * 3\n\n\n6\n\n\n\n\n\n\n.*\n\n\nElement-wise multiply\n\n\nx .* y\n\n\nLeft to right\n\n\n[1,2,3] .* [1,2,3]\n\n\n[1,4,9]\n\n\n\n\n\n\n/\n\n\nDivide\n\n\nx / y\n\n\nLeft to right\n\n\n6 / 2\n\n\n3\n\n\n\n\n\n\n./\n\n\nElement-wise divide\n\n\nx ./ y\n\n\nLeft to right\n\n\n[9,6,4] ./ [3,2,2]\n\n\n[3,3,2]\n\n\n\n\n\n\n%\n, \nmod\n\n\nModulus\n\n\nx % y\n\n\nLeft to right\n\n\n8 % 3\n\n\n2\n\n\n\n\n\n\n^\n\n\nPower\n\n\nx ^ y\n\n\nRight to left\n\n\n2 ^ 3\n\n\n8\n\n\n\n\n\n\n.^\n\n\nElement-wise power\n\n\nx .^ y\n\n\nRight to left\n\n\n[2,3] .^ [3,3]\n\n\n[9,27]\n\n\n\n\n\n\n'\n\n\nTranspose\n\n\ny'\n\n\nLeft to right\n\n\n[[1,2],[3,4]]'\n\n\n[[1,3],[2,4]]\n\n\n\n\n\n\n!\n\n\nFactorial\n\n\ny!\n\n\nLeft to right\n\n\n5!\n\n\n120\n\n\n\n\n\n\n\n\nBitwise and\n\n\nx \n y\n\n\nLeft to right\n\n\n5 \n 3\n\n\n1\n\n\n\n\n\n\n~\n\n\nBitwise not\n\n\n~x\n\n\nRight to left\n\n\n~2\n\n\n-3\n\n\n\n\n\n\n\n\nBitwise or\n\n\nx \n y\n\n\nLeft to right\n\n\n5 \n 3\n\n\n7\n\n\n\n\n\n\n^\n\n\nBitwise xor\n\n\nx ^\n y\n\n\nLeft to right\n\n\n5 ^\n 2\n\n\n6\n\n\n\n\n\n\n\n\nLeft shift\n\n\nx \n y\n\n\nLeft to right\n\n\n4 \n 1\n\n\n8\n\n\n\n\n\n\n\n\nRight arithmetic shift\n\n\nx \n y\n\n\nLeft to right\n\n\n8 \n 1\n\n\n4\n\n\n\n\n\n\n\n\nRight logical shift\n\n\nx \n y\n\n\nLeft to right\n\n\n-8 \n 1\n\n\n2147483644\n\n\n\n\n\n\nand\n\n\nLogical and\n\n\nx and y\n\n\nLeft to right\n\n\ntrue and false\n\n\nfalse\n\n\n\n\n\n\nnot\n\n\nLogical not\n\n\nnot y\n\n\nRight to left\n\n\nnot true\n\n\nfalse\n\n\n\n\n\n\nor\n\n\nLogical or\n\n\nx or y\n\n\nLeft to right\n\n\ntrue or false\n\n\ntrue\n\n\n\n\n\n\nxor\n\n\nLogical xor\n\n\nx xor y\n\n\nLeft to right\n\n\ntrue xor true\n\n\nfalse\n\n\n\n\n\n\n=\n\n\nAssignment\n\n\nx = y\n\n\nRight to left\n\n\na = 5\n\n\n5\n\n\n\n\n\n\n?\n \n:\n\n\nConditional expression\n\n\nx ? y : z\n\n\nRight to left\n\n\n15 \n 100 ? 1 : -1\n\n\n-1\n\n\n\n\n\n\n:\n\n\nRange\n\n\nx : y\n\n\nRight to left\n\n\n1:4\n\n\n[1,2,3,4]\n\n\n\n\n\n\nto\n, \nin\n\n\nUnit conversion\n\n\nx to y\n\n\nLeft to right\n\n\n2 inch to cm\n\n\n5.08 cm\n\n\n\n\n\n\n==\n\n\nEqual\n\n\nx == y\n\n\nLeft to right\n\n\n2 == 4 - 2\n\n\ntrue\n\n\n\n\n\n\n!=\n\n\nUnequal\n\n\nx != y\n\n\nLeft to right\n\n\n2 != 3\n\n\ntrue\n\n\n\n\n\n\n\n\nSmaller\n\n\nx \n y\n\n\nLeft to right\n\n\n2 \n 3\n\n\ntrue\n\n\n\n\n\n\n\n\nLarger\n\n\nx \n y\n\n\nLeft to right\n\n\n2 \n 3\n\n\nfalse\n\n\n\n\n\n\n=\n\n\nSmallereq\n\n\nx \n= y\n\n\nLeft to right\n\n\n4 \n= 3\n\n\nfalse\n\n\n\n\n\n\n=\n\n\nLargereq\n\n\nx \n= y\n\n\nLeft to right\n\n\n2 + 4 \n= 6\n\n\ntrue\n\n\n\n\n\n\n\n\nSince in mathlion every variable is an array the operators \n*\n,\n/\n,\n^\n are converted in background to \n.*\n,\n./\n,\n.^\n to allow for a more intuitive writing of the equations.\n\n\nPrecedence\n\n\nThe operators have the following precedence, from highest to lowest:\n\n\n\n\n\n\n\n\nOperators\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n(...)\n[...]\n{...}\n\n\nGrouping\nMatrix\nObject\n\n\n\n\n\n\nx(...)\nx[...]\nobj.prop\n:\n\n\nFunction call\nMatrix index\nProperty accessor\nKey/value separator\n\n\n\n\n\n\n'\n\n\nMatrix transpose\n\n\n\n\n\n\n!\n\n\nFactorial\n\n\n\n\n\n\n^\n, \n.^\n\n\nExponentiation\n\n\n\n\n\n\n+\n, \n-\n, \n~\n, \nnot\n\n\nUnary plus, unary minus, bitwise not, logical not\n\n\n\n\n\n\nx unit\n\n\nUnit\n\n\n\n\n\n\n*\n, \n/\n, \n.*\n, \n./\n, \n%\n, \nmod\n\n\nMultiply, divide, modulus, implicit multiply\n\n\n\n\n\n\n+\n, \n-\n\n\nAdd, subtract\n\n\n\n\n\n\n:\n\n\nRange\n\n\n\n\n\n\nto\n, \nin\n\n\nUnit conversion\n\n\n\n\n\n\n, \n, \n\n\nBitwise left shift, bitwise right arithmetic shift, bitwise right logical shift\n\n\n\n\n\n\n==\n, \n!=\n, \n, \n, \n=\n, \n=\n\n\nRelational\n\n\n\n\n\n\n\n\nBitwise and\n\n\n\n\n\n\n^\n\n\nBitwise xor\n\n\n\n\n\n\n\n\nBitwise or\n\n\n\n\n\n\nand\n\n\nLogical and\n\n\n\n\n\n\nxor\n\n\nLogical xor\n\n\n\n\n\n\nor\n\n\nLogical or\n\n\n\n\n\n\n?\n, \n:\n\n\nConditional expression\n\n\n\n\n\n\n=\n\n\nAssignment\n\n\n\n\n\n\n,\n\n\nParameter and column separator\n\n\n\n\n\n\n;\n\n\nRow separator\n\n\n\n\n\n\n\\n\n, \n;\n\n\nStatement separators\n\n\n\n\n\n\n\n\nFunctions\n\n\nFunctions are called by entering their name, followed by zero or more\narguments enclosed by parentheses. \n\n\n('sqrt(25)');          // 5\n('log(1000, 3 + 7)');  // 4\n('sin(pi / 4)');       // 0.7071067811865475\n\n\n\n\nNew functions can be defined using the \nfunction\n keyword. Functions can be\ndefined with multiple variables. Function assignments are limited: they can\nonly be defined on a single line.\n\n\n('f(x) = x ^ 2 - 5');\n('f(2)');    // -1\n('f(3)');    // 4\n\n('g(x, y) = x ^ y');\n('g(2, 3)'); // 8\n\n\n\n\nConstants and variables\n\n\nMathlion has a number of built-in constants such as \npi\n and \ne\n.\n\n\n// use constants\n('pi');                // 3.141592653589793\n('e ^ 2');             // 7.3890560989306495\n('log(e)');            // 1\n('e ^ (pi * i) + 1');  // ~0 (Euler)\n\n\n\n\nVariables can be defined using the assignment operator \n=\n, and can be used\nlike constants.\n\n\n// define variables\n('a = 3.4');     // 3.4\n('b = 5 / 2');   // 2.5\n\n// use variables\n('a * b');       // 8.5\n\n\n\n\nData types\n\n\nThe expression parser supports booleans, numbers, complex numbers, units,\nstrings, matrices, and objects.\n\n\nBooleans\n\n\nBooleans \ntrue\n and \nfalse\n can be used in expressions.\n\n\n// use booleans\n('true');              // true\n('false');             // false\n('(2 == 3) == false'); // true\n\n\n\n\nBooleans can be converted to numbers and strings and vice versa using the\nfunctions \nnumber\n and \nboolean\n, and \nstring\n.\n\n\n// convert booleans\n('number(true)');      // 1\n('string(false)');     // \nfalse\n\n('boolean(1)');        // true\n('boolean(\nfalse\n)');  // false\n\n\n\n\nNumbers\n\n\nThe most important and basic data type in Mathlion are numbers. Numbers use a\npoint as decimal mark. Numbers can be entered with exponential notation.\nExamples:\n\n\n// numbers in Mathlion\n('2');       // 2\n('3.14');    // 3.14\n('1.4e3');   // 1400\n('22e-3');   // 0.022\n\n\n\n\nA number can be converted to a string and vice versa using the functions\n\nnumber\n and \nstring\n.\n\n\n// convert a string into a number\n('number(\n2.3\n)');   // 2.3\n('string(2.3)');     // \n2.3\n\n\n\n\n\nMathlion uses regular JavaScript numbers, which are floating points with a\nlimited precision and limited range. The limitations are described in detail\non the page \nNumbers\n.\n\n\n('1e-325');  // 0\n('1e309');   // Infinity\n('-1e309');  // -Infinity\n\n\n\n\nWhen doing calculations with floats, one can very easily get round-off errors:\n\n\n// round-off error due to limited floating point precision\n('0.1 + 0.2'); // 0.30000000000000004\n\n\n\n\nWhen outputting results, the function \nmath.format\n can be used to hide\nthese round-off errors when outputting results for the user:\n\n\nvar ans = ('0.1 + 0.2');   //  0.30000000000000004\nmath.format(ans, {precision: 14});  // \n0.3\n\n\n\n\n\nBigNumbers\n\n\nMathlion supports BigNumbers for calculations with an arbitrary precision.\n\n\nBigNumbers are slower but have a higher precision. Calculations with big\nnumbers are supported only by arithmetic functions.\n\n\nBigNumbers can be created using the \nbignumber\n function:\n\n\n('bignumber(0.1) + bignumber(0.2)'); // BigNumber, 0.3\n\n\n\n\nThe default number type of the expression parser can be changed at instantiation\nof Mathlion. The expression parser parses numbers as BigNumber by default:\n\n\n// Configure the type of number: 'number' (default), 'BigNumber', or 'Fraction'\nmath.config({number: 'BigNumber'});\n\n// all numbers are parsed as BigNumber\n('0.1 + 0.2'); // BigNumber, 0.3\n\n\n\n\nBigNumbers can be converted to numbers and vice versa using the functions\n\nnumber\n and \nbignumber\n. When converting a BigNumber to a Number, the high\nprecision of the BigNumber will be lost. When a BigNumber is too large to be represented\nas Number, it will be initialized as \nInfinity\n.\n\n\nComplex numbers\n\n\nComplex numbers can be created using the imaginary unit \ni\n, which is defined\nas \ni^2 = -1\n. Complex numbers have a real and complex part, which can be\nretrieved using the functions \nre\n and \nim\n.\n\n\nvar parser = math.parser();\n\n// create complex numbers\n('a = 2 + 3i');  // Complex, 2 + 3i\n('b = 4 - i');   // Complex, 4 - i\n\n// get real and imaginary part of a complex number\n('re(a)');       // Number,  2\n('im(a)');       // Number,  3\n\n// calculations with complex numbers\n('a + b');       // Complex, 6 + 2i\n('a * b');       // Complex, 11 + 10i\n('i * i');       // Number,  -1\n('sqrt(-4)');    // Complex, 2i\n\n\n\n\nMathlion does not automatically convert complex numbers with an imaginary part\nof zero to numbers. They can be converted to a number using the function\n\nnumber\n.\n\n\n// convert a complex number to a number\nvar parser = math.parser();\n('a = 2 + 3i');  // Complex, 2 + 3i\n('b = a - 3i');  // Complex, 2 + 0i\n('number(b)');   // Number,  2\n('number(a)');   // Error: 2 + i is no valid number\n\n\n\n\nUnits\n\n\nMathlion supports units. Units can be used in the arithmetic operations\nadd, subtract, multiply, divide, and exponentiation.\nUnits can also be converted from one to another.\nAn overview of all available units can be found on the page\n\nUnits\n.\n\n\nUnits can be converted using the operator \nto\n or \nin\n.\n\n\n// create a unit\n('5.4 kg');                    // Unit, 5.4 kg\n\n// convert a unit\n('2 inch to cm');              // Unit, 5.08 cm\n('20 celsius in fahrenheit');  // Unit, ~68 fahrenheit\n('90 km/h to m/s');         // Unit, 25 m / s\n\n// convert a unit to a number\n// A second parameter with the unit for the exported number must be provided\n('number(5 cm, mm)');          // Number, 50\n\n// calculations with units\n('0.5kg + 33g');               // Unit, 0.533 kg\n('3 inch + 2 cm');             // Unit, 3.7874 inch\n('3 inch + 2 cm');             // Unit, 3.7874 inch\n('12 seconds * 2');            // Unit, 24 seconds\n('sin(45 deg)');               // Number, 0.7071067811865475\n('9.81 m/s^2 * 5 s to mi/h')   // Unit, 109.72172512527 mi / h\n\n\n\n\nStrings\n\n\nStrings are enclosed by double quotes \". Strings can be concatenated using the\nfunction \nconcat\n (not by adding them using \n+\n like in JavaScript). Parts of\na string can be retrieved or replaced by using indexes. Strings can be converted\nto a number using function \nnumber\n, and numbers can be converted to a string\nusing function \nstring\n.\n\n\n// create a string\n('\nhello\n');                       // String, \nhello\n\n\n// string manipulation\n('a = concat(\nhello\n, \n world\n)'); // String, \nhello world\n\n('size(a)');                       // Number, 11\n('a[1:5]');                        // String, \nhello\n\n('a[1] = \nH\n');                    // String, \nHello\n\n('a[7:12] = \nthere!\n');            // String, \nHello there!\n\n\n// string conversion\n('number(\n300\n)');                 // Number, 300\n('string(300)');                   // String, \n300\n\n\n\n\n\nStrings can be used in the \neval\n function, to parse expressions inside\nthe expression parser:\n\n\n('eval(\n2 + 3\n)'); // 5\n\n\n\n\nMatrices\n\n\nMatrices can be created by entering a series of values between square brackets,\nelements are separated by a comma \n,\n.\nA matrix like \n[1, 2, 3]\n will create a vector, a 1-dimensional matrix with\nsize \n[3]\n. To create a multi-dimensional matrix, matrices can be nested into\neach other. For easier creation of two-dimensional matrices, a semicolon \n;\n\ncan be used to separate rows in a matrix.\n\n\n// create a matrix\n('[1, 2, 3]');                               // Matrix, size [3]\n('[[1, 2, 3], [4, 5, 6]]');                  // Matrix, size [2, 3]\n('[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]');    // Matrix, size [2, 2, 2]\n\n// create a two dimensional matrix\n('[1, 2, 3; 4, 5, 6]');                      // Matrix, size [2, 3]\n\n\n\n\nAnother way to create filled matrices is using the functions \nzeros\n, \nones\n,\n\neye\n, and \nrange\n.\n\n\n// initialize a matrix with ones or zeros\n('zeros(3, 2)');     // Matrix, [[0, 0], [0, 0], [0, 0]],  size [3, 2]\n('ones(3)');         // Matrix, [1, 1, 1],                 size [3]\n('5 * ones(2, 2)');  // Matrix, [[5, 5], [5, 5]],          size [2, 2]\n\n// create an identity matrix\n('eye(2)');          // Matrix, [[1, 0], [0, 1]],          size [2, 2]\n\n// create a range\n('1:4');             // Matrix, [1, 2, 3, 4],              size [4]\n('0:2:10');          // Matrix, [0, 2, 4, 6, 8, 10],       size [6]\n\n\n\n\nA subset can be retrieved from a matrix using indexes and a subset of a matrix\ncan be replaced by using indexes. Indexes are enclosed in square brackets, and\ncontain a number or a range for each of the matrix dimensions. A range can have\nits start and/or end undefined. When the start is undefined, the range will start\nat 1, when the end is undefined, the range will end at the end of the matrix.\nThere is a context variable \nend\n available as well to denote the end of the\nmatrix.\n\n\n// create matrices\n('a = [1, 2; 3, 4]');      // Matrix, [[1, 2], [3, 4]]\n('b = zeros(2, 2)');       // Matrix, [[0, 0], [0, 0]]\n('c = 5:9');               // Matrix, [5, 6, 7, 8, 9]\n\n// replace a subset in a matrix\n('b[1, 1:2] = [5, 6]');    // Matrix, [[5, 6], [0, 0]]\n('b[2, :] = [7, 8]');      // Matrix, [[5, 6], [7, 8]]\n\n// perform a matrix calculation\n('d = a * b');             // Matrix, [[19, 22], [43, 50]]\n\n// retrieve a subset of a matrix\n('d[2, 1]');               // 43\n('d[2, 1:end]');           // Matrix, [[43, 50]]\n('c[end - 1 : -1 : 2]');   // Matrix, [8, 7, 6]\n\n\n\n\nObjects\n\n\nObjects in Mathlion work the same as in languages like JavaScript and Python.\nAn object is enclosed by square brackets \n{\n, \n}\n, and contains a set of \ncomma separated key/value pairs. Keys and values are separated by a colon \n:\n.\nKeys can be a symbol like \nprop\n or a string like \n\"prop\"\n.\n\n\n('{a: 2 + 1, b: 4}');        // {a: 3, b: 4}\n('{\na\n: 2 + 1, \nb\n: 4}');    // {a: 3, b: 4}\n\n\n\n\nObjects can contain objects:\n\n\n('{a: 2, b: {c: 3, d: 4}}'); // {a: 2, b: {c: 3, d: 4}}\n\n\n\n\nObject properties can be retrieved or replaced using dot notation or bracket \nnotation. Unlike JavaScript, when setting a property value, the whole object\nis returned, not the property value\n\n\nvar scope = {\n  obj: {\n    prop: 42\n  }\n};\n\n// retrieve properties\n('obj.prop', scope);         // 42\n('obj[\nprop\n]', scope);      // 42\n\n// set properties (returns the whole object, not the property value!)\n('obj.prop = 43', scope);    // {prop: 43}\n('obj[\nprop\n] = 43', scope); // {prop: 43}\nscope.obj;                            // {prop: 43}\n\n\n\n\nMulti-line expressions\n\n\nAn expression can contain multiple lines, and expressions can be spread over\nmultiple lines. Lines can be separated by a newline character \n\\n\n or by a\nsemicolon \n;\n. Output of statements followed by a semicolon will be hidden from\nthe output, and empty lines are ignored. The output is returned as a \nResultSet\n,\nwith an entry for every visible statement.\n\n\n// a multi-line expression\n('1 * 3 \\n 2 * 3 \\n 3 * 3');   // ResultSet, [3, 6, 9]\n\n// semicolon statements are hidden from the output\n('a=3; b=4; a + b \\n a * b');  // ResultSet, [7, 12]\n\n// single expression spread over multiple lines\n('a = 2 +\\n  3');              // 5\n('[\\n  1, 2;\\n  3, 4\\n]');     // Matrix, [[1, 2], [3, 4]]\n\n\n\n\nThe results can be read from a \nResultSet\n via the property \nResultSet.entries\n\nwhich is an \nArray\n, or by calling \nResultSet.valueOf()\n, which returns the\narray with results.\n\n\nImplicit multiplication\n\n\nThe expression parser supports implicit multiplication. Implicit multiplication\nhas the same precedence as explicit multiplications and divisions, so \n3/4 mm\n\nis evaluated as \n(3 / 4) * mm\n.\n\n\nParentheses are parsed as a function call when there is a symbol or accessor on\nthe left hand side, like \nsqrt(4)\n or \nobj.method(4)\n. In other cases the\nparentheses are interpreted as an implicit multiplication.\n\n\nImplicit multiplication can be tricky as there is ambiguity on how an expression\nis evaluated. Use it carefully.\n\n\nHere some examples:\n\n\n\n\n\n\n\n\nExpression\n\n\nEvaluated as\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n(1 + 3) pi\n\n\n(1 + 3) * pi\n\n\n12.566370614359172\n\n\n\n\n\n\n(4 - 1) 2\n\n\n(4 - 1) * 2\n\n\n6\n\n\n\n\n\n\n3 / 4 mm\n\n\n(3 / 4) * mm\n\n\n0.75 mm\n\n\n\n\n\n\n2 + 3 i\n\n\n2 + (3 * i)\n\n\n2 + 3i\n\n\n\n\n\n\n(1 + 2) (4 - 2)\n\n\n(1 + 2) * (4 - 2)\n\n\n6\n\n\n\n\n\n\nsqrt(4) (1 + 2)\n\n\nsqrt(4) * (1 + 2)\n\n\n6\n\n\n\n\n\n\n\n\nComments\n\n\nComments can be added to explain or describe calculations in the text. A comment\nstarts with a sharp sign character \n#\n, and ends at the end of the line. A line\ncan contain a comment only, or can contain an expression followed by a comment.\n\n\nvar parser = math.parser();\n\n('# define some variables');\n('width = 3');                             // 3\n('height = 4');                            // 4\n('width * height   # calculate the area'); // 12", 
            "title": "Mathematical operators"
        }, 
        {
            "location": "/operators/#supported-operators-of-math", 
            "text": "", 
            "title": "Supported operators of .math()"
        }, 
        {
            "location": "/operators/#expression-syntax", 
            "text": "This page describes the syntax of expression parser of Mathlion. It describes\nhow to work with the available data types, functions, operators, variables,\nand more.", 
            "title": "Expression syntax"
        }, 
        {
            "location": "/operators/#operators", 
            "text": "The expression parser has operators for all common arithmetic operations such\nas addition and multiplication. The expression parser uses conventional infix\nnotation for operators: an operator is placed between its arguments.\nRound parentheses can be used to override the default precedence of operators.  The following operators are available:     Operator  Name  Syntax  Associativity  Example  Result      ( ,  )  Grouping  (x)  None  2 * (3 + 4)  14    [ ,  ]  Matrix, Index  [...]  None  [[1,2],[3,4]]  [[1,2],[3,4]]    { ,  }  Object  {...}  None  {a: 1, b: 2}  {a: 1, b: 2}    ,  Parameter separator  x, y  Left to right  max(2, 1, 5)  5    .  Property accessor  obj.prop  Left to right  obj={a: 12}; obj.a  12    ;  Statement separator  x; y  Left to right  a=2; b=3; a*b  [6]    ;  Row separator  [x, y]  Left to right  [1,2;3,4]  [[1,2],[3,4]]    \\n  Statement separator  x \\n y  Left to right  a=2 \\n b=3 \\n a*b  [2,3,6]    +  Add  x + y  Left to right  4 + 5  9    +  Unary plus  +y  Right to left  +4  4    -  Subtract  x - y  Left to right  7 - 3  4    -  Unary minus  -y  Right to left  -4  -4    *  Multiply  x * y  Left to right  2 * 3  6    .*  Element-wise multiply  x .* y  Left to right  [1,2,3] .* [1,2,3]  [1,4,9]    /  Divide  x / y  Left to right  6 / 2  3    ./  Element-wise divide  x ./ y  Left to right  [9,6,4] ./ [3,2,2]  [3,3,2]    % ,  mod  Modulus  x % y  Left to right  8 % 3  2    ^  Power  x ^ y  Right to left  2 ^ 3  8    .^  Element-wise power  x .^ y  Right to left  [2,3] .^ [3,3]  [9,27]    '  Transpose  y'  Left to right  [[1,2],[3,4]]'  [[1,3],[2,4]]    !  Factorial  y!  Left to right  5!  120     Bitwise and  x   y  Left to right  5   3  1    ~  Bitwise not  ~x  Right to left  ~2  -3     Bitwise or  x   y  Left to right  5   3  7    ^  Bitwise xor  x ^  y  Left to right  5 ^  2  6     Left shift  x   y  Left to right  4   1  8     Right arithmetic shift  x   y  Left to right  8   1  4     Right logical shift  x   y  Left to right  -8   1  2147483644    and  Logical and  x and y  Left to right  true and false  false    not  Logical not  not y  Right to left  not true  false    or  Logical or  x or y  Left to right  true or false  true    xor  Logical xor  x xor y  Left to right  true xor true  false    =  Assignment  x = y  Right to left  a = 5  5    ?   :  Conditional expression  x ? y : z  Right to left  15   100 ? 1 : -1  -1    :  Range  x : y  Right to left  1:4  [1,2,3,4]    to ,  in  Unit conversion  x to y  Left to right  2 inch to cm  5.08 cm    ==  Equal  x == y  Left to right  2 == 4 - 2  true    !=  Unequal  x != y  Left to right  2 != 3  true     Smaller  x   y  Left to right  2   3  true     Larger  x   y  Left to right  2   3  false    =  Smallereq  x  = y  Left to right  4  = 3  false    =  Largereq  x  = y  Left to right  2 + 4  = 6  true     Since in mathlion every variable is an array the operators  * , / , ^  are converted in background to  .* , ./ , .^  to allow for a more intuitive writing of the equations.", 
            "title": "Operators"
        }, 
        {
            "location": "/operators/#precedence", 
            "text": "The operators have the following precedence, from highest to lowest:     Operators  Description      (...) [...] {...}  Grouping Matrix Object    x(...) x[...] obj.prop :  Function call Matrix index Property accessor Key/value separator    '  Matrix transpose    !  Factorial    ^ ,  .^  Exponentiation    + ,  - ,  ~ ,  not  Unary plus, unary minus, bitwise not, logical not    x unit  Unit    * ,  / ,  .* ,  ./ ,  % ,  mod  Multiply, divide, modulus, implicit multiply    + ,  -  Add, subtract    :  Range    to ,  in  Unit conversion    ,  ,   Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift    == ,  != ,  ,  ,  = ,  =  Relational     Bitwise and    ^  Bitwise xor     Bitwise or    and  Logical and    xor  Logical xor    or  Logical or    ? ,  :  Conditional expression    =  Assignment    ,  Parameter and column separator    ;  Row separator    \\n ,  ;  Statement separators", 
            "title": "Precedence"
        }, 
        {
            "location": "/operators/#functions", 
            "text": "Functions are called by entering their name, followed by zero or more\narguments enclosed by parentheses.   ('sqrt(25)');          // 5\n('log(1000, 3 + 7)');  // 4\n('sin(pi / 4)');       // 0.7071067811865475  New functions can be defined using the  function  keyword. Functions can be\ndefined with multiple variables. Function assignments are limited: they can\nonly be defined on a single line.  ('f(x) = x ^ 2 - 5');\n('f(2)');    // -1\n('f(3)');    // 4\n\n('g(x, y) = x ^ y');\n('g(2, 3)'); // 8", 
            "title": "Functions"
        }, 
        {
            "location": "/operators/#constants-and-variables", 
            "text": "Mathlion has a number of built-in constants such as  pi  and  e .  // use constants\n('pi');                // 3.141592653589793\n('e ^ 2');             // 7.3890560989306495\n('log(e)');            // 1\n('e ^ (pi * i) + 1');  // ~0 (Euler)  Variables can be defined using the assignment operator  = , and can be used\nlike constants.  // define variables\n('a = 3.4');     // 3.4\n('b = 5 / 2');   // 2.5\n\n// use variables\n('a * b');       // 8.5", 
            "title": "Constants and variables"
        }, 
        {
            "location": "/operators/#data-types", 
            "text": "The expression parser supports booleans, numbers, complex numbers, units,\nstrings, matrices, and objects.", 
            "title": "Data types"
        }, 
        {
            "location": "/operators/#booleans", 
            "text": "Booleans  true  and  false  can be used in expressions.  // use booleans\n('true');              // true\n('false');             // false\n('(2 == 3) == false'); // true  Booleans can be converted to numbers and strings and vice versa using the\nfunctions  number  and  boolean , and  string .  // convert booleans\n('number(true)');      // 1\n('string(false)');     //  false \n('boolean(1)');        // true\n('boolean( false )');  // false", 
            "title": "Booleans"
        }, 
        {
            "location": "/operators/#numbers", 
            "text": "The most important and basic data type in Mathlion are numbers. Numbers use a\npoint as decimal mark. Numbers can be entered with exponential notation.\nExamples:  // numbers in Mathlion\n('2');       // 2\n('3.14');    // 3.14\n('1.4e3');   // 1400\n('22e-3');   // 0.022  A number can be converted to a string and vice versa using the functions number  and  string .  // convert a string into a number\n('number( 2.3 )');   // 2.3\n('string(2.3)');     //  2.3   Mathlion uses regular JavaScript numbers, which are floating points with a\nlimited precision and limited range. The limitations are described in detail\non the page  Numbers .  ('1e-325');  // 0\n('1e309');   // Infinity\n('-1e309');  // -Infinity  When doing calculations with floats, one can very easily get round-off errors:  // round-off error due to limited floating point precision\n('0.1 + 0.2'); // 0.30000000000000004  When outputting results, the function  math.format  can be used to hide\nthese round-off errors when outputting results for the user:  var ans = ('0.1 + 0.2');   //  0.30000000000000004\nmath.format(ans, {precision: 14});  //  0.3", 
            "title": "Numbers"
        }, 
        {
            "location": "/operators/#bignumbers", 
            "text": "Mathlion supports BigNumbers for calculations with an arbitrary precision.  BigNumbers are slower but have a higher precision. Calculations with big\nnumbers are supported only by arithmetic functions.  BigNumbers can be created using the  bignumber  function:  ('bignumber(0.1) + bignumber(0.2)'); // BigNumber, 0.3  The default number type of the expression parser can be changed at instantiation\nof Mathlion. The expression parser parses numbers as BigNumber by default:  // Configure the type of number: 'number' (default), 'BigNumber', or 'Fraction'\nmath.config({number: 'BigNumber'});\n\n// all numbers are parsed as BigNumber\n('0.1 + 0.2'); // BigNumber, 0.3  BigNumbers can be converted to numbers and vice versa using the functions number  and  bignumber . When converting a BigNumber to a Number, the high\nprecision of the BigNumber will be lost. When a BigNumber is too large to be represented\nas Number, it will be initialized as  Infinity .", 
            "title": "BigNumbers"
        }, 
        {
            "location": "/operators/#complex-numbers", 
            "text": "Complex numbers can be created using the imaginary unit  i , which is defined\nas  i^2 = -1 . Complex numbers have a real and complex part, which can be\nretrieved using the functions  re  and  im .  var parser = math.parser();\n\n// create complex numbers\n('a = 2 + 3i');  // Complex, 2 + 3i\n('b = 4 - i');   // Complex, 4 - i\n\n// get real and imaginary part of a complex number\n('re(a)');       // Number,  2\n('im(a)');       // Number,  3\n\n// calculations with complex numbers\n('a + b');       // Complex, 6 + 2i\n('a * b');       // Complex, 11 + 10i\n('i * i');       // Number,  -1\n('sqrt(-4)');    // Complex, 2i  Mathlion does not automatically convert complex numbers with an imaginary part\nof zero to numbers. They can be converted to a number using the function number .  // convert a complex number to a number\nvar parser = math.parser();\n('a = 2 + 3i');  // Complex, 2 + 3i\n('b = a - 3i');  // Complex, 2 + 0i\n('number(b)');   // Number,  2\n('number(a)');   // Error: 2 + i is no valid number", 
            "title": "Complex numbers"
        }, 
        {
            "location": "/operators/#units", 
            "text": "Mathlion supports units. Units can be used in the arithmetic operations\nadd, subtract, multiply, divide, and exponentiation.\nUnits can also be converted from one to another.\nAn overview of all available units can be found on the page Units .  Units can be converted using the operator  to  or  in .  // create a unit\n('5.4 kg');                    // Unit, 5.4 kg\n\n// convert a unit\n('2 inch to cm');              // Unit, 5.08 cm\n('20 celsius in fahrenheit');  // Unit, ~68 fahrenheit\n('90 km/h to m/s');         // Unit, 25 m / s\n\n// convert a unit to a number\n// A second parameter with the unit for the exported number must be provided\n('number(5 cm, mm)');          // Number, 50\n\n// calculations with units\n('0.5kg + 33g');               // Unit, 0.533 kg\n('3 inch + 2 cm');             // Unit, 3.7874 inch\n('3 inch + 2 cm');             // Unit, 3.7874 inch\n('12 seconds * 2');            // Unit, 24 seconds\n('sin(45 deg)');               // Number, 0.7071067811865475\n('9.81 m/s^2 * 5 s to mi/h')   // Unit, 109.72172512527 mi / h", 
            "title": "Units"
        }, 
        {
            "location": "/operators/#strings", 
            "text": "Strings are enclosed by double quotes \". Strings can be concatenated using the\nfunction  concat  (not by adding them using  +  like in JavaScript). Parts of\na string can be retrieved or replaced by using indexes. Strings can be converted\nto a number using function  number , and numbers can be converted to a string\nusing function  string .  // create a string\n(' hello ');                       // String,  hello \n\n// string manipulation\n('a = concat( hello ,   world )'); // String,  hello world \n('size(a)');                       // Number, 11\n('a[1:5]');                        // String,  hello \n('a[1] =  H ');                    // String,  Hello \n('a[7:12] =  there! ');            // String,  Hello there! \n\n// string conversion\n('number( 300 )');                 // Number, 300\n('string(300)');                   // String,  300   Strings can be used in the  eval  function, to parse expressions inside\nthe expression parser:  ('eval( 2 + 3 )'); // 5", 
            "title": "Strings"
        }, 
        {
            "location": "/operators/#matrices", 
            "text": "Matrices can be created by entering a series of values between square brackets,\nelements are separated by a comma  , .\nA matrix like  [1, 2, 3]  will create a vector, a 1-dimensional matrix with\nsize  [3] . To create a multi-dimensional matrix, matrices can be nested into\neach other. For easier creation of two-dimensional matrices, a semicolon  ; \ncan be used to separate rows in a matrix.  // create a matrix\n('[1, 2, 3]');                               // Matrix, size [3]\n('[[1, 2, 3], [4, 5, 6]]');                  // Matrix, size [2, 3]\n('[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]');    // Matrix, size [2, 2, 2]\n\n// create a two dimensional matrix\n('[1, 2, 3; 4, 5, 6]');                      // Matrix, size [2, 3]  Another way to create filled matrices is using the functions  zeros ,  ones , eye , and  range .  // initialize a matrix with ones or zeros\n('zeros(3, 2)');     // Matrix, [[0, 0], [0, 0], [0, 0]],  size [3, 2]\n('ones(3)');         // Matrix, [1, 1, 1],                 size [3]\n('5 * ones(2, 2)');  // Matrix, [[5, 5], [5, 5]],          size [2, 2]\n\n// create an identity matrix\n('eye(2)');          // Matrix, [[1, 0], [0, 1]],          size [2, 2]\n\n// create a range\n('1:4');             // Matrix, [1, 2, 3, 4],              size [4]\n('0:2:10');          // Matrix, [0, 2, 4, 6, 8, 10],       size [6]  A subset can be retrieved from a matrix using indexes and a subset of a matrix\ncan be replaced by using indexes. Indexes are enclosed in square brackets, and\ncontain a number or a range for each of the matrix dimensions. A range can have\nits start and/or end undefined. When the start is undefined, the range will start\nat 1, when the end is undefined, the range will end at the end of the matrix.\nThere is a context variable  end  available as well to denote the end of the\nmatrix.  // create matrices\n('a = [1, 2; 3, 4]');      // Matrix, [[1, 2], [3, 4]]\n('b = zeros(2, 2)');       // Matrix, [[0, 0], [0, 0]]\n('c = 5:9');               // Matrix, [5, 6, 7, 8, 9]\n\n// replace a subset in a matrix\n('b[1, 1:2] = [5, 6]');    // Matrix, [[5, 6], [0, 0]]\n('b[2, :] = [7, 8]');      // Matrix, [[5, 6], [7, 8]]\n\n// perform a matrix calculation\n('d = a * b');             // Matrix, [[19, 22], [43, 50]]\n\n// retrieve a subset of a matrix\n('d[2, 1]');               // 43\n('d[2, 1:end]');           // Matrix, [[43, 50]]\n('c[end - 1 : -1 : 2]');   // Matrix, [8, 7, 6]", 
            "title": "Matrices"
        }, 
        {
            "location": "/operators/#objects", 
            "text": "Objects in Mathlion work the same as in languages like JavaScript and Python.\nAn object is enclosed by square brackets  { ,  } , and contains a set of \ncomma separated key/value pairs. Keys and values are separated by a colon  : .\nKeys can be a symbol like  prop  or a string like  \"prop\" .  ('{a: 2 + 1, b: 4}');        // {a: 3, b: 4}\n('{ a : 2 + 1,  b : 4}');    // {a: 3, b: 4}  Objects can contain objects:  ('{a: 2, b: {c: 3, d: 4}}'); // {a: 2, b: {c: 3, d: 4}}  Object properties can be retrieved or replaced using dot notation or bracket \nnotation. Unlike JavaScript, when setting a property value, the whole object\nis returned, not the property value  var scope = {\n  obj: {\n    prop: 42\n  }\n};\n\n// retrieve properties\n('obj.prop', scope);         // 42\n('obj[ prop ]', scope);      // 42\n\n// set properties (returns the whole object, not the property value!)\n('obj.prop = 43', scope);    // {prop: 43}\n('obj[ prop ] = 43', scope); // {prop: 43}\nscope.obj;                            // {prop: 43}", 
            "title": "Objects"
        }, 
        {
            "location": "/operators/#multi-line-expressions", 
            "text": "An expression can contain multiple lines, and expressions can be spread over\nmultiple lines. Lines can be separated by a newline character  \\n  or by a\nsemicolon  ; . Output of statements followed by a semicolon will be hidden from\nthe output, and empty lines are ignored. The output is returned as a  ResultSet ,\nwith an entry for every visible statement.  // a multi-line expression\n('1 * 3 \\n 2 * 3 \\n 3 * 3');   // ResultSet, [3, 6, 9]\n\n// semicolon statements are hidden from the output\n('a=3; b=4; a + b \\n a * b');  // ResultSet, [7, 12]\n\n// single expression spread over multiple lines\n('a = 2 +\\n  3');              // 5\n('[\\n  1, 2;\\n  3, 4\\n]');     // Matrix, [[1, 2], [3, 4]]  The results can be read from a  ResultSet  via the property  ResultSet.entries \nwhich is an  Array , or by calling  ResultSet.valueOf() , which returns the\narray with results.", 
            "title": "Multi-line expressions"
        }, 
        {
            "location": "/operators/#implicit-multiplication", 
            "text": "The expression parser supports implicit multiplication. Implicit multiplication\nhas the same precedence as explicit multiplications and divisions, so  3/4 mm \nis evaluated as  (3 / 4) * mm .  Parentheses are parsed as a function call when there is a symbol or accessor on\nthe left hand side, like  sqrt(4)  or  obj.method(4) . In other cases the\nparentheses are interpreted as an implicit multiplication.  Implicit multiplication can be tricky as there is ambiguity on how an expression\nis evaluated. Use it carefully.  Here some examples:     Expression  Evaluated as  Result      (1 + 3) pi  (1 + 3) * pi  12.566370614359172    (4 - 1) 2  (4 - 1) * 2  6    3 / 4 mm  (3 / 4) * mm  0.75 mm    2 + 3 i  2 + (3 * i)  2 + 3i    (1 + 2) (4 - 2)  (1 + 2) * (4 - 2)  6    sqrt(4) (1 + 2)  sqrt(4) * (1 + 2)  6", 
            "title": "Implicit multiplication"
        }, 
        {
            "location": "/operators/#comments", 
            "text": "Comments can be added to explain or describe calculations in the text. A comment\nstarts with a sharp sign character  # , and ends at the end of the line. A line\ncan contain a comment only, or can contain an expression followed by a comment.  var parser = math.parser();\n\n('# define some variables');\n('width = 3');                             // 3\n('height = 4');                            // 4\n('width * height   # calculate the area'); // 12", 
            "title": "Comments"
        }, 
        {
            "location": "/functions/", 
            "text": "Supported functions of .math()\n\n\nConstruction functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbignumber(x)\n\n\nCreate a BigNumber, which can store numbers with arbitrary precision.\n\n\n\n\n\n\nboolean(x)\n\n\nCreate a boolean or convert a string or number to a boolean.\n\n\n\n\n\n\nchain(value)\n\n\nWrap any value in a chain, allowing to perform chained operations on the value.\n\n\n\n\n\n\ncomplex(re,\nim)\n\n\nCreate a complex value or convert a value to a complex value.\n\n\n\n\n\n\ncreateUnit(units)\n\n\nCreate a user-defined unit and register it with the Unit type.\n\n\n\n\n\n\nfraction(numerator,\ndenominator)\n\n\nCreate a fraction convert a value to a fraction.\n\n\n\n\n\n\nindex(range1,\nrange2,\n...)\n\n\nCreate an index.\n\n\n\n\n\n\nmatrix(x)\n\n\nCreate a Matrix.\n\n\n\n\n\n\nnumber(value)\n\n\nCreate a number or convert a string, boolean, or unit to a number.\n\n\n\n\n\n\nsparse(x)\n\n\nCreate a Sparse Matrix.\n\n\n\n\n\n\nsplitUnit(unit,\nparts)\n\n\nReturns an array of units whose sum is equal to this unit.\n\n\n\n\n\n\nstring(value)\n\n\nCreate a string or convert any object into a string.\n\n\n\n\n\n\nunit(x)\n\n\nCreate a unit.\n\n\n\n\n\n\n\n\nAlgebra functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlsolve(L,\nb)\n\n\nSolves the linear equation system by forwards substitution.\n\n\n\n\n\n\nlup(A)\n\n\nCalculate the Matrix LU decomposition with partial pivoting.\n\n\n\n\n\n\nlusolve(A,\nb)\n\n\nSolves the linear system \nA * x = b\n where \nA\n is an [n x n] matrix and \nb\n is a [n] column vector.\n\n\n\n\n\n\nslu(A,\norder,\nthreshold)\n\n\nCalculate the Sparse Matrix LU decomposition with full pivoting.\n\n\n\n\n\n\nusolve(U,\nb)\n\n\nSolves the linear equation system by backward substitution.\n\n\n\n\n\n\n\n\nArithmetic functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nabs(x)\n\n\nCalculate the absolute value of a number.\n\n\n\n\n\n\nadd(x,\ny)\n\n\nAdd two values, \nx + y\n.\n\n\n\n\n\n\ncbrt(x\n[,\nallRoots])\n\n\nCalculate the cubic root of a value.\n\n\n\n\n\n\nceil(x)\n\n\nRound a value towards plus infinity If \nx\n is complex, both real and imaginary part are rounded towards plus infinity.\n\n\n\n\n\n\ncube(x)\n\n\nCompute the cube of a value, \nx * x * x\n.\n\n\n\n\n\n\ndivide(x,\ny)\n\n\nDivide two values, \nx / y\n.\n\n\n\n\n\n\ndotDivide(x,\ny)\n\n\nDivide two matrices element wise.\n\n\n\n\n\n\ndotMultiply(x,\ny)\n\n\nMultiply two matrices element wise.\n\n\n\n\n\n\ndotPow(x,\ny)\n\n\nCalculates the power of x to y element wise.\n\n\n\n\n\n\nexp(x)\n\n\nCalculate the exponent of a value.\n\n\n\n\n\n\nfix(x)\n\n\nRound a value towards zero.\n\n\n\n\n\n\nfloor(x)\n\n\nRound a value towards minus infinity.\n\n\n\n\n\n\ngcd(a,\nb)\n\n\nCalculate the greatest common divisor for two or more values or arrays.\n\n\n\n\n\n\nhypot(a,\nb,\n...)\n\n\nCalculate the hypotenusa of a list with values.\n\n\n\n\n\n\nlcm(a,\nb)\n\n\nCalculate the least common multiple for two or more values or arrays.\n\n\n\n\n\n\nlog(x\n[,\nbase])\n\n\nCalculate the logarithm of a value.\n\n\n\n\n\n\nlog10(x)\n\n\nCalculate the 10-base logarithm of a value.\n\n\n\n\n\n\nmod(x,\ny)\n\n\nCalculates the modulus, the remainder of an integer division.\n\n\n\n\n\n\nmultiply(x,\ny)\n\n\nMultiply two values, \nx * y\n.\n\n\n\n\n\n\nnorm(x\n[,\np])\n\n\nCalculate the norm of a number, vector or matrix.\n\n\n\n\n\n\nnthRoot(a)\n\n\nCalculate the nth root of a value.\n\n\n\n\n\n\npow(x,\ny)\n\n\nCalculates the power of x to y, \nx ^ y\n.\n\n\n\n\n\n\nround(x\n[,\nn])\n\n\nRound a value towards the nearest integer.\n\n\n\n\n\n\nsign(x)\n\n\nCompute the sign of a value.\n\n\n\n\n\n\nsqrt(x)\n\n\nCalculate the square root of a value.\n\n\n\n\n\n\nsquare(x)\n\n\nCompute the square of a value, \nx * x\n.\n\n\n\n\n\n\nsubtract(x,\ny)\n\n\nSubtract two values, \nx - y\n.\n\n\n\n\n\n\nunaryMinus(x)\n\n\nInverse the sign of a value, apply a unary minus operation.\n\n\n\n\n\n\nunaryPlus(x)\n\n\nUnary plus operation.\n\n\n\n\n\n\nxgcd(a,\nb)\n\n\nCalculate the extended greatest common divisor for two values.\n\n\n\n\n\n\n\n\nBitwise functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitAnd(x,\ny)\n\n\nBitwise AND two values, \nx \n y\n.\n\n\n\n\n\n\nbitNot(x)\n\n\nBitwise NOT value, \n~x\n.\n\n\n\n\n\n\nbitOr(x,\ny)\n\n\nBitwise OR two values, \nx | y\n.\n\n\n\n\n\n\nbitXor(x,\ny)\n\n\nBitwise XOR two values, \nx ^ y\n.\n\n\n\n\n\n\nleftShift(x,\ny)\n\n\nBitwise left logical shift of a value x by y number of bits, \nx \n y\n.\n\n\n\n\n\n\nrightArithShift(x,\ny)\n\n\nBitwise right arithmetic shift of a value x by y number of bits, \nx \n y\n.\n\n\n\n\n\n\nrightLogShift(x,\ny)\n\n\nBitwise right logical shift of value x by y number of bits, \nx \n y\n.\n\n\n\n\n\n\n\n\nCombinatorics functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbellNumbers(n)\n\n\nThe Bell Numbers count the number of partitions of a set.\n\n\n\n\n\n\ncatalan(n)\n\n\nThe Catalan Numbers enumerate combinatorial structures of many different types.\n\n\n\n\n\n\ncomposition(n,\nk)\n\n\nThe composition counts of n into k parts.\n\n\n\n\n\n\nstirlingS2(n,\nk)\n\n\nThe Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets.\n\n\n\n\n\n\n\n\nComplex functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg(x)\n\n\nCompute the argument of a complex value.\n\n\n\n\n\n\nconj(x)\n\n\nCompute the complex conjugate of a complex value.\n\n\n\n\n\n\nim(x)\n\n\nGet the imaginary part of a complex number.\n\n\n\n\n\n\nre(x)\n\n\nGet the real part of a complex number.\n\n\n\n\n\n\n\n\nGeometry functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[distance([x1,\ny1],\n[x2,\ny2])](functions/distance.md)\n\n\nCalculates:    The eucledian distance between two points in 2 and 3 dimensional spaces.\n\n\n\n\n\n\nintersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n\n\nCalculates the point of intersection of two lines in two or three dimensions and of a line and a plane in three dimensions.\n\n\n\n\n\n\n\n\nLogical functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nand(x,\ny)\n\n\nLogical \nand\n.\n\n\n\n\n\n\nnot(x)\n\n\nLogical \nnot\n.\n\n\n\n\n\n\nor(x,\ny)\n\n\nLogical \nor\n.\n\n\n\n\n\n\nxor(x,\ny)\n\n\nLogical \nxor\n.\n\n\n\n\n\n\n\n\nMatrix functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconcat(a,\nb,\nc,\n...\n[,\ndim])\n\n\nConcatenate two or more matrices.\n\n\n\n\n\n\ncross(x,\ny)\n\n\nCalculate the cross product for two vectors in three dimensional space.\n\n\n\n\n\n\ndet(x)\n\n\nCalculate the determinant of a matrix.\n\n\n\n\n\n\ndiag(X)\n\n\nCreate a diagonal matrix or retrieve the diagonal of a matrix  When \nx\n is a vector, a matrix with vector \nx\n on the diagonal will be returned.\n\n\n\n\n\n\ndot(x,\ny)\n\n\nCalculate the dot product of two vectors.\n\n\n\n\n\n\neye(n)\n\n\nCreate a 2-dimensional identity matrix with size m x n or n x n.\n\n\n\n\n\n\nfilter(x,\ntest)\n\n\nFilter the items in an array or one dimensional matrix.\n\n\n\n\n\n\nflatten(x)\n\n\nFlatten a multi dimensional matrix into a single dimensional matrix.\n\n\n\n\n\n\nforEach(x,\ncallback)\n\n\nIterate over all elements of a matrix/array, and executes the given callback function.\n\n\n\n\n\n\ninv(x)\n\n\nCalculate the inverse of a square matrix.\n\n\n\n\n\n\nmap(x,\ncallback)\n\n\nCreate a new matrix or array with the results of the callback function executed on each entry of the matrix/array.\n\n\n\n\n\n\nones(m,\nn,\np,\n...)\n\n\nCreate a matrix filled with ones.\n\n\n\n\n\n\npartitionSelect(x,\nk)\n\n\nPartition-based selection of an array or 1D matrix.\n\n\n\n\n\n\nrange(start,\nend\n[,\nstep])\n\n\nCreate an array from a range.\n\n\n\n\n\n\nresize(x,\nsize\n[,\ndefaultValue])\n\n\nResize a matrix.\n\n\n\n\n\n\nsize(x)\n\n\nCalculate the size of a matrix or scalar.\n\n\n\n\n\n\nsort(x)\n\n\nSort the items in a matrix.\n\n\n\n\n\n\nsqueeze(x)\n\n\nSqueeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\n\n\n\n\n\nsubset(x,\nindex\n[,\nreplacement])\n\n\nGet or set a subset of a matrix or string.\n\n\n\n\n\n\ntrace(x)\n\n\nCalculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.\n\n\n\n\n\n\ntranspose(x)\n\n\nTranspose a matrix.\n\n\n\n\n\n\nzeros(m,\nn,\np,\n...)\n\n\nCreate a matrix filled with zeros.\n\n\n\n\n\n\n\n\nProbability functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncombinations(n,\nk)\n\n\nCompute the number of ways of picking \nk\n unordered outcomes from \nn\n possibilities.\n\n\n\n\n\n\nfactorial(n)\n\n\nCompute the factorial of a value  Factorial only supports an integer value as argument.\n\n\n\n\n\n\ngamma(n)\n\n\nCompute the gamma function of a value using Lanczos approximation for small values, and an extended Stirling approximation for large values.\n\n\n\n\n\n\nkldivergence(x,\ny)\n\n\nCalculate the Kullback-Leibler (KL) divergence  between two distributions.\n\n\n\n\n\n\nmultinomial(a)\n\n\nMultinomial Coefficients compute the number of ways of picking a1, a2, .\n\n\n\n\n\n\npermutations(n\n[,\nk])\n\n\nCompute the number of ways of obtaining an ordered subset of \nk\n elements from a set of \nn\n elements.\n\n\n\n\n\n\npickRandom(array)\n\n\nRandom pick a value from a one dimensional array.\n\n\n\n\n\n\nrandom([min,\nmax])\n\n\nReturn a random number larger or equal to \nmin\n and smaller than \nmax\n using a uniform distribution.\n\n\n\n\n\n\nrandomInt([min,\nmax])\n\n\nReturn a random integer number larger or equal to \nmin\n and smaller than \nmax\n using a uniform distribution.\n\n\n\n\n\n\n\n\nRelational functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncompare(x,\ny)\n\n\nCompare two values.\n\n\n\n\n\n\ndeepEqual(x,\ny)\n\n\nTest element wise whether two matrices are equal.\n\n\n\n\n\n\nequal(x,\ny)\n\n\nTest whether two values are equal.\n\n\n\n\n\n\nlarger(x,\ny)\n\n\nTest whether value x is larger than y.\n\n\n\n\n\n\nlargerEq(x,\ny)\n\n\nTest whether value x is larger or equal to y.\n\n\n\n\n\n\nsmaller(x,\ny)\n\n\nTest whether value x is smaller than y.\n\n\n\n\n\n\nsmallerEq(x,\ny)\n\n\nTest whether value x is smaller or equal to y.\n\n\n\n\n\n\nunequal(x,\ny)\n\n\nTest whether two values are unequal.\n\n\n\n\n\n\n\n\nStatistics functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmax(a,\nb,\nc,\n...)\n\n\nCompute the maximum value of a matrix or a  list with values.\n\n\n\n\n\n\nmean(a,\nb,\nc,\n...)\n\n\nCompute the mean value of matrix or a list with values.\n\n\n\n\n\n\nmedian(a,\nb,\nc,\n...)\n\n\nCompute the median of a matrix or a list with values.\n\n\n\n\n\n\nmin(a,\nb,\nc,\n...)\n\n\nCompute the maximum value of a matrix or a  list of values.\n\n\n\n\n\n\nmode(a,\nb,\nc,\n...)\n\n\nComputes the mode of a set of numbers or a list with values(numbers or characters).\n\n\n\n\n\n\nprod(a,\nb,\nc,\n...)\n\n\nCompute the product of a matrix or a list with values.\n\n\n\n\n\n\nquantileSeq(A,\nprob[,\nsorted])\n\n\nCompute the prob order quantile of a matrix or a list with values.\n\n\n\n\n\n\nstd(a,\nb,\nc,\n...)\n\n\nCompute the standard deviation of a matrix or a  list with values.\n\n\n\n\n\n\nsum(a,\nb,\nc,\n...)\n\n\nCompute the sum of a matrix or a list with values.\n\n\n\n\n\n\nvar(a,\nb,\nc,\n...)\n\n\nCompute the variance of a matrix or a  list with values.\n\n\n\n\n\n\n\n\nString functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nformat(value\n[,\nprecision])\n\n\nFormat a value of any type into a string.\n\n\n\n\n\n\nprint(template, values [, precision])\n\n\nInterpolate values into a string template.\n\n\n\n\n\n\n\n\nTrigonometry functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nacos(x)\n\n\nCalculate the inverse cosine of a value.\n\n\n\n\n\n\nacosh(x)\n\n\nCalculate the hyperbolic arccos of a value, defined as \nacosh(x) = ln(sqrt(x^2 - 1) + x)\n.\n\n\n\n\n\n\nacot(x)\n\n\nCalculate the inverse cotangent of a value, defined as \nacot(x) = atan(1/x)\n.\n\n\n\n\n\n\nacoth(x)\n\n\nCalculate the hyperbolic arccotangent of a value, defined as \nacoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2\n.\n\n\n\n\n\n\nacsc(x)\n\n\nCalculate the inverse cosecant of a value, defined as \nacsc(x) = asin(1/x)\n.\n\n\n\n\n\n\nacsch(x)\n\n\nCalculate the hyperbolic arccosecant of a value, defined as \nacsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))\n.\n\n\n\n\n\n\nasec(x)\n\n\nCalculate the inverse secant of a value.\n\n\n\n\n\n\nasech(x)\n\n\nCalculate the hyperbolic arcsecant of a value, defined as \nasech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)\n.\n\n\n\n\n\n\nasin(x)\n\n\nCalculate the inverse sine of a value.\n\n\n\n\n\n\nasinh(x)\n\n\nCalculate the hyperbolic arcsine of a value, defined as \nasinh(x) = ln(x + sqrt(x^2 + 1))\n.\n\n\n\n\n\n\natan(x)\n\n\nCalculate the inverse tangent of a value.\n\n\n\n\n\n\natan2(y,\nx)\n\n\nCalculate the inverse tangent function with two arguments, y/x.\n\n\n\n\n\n\natanh(x)\n\n\nCalculate the hyperbolic arctangent of a value, defined as \natanh(x) = ln((1 + x)/(1 - x)) / 2\n.\n\n\n\n\n\n\ncos(x)\n\n\nCalculate the cosine of a value.\n\n\n\n\n\n\ncosh(x)\n\n\nCalculate the hyperbolic cosine of a value, defined as \ncosh(x) = 1/2 * (exp(x) + exp(-x))\n.\n\n\n\n\n\n\ncot(x)\n\n\nCalculate the cotangent of a value.\n\n\n\n\n\n\ncoth(x)\n\n\nCalculate the hyperbolic cotangent of a value, defined as \ncoth(x) = 1 / tanh(x)\n.\n\n\n\n\n\n\ncsc(x)\n\n\nCalculate the cosecant of a value, defined as \ncsc(x) = 1/sin(x)\n.\n\n\n\n\n\n\ncsch(x)\n\n\nCalculate the hyperbolic cosecant of a value, defined as \ncsch(x) = 1 / sinh(x)\n.\n\n\n\n\n\n\nsec(x)\n\n\nCalculate the secant of a value, defined as \nsec(x) = 1/cos(x)\n.\n\n\n\n\n\n\nsech(x)\n\n\nCalculate the hyperbolic secant of a value, defined as \nsech(x) = 1 / cosh(x)\n.\n\n\n\n\n\n\nsin(x)\n\n\nCalculate the sine of a value.\n\n\n\n\n\n\nsinh(x)\n\n\nCalculate the hyperbolic sine of a value, defined as \nsinh(x) = 1/2 * (exp(x) - exp(-x))\n.\n\n\n\n\n\n\ntan(x)\n\n\nCalculate the tangent of a value.\n\n\n\n\n\n\ntanh(x)\n\n\nCalculate the hyperbolic tangent of a value, defined as \ntanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)\n.\n\n\n\n\n\n\n\n\nUnit functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nto(x,\nunit)\n\n\nChange the unit of a value.\n\n\n\n\n\n\n\n\nUtils functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nisInteger(x)\n\n\nTest whether a value is an integer number.\n\n\n\n\n\n\nisNaN(x)\n\n\nTest whether a value is NaN (not a number).\n\n\n\n\n\n\nisNegative(x)\n\n\nTest whether a value is negative: smaller than zero.\n\n\n\n\n\n\nisNumeric(x)\n\n\nTest whether a value is an numeric value.\n\n\n\n\n\n\nisPositive(x)\n\n\nTest whether a value is positive: larger than zero.\n\n\n\n\n\n\nisPrime(x)\n\n\nTest whether a value is prime: has no divisors other than itself and one.\n\n\n\n\n\n\nisZero(x)\n\n\nTest whether a value is zero.", 
            "title": "Mathematical Functions"
        }, 
        {
            "location": "/functions/#supported-functions-of-math", 
            "text": "", 
            "title": "Supported functions of .math()"
        }, 
        {
            "location": "/functions/#construction-functions", 
            "text": "Function  Description      bignumber(x)  Create a BigNumber, which can store numbers with arbitrary precision.    boolean(x)  Create a boolean or convert a string or number to a boolean.    chain(value)  Wrap any value in a chain, allowing to perform chained operations on the value.    complex(re, im)  Create a complex value or convert a value to a complex value.    createUnit(units)  Create a user-defined unit and register it with the Unit type.    fraction(numerator, denominator)  Create a fraction convert a value to a fraction.    index(range1, range2, ...)  Create an index.    matrix(x)  Create a Matrix.    number(value)  Create a number or convert a string, boolean, or unit to a number.    sparse(x)  Create a Sparse Matrix.    splitUnit(unit, parts)  Returns an array of units whose sum is equal to this unit.    string(value)  Create a string or convert any object into a string.    unit(x)  Create a unit.", 
            "title": "Construction functions"
        }, 
        {
            "location": "/functions/#algebra-functions", 
            "text": "Function  Description      lsolve(L, b)  Solves the linear equation system by forwards substitution.    lup(A)  Calculate the Matrix LU decomposition with partial pivoting.    lusolve(A, b)  Solves the linear system  A * x = b  where  A  is an [n x n] matrix and  b  is a [n] column vector.    slu(A, order, threshold)  Calculate the Sparse Matrix LU decomposition with full pivoting.    usolve(U, b)  Solves the linear equation system by backward substitution.", 
            "title": "Algebra functions"
        }, 
        {
            "location": "/functions/#arithmetic-functions", 
            "text": "Function  Description      abs(x)  Calculate the absolute value of a number.    add(x, y)  Add two values,  x + y .    cbrt(x [, allRoots])  Calculate the cubic root of a value.    ceil(x)  Round a value towards plus infinity If  x  is complex, both real and imaginary part are rounded towards plus infinity.    cube(x)  Compute the cube of a value,  x * x * x .    divide(x, y)  Divide two values,  x / y .    dotDivide(x, y)  Divide two matrices element wise.    dotMultiply(x, y)  Multiply two matrices element wise.    dotPow(x, y)  Calculates the power of x to y element wise.    exp(x)  Calculate the exponent of a value.    fix(x)  Round a value towards zero.    floor(x)  Round a value towards minus infinity.    gcd(a, b)  Calculate the greatest common divisor for two or more values or arrays.    hypot(a, b, ...)  Calculate the hypotenusa of a list with values.    lcm(a, b)  Calculate the least common multiple for two or more values or arrays.    log(x [, base])  Calculate the logarithm of a value.    log10(x)  Calculate the 10-base logarithm of a value.    mod(x, y)  Calculates the modulus, the remainder of an integer division.    multiply(x, y)  Multiply two values,  x * y .    norm(x [, p])  Calculate the norm of a number, vector or matrix.    nthRoot(a)  Calculate the nth root of a value.    pow(x, y)  Calculates the power of x to y,  x ^ y .    round(x [, n])  Round a value towards the nearest integer.    sign(x)  Compute the sign of a value.    sqrt(x)  Calculate the square root of a value.    square(x)  Compute the square of a value,  x * x .    subtract(x, y)  Subtract two values,  x - y .    unaryMinus(x)  Inverse the sign of a value, apply a unary minus operation.    unaryPlus(x)  Unary plus operation.    xgcd(a, b)  Calculate the extended greatest common divisor for two values.", 
            "title": "Arithmetic functions"
        }, 
        {
            "location": "/functions/#bitwise-functions", 
            "text": "Function  Description      bitAnd(x, y)  Bitwise AND two values,  x   y .    bitNot(x)  Bitwise NOT value,  ~x .    bitOr(x, y)  Bitwise OR two values,  x | y .    bitXor(x, y)  Bitwise XOR two values,  x ^ y .    leftShift(x, y)  Bitwise left logical shift of a value x by y number of bits,  x   y .    rightArithShift(x, y)  Bitwise right arithmetic shift of a value x by y number of bits,  x   y .    rightLogShift(x, y)  Bitwise right logical shift of value x by y number of bits,  x   y .", 
            "title": "Bitwise functions"
        }, 
        {
            "location": "/functions/#combinatorics-functions", 
            "text": "Function  Description      bellNumbers(n)  The Bell Numbers count the number of partitions of a set.    catalan(n)  The Catalan Numbers enumerate combinatorial structures of many different types.    composition(n, k)  The composition counts of n into k parts.    stirlingS2(n, k)  The Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets.", 
            "title": "Combinatorics functions"
        }, 
        {
            "location": "/functions/#complex-functions", 
            "text": "Function  Description      arg(x)  Compute the argument of a complex value.    conj(x)  Compute the complex conjugate of a complex value.    im(x)  Get the imaginary part of a complex number.    re(x)  Get the real part of a complex number.", 
            "title": "Complex functions"
        }, 
        {
            "location": "/functions/#geometry-functions", 
            "text": "Function  Description      [distance([x1, y1], [x2, y2])](functions/distance.md)  Calculates:    The eucledian distance between two points in 2 and 3 dimensional spaces.    intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)  Calculates the point of intersection of two lines in two or three dimensions and of a line and a plane in three dimensions.", 
            "title": "Geometry functions"
        }, 
        {
            "location": "/functions/#logical-functions", 
            "text": "Function  Description      and(x, y)  Logical  and .    not(x)  Logical  not .    or(x, y)  Logical  or .    xor(x, y)  Logical  xor .", 
            "title": "Logical functions"
        }, 
        {
            "location": "/functions/#matrix-functions", 
            "text": "Function  Description      concat(a, b, c, ... [, dim])  Concatenate two or more matrices.    cross(x, y)  Calculate the cross product for two vectors in three dimensional space.    det(x)  Calculate the determinant of a matrix.    diag(X)  Create a diagonal matrix or retrieve the diagonal of a matrix  When  x  is a vector, a matrix with vector  x  on the diagonal will be returned.    dot(x, y)  Calculate the dot product of two vectors.    eye(n)  Create a 2-dimensional identity matrix with size m x n or n x n.    filter(x, test)  Filter the items in an array or one dimensional matrix.    flatten(x)  Flatten a multi dimensional matrix into a single dimensional matrix.    forEach(x, callback)  Iterate over all elements of a matrix/array, and executes the given callback function.    inv(x)  Calculate the inverse of a square matrix.    map(x, callback)  Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.    ones(m, n, p, ...)  Create a matrix filled with ones.    partitionSelect(x, k)  Partition-based selection of an array or 1D matrix.    range(start, end [, step])  Create an array from a range.    resize(x, size [, defaultValue])  Resize a matrix.    size(x)  Calculate the size of a matrix or scalar.    sort(x)  Sort the items in a matrix.    squeeze(x)  Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.    subset(x, index [, replacement])  Get or set a subset of a matrix or string.    trace(x)  Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.    transpose(x)  Transpose a matrix.    zeros(m, n, p, ...)  Create a matrix filled with zeros.", 
            "title": "Matrix functions"
        }, 
        {
            "location": "/functions/#probability-functions", 
            "text": "Function  Description      combinations(n, k)  Compute the number of ways of picking  k  unordered outcomes from  n  possibilities.    factorial(n)  Compute the factorial of a value  Factorial only supports an integer value as argument.    gamma(n)  Compute the gamma function of a value using Lanczos approximation for small values, and an extended Stirling approximation for large values.    kldivergence(x, y)  Calculate the Kullback-Leibler (KL) divergence  between two distributions.    multinomial(a)  Multinomial Coefficients compute the number of ways of picking a1, a2, .    permutations(n [, k])  Compute the number of ways of obtaining an ordered subset of  k  elements from a set of  n  elements.    pickRandom(array)  Random pick a value from a one dimensional array.    random([min, max])  Return a random number larger or equal to  min  and smaller than  max  using a uniform distribution.    randomInt([min, max])  Return a random integer number larger or equal to  min  and smaller than  max  using a uniform distribution.", 
            "title": "Probability functions"
        }, 
        {
            "location": "/functions/#relational-functions", 
            "text": "Function  Description      compare(x, y)  Compare two values.    deepEqual(x, y)  Test element wise whether two matrices are equal.    equal(x, y)  Test whether two values are equal.    larger(x, y)  Test whether value x is larger than y.    largerEq(x, y)  Test whether value x is larger or equal to y.    smaller(x, y)  Test whether value x is smaller than y.    smallerEq(x, y)  Test whether value x is smaller or equal to y.    unequal(x, y)  Test whether two values are unequal.", 
            "title": "Relational functions"
        }, 
        {
            "location": "/functions/#statistics-functions", 
            "text": "Function  Description      max(a, b, c, ...)  Compute the maximum value of a matrix or a  list with values.    mean(a, b, c, ...)  Compute the mean value of matrix or a list with values.    median(a, b, c, ...)  Compute the median of a matrix or a list with values.    min(a, b, c, ...)  Compute the maximum value of a matrix or a  list of values.    mode(a, b, c, ...)  Computes the mode of a set of numbers or a list with values(numbers or characters).    prod(a, b, c, ...)  Compute the product of a matrix or a list with values.    quantileSeq(A, prob[, sorted])  Compute the prob order quantile of a matrix or a list with values.    std(a, b, c, ...)  Compute the standard deviation of a matrix or a  list with values.    sum(a, b, c, ...)  Compute the sum of a matrix or a list with values.    var(a, b, c, ...)  Compute the variance of a matrix or a  list with values.", 
            "title": "Statistics functions"
        }, 
        {
            "location": "/functions/#string-functions", 
            "text": "Function  Description      format(value [, precision])  Format a value of any type into a string.    print(template, values [, precision])  Interpolate values into a string template.", 
            "title": "String functions"
        }, 
        {
            "location": "/functions/#trigonometry-functions", 
            "text": "Function  Description      acos(x)  Calculate the inverse cosine of a value.    acosh(x)  Calculate the hyperbolic arccos of a value, defined as  acosh(x) = ln(sqrt(x^2 - 1) + x) .    acot(x)  Calculate the inverse cotangent of a value, defined as  acot(x) = atan(1/x) .    acoth(x)  Calculate the hyperbolic arccotangent of a value, defined as  acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2 .    acsc(x)  Calculate the inverse cosecant of a value, defined as  acsc(x) = asin(1/x) .    acsch(x)  Calculate the hyperbolic arccosecant of a value, defined as  acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1)) .    asec(x)  Calculate the inverse secant of a value.    asech(x)  Calculate the hyperbolic arcsecant of a value, defined as  asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x) .    asin(x)  Calculate the inverse sine of a value.    asinh(x)  Calculate the hyperbolic arcsine of a value, defined as  asinh(x) = ln(x + sqrt(x^2 + 1)) .    atan(x)  Calculate the inverse tangent of a value.    atan2(y, x)  Calculate the inverse tangent function with two arguments, y/x.    atanh(x)  Calculate the hyperbolic arctangent of a value, defined as  atanh(x) = ln((1 + x)/(1 - x)) / 2 .    cos(x)  Calculate the cosine of a value.    cosh(x)  Calculate the hyperbolic cosine of a value, defined as  cosh(x) = 1/2 * (exp(x) + exp(-x)) .    cot(x)  Calculate the cotangent of a value.    coth(x)  Calculate the hyperbolic cotangent of a value, defined as  coth(x) = 1 / tanh(x) .    csc(x)  Calculate the cosecant of a value, defined as  csc(x) = 1/sin(x) .    csch(x)  Calculate the hyperbolic cosecant of a value, defined as  csch(x) = 1 / sinh(x) .    sec(x)  Calculate the secant of a value, defined as  sec(x) = 1/cos(x) .    sech(x)  Calculate the hyperbolic secant of a value, defined as  sech(x) = 1 / cosh(x) .    sin(x)  Calculate the sine of a value.    sinh(x)  Calculate the hyperbolic sine of a value, defined as  sinh(x) = 1/2 * (exp(x) - exp(-x)) .    tan(x)  Calculate the tangent of a value.    tanh(x)  Calculate the hyperbolic tangent of a value, defined as  tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1) .", 
            "title": "Trigonometry functions"
        }, 
        {
            "location": "/functions/#unit-functions", 
            "text": "Function  Description      to(x, unit)  Change the unit of a value.", 
            "title": "Unit functions"
        }, 
        {
            "location": "/functions/#utils-functions", 
            "text": "Function  Description      isInteger(x)  Test whether a value is an integer number.    isNaN(x)  Test whether a value is NaN (not a number).    isNegative(x)  Test whether a value is negative: smaller than zero.    isNumeric(x)  Test whether a value is an numeric value.    isPositive(x)  Test whether a value is positive: larger than zero.    isPrime(x)  Test whether a value is prime: has no divisors other than itself and one.    isZero(x)  Test whether a value is zero.", 
            "title": "Utils functions"
        }, 
        {
            "location": "/units/", 
            "text": "units\n\n\nIn Mathlion you can assign units to any number of variables. Once you have assigned a unit you must keep working with units on that variables, you cannot go unitless.\n\n\nMathlion automatically keeps track of the units and convert between different ones.\n\n\nExample usage:\n\n\n.math(\n5\n)\n.math(\n5 cm\n)\n.math(\na = (5cm)\n)\n.math(\na\n) // 5cm\n\n//converting is easy\n.math(\na to inch\n) // 1.9685039370078743 inch\n\n//keeps automatically track of composite units\n.math(\n5kg * 2m^2\n) //10 kg m^2\n\n\n// you cannot add a unitless number to a variable with unit\n.math(\na+2\n) //ERROR\n.math(\na+ 2cm\n) //OK\n\n\n\n\nWARNING:\n When using units you should always convert to unit at least one time at the end of the math expression, otherwise mathlion will display mixed units but tell you only about one. It's a bug.\n\n\nUse care when creating a unit with multiple terms in the denominator. Implicit multiplication has the same operator precedence as explicit multiplication and division, which means these three expressions are identical:\n\n\n// These three are identical\nmath(\n8.314 m^3 Pa / mol / K\n) // Unit 8.314 (m^3 Pa) / (mol K)\nmath(\n8.314 (m^3 Pa) / (mol K)\n) // Unit 8.314 (m^3 Pa) / (mol K)\nmath(\n8.314 (m^3 * Pa) / (mol * K)\n) // Unit 8.314 (m^3 Pa) / (mol K)\n\n\n\n\nBut this expression, which omits the second \n/\n between \nmol\n and \nK\n, results in the wrong value:\n\n\n// Missing the second \n/\n between \nmol\n and \nK\n\nincorrect = unit(\n8.314 m^3 Pa / mol K\n) // Unit 8.314 (m^3 Pa K) / mol\n\n\n\n\nCalculations\n\n\nThe operations that support units are \nadd\n, \nsubtract\n, \nmultiply\n, \ndivide\n, \npow\n, \nabs\n, \nsqrt\n, \nsquare\n, \ncube\n, and \nsign\n. Trigonometric functions like \ncos\n are also supported when the argument is an angle.\n\n\nmath(\n45cm\n) // Unit 450 mm\nmath(\n0.1m\n) // Unit 100 mm\nmath(\na+b\n) // Unit 0.65 m\n\nmath(\n45 deg\n) // Unit 45 deg\ncos(c) // Number 0.7071067811865476\n\n// Kinetic energy of average sedan on highway\nmath(\nd = (80 mi/h)\n) // Unit 80 mi/h\nmath(\ne = (2 tonne)\n) // Unit 2 tonne\nmath(\n0.5 * d^2 * e\n) // 1.2790064742399996 MJ\n\n\n\n\nPlease note that in mathlion, differently from the implementation in math.js \nevery variable is an array\n.\n\n\nAll arithmetic operators act on the value of the unit as it is represented in SI units. This may lead to surprising behavior when working with temperature scales like \ncelsius\n (or \ndegC\n) and \nfahrenheit\n (or \ndegF\n). In general you should avoid calculations using \ncelsius\n and \nfahrenheit\n. Rather, use \nkelvin\n (or \nK\n) and \nrankine\n (or \nR\n) instead. This example highlights some problems when using \ncelsius\n and \nfahrenheit\n in calculations:\n\n\nmath(\nT1= (14 degF)\n) // Unit 14 degF (263.15 K)\nmath(\nT_28F=(T1*2)\n) // Unit 487.67 degF (526.3 K), not 28 degF\n\nmath(\nTnegative =-13degF\n) // Unit -13 degF (248.15 K)\nmath(\nTpositive= abs(T1)\n) // Unit -13 degF (248.15 K), not 13 degF\n\nmath(\n5 (degC/hour)\n) // Unit 5 degC/hour\nmath(\n(5 degC)/hour\n) // Unit 278.15 degC/hour\n\n\n\n\nUser-Defined Units\n\n\nYou can add your own units using the \ncreateUnit\n function. The following example defines a new unit \nfurlong\n, then uses the user-defined unit in a calculation:\n\n\n createUnit(\nfurlong\n, \n220 yards\n)\n eval(\n1 mile to furlong\n) // 8 furlong\n\n\n\n\nIf you cannot express the new unit in terms of any existing unit, then the second argument can be omitted. In this case, a new base unit is created:\n\n\n// A \nfoo\n cannot be expressed in terms of any other unit.\n createUnit(\nfoo\n)\n eval(\n8 foo * 4 feet\n) // 32 foo feet\n\n\n\n\nThe second argument to \ncreateUnit\n can also be a configuration object consisting of the following properties:\n\n\n\n\ndefinition\n A \nstring\n or \nUnit\n which defines the user-defined unit in terms of existing built-in or user-defined units. If omitted, a new base unit is created.\n\n\nprefixes\n A \nstring\n indicating which prefixes js should use with the new unit. Possible values are \n\"none\"\n, \n\"short\"\n, \n\"long\"\n, \n\"binary_short\"\n, or \n\"binary_long\"\n. Default is \n\"none\"\n.\n\n\noffset\n A value applied when converting to the unit. This is very helpful for temperature scales that do not share a zero with the absolute temperature scale. For example, if we were defining fahrenheit for the first time, we would use: \ncreateUnit(\"fahrenheit\", {definition: \"0.555556 kelvin\", offset: 459.67})\n\n\naliases\n An array of strings to alias the new unit. Example: \ncreateUnit(\"knot\", {definition: \"0.514444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})\n\n\n\n\nAn optional \noptions\n object can also be supplied as the last argument to \ncreateUnits\n. Currently only the \noverride\n option is supported:\n\n\n// Redefine the mile (would not be the first time in history)\n createUnit(\nmile\n, \n1609.347218694\n, {override: true}})\n\n\n\n\nBase units created without specifying a definition cannot be overridden.\n\n\nReturn Value\n\n\ncreateUnit\n returns the created unit, or, when multiple units are created, the last unit created. Since \ncreateUnit\n is also compatible with the expression parser, this allows you to do things like this:\n\n\n(\n45 mile/hour to createUnit(\nknot\n, \n0.514444m/s\n)\n) // 39.103964668651976 knot", 
            "title": "Units of measurement"
        }, 
        {
            "location": "/units/#units", 
            "text": "In Mathlion you can assign units to any number of variables. Once you have assigned a unit you must keep working with units on that variables, you cannot go unitless.  Mathlion automatically keeps track of the units and convert between different ones.  Example usage:  .math( 5 )\n.math( 5 cm )\n.math( a = (5cm) )\n.math( a ) // 5cm\n\n//converting is easy\n.math( a to inch ) // 1.9685039370078743 inch\n\n//keeps automatically track of composite units\n.math( 5kg * 2m^2 ) //10 kg m^2\n\n\n// you cannot add a unitless number to a variable with unit\n.math( a+2 ) //ERROR\n.math( a+ 2cm ) //OK  WARNING:  When using units you should always convert to unit at least one time at the end of the math expression, otherwise mathlion will display mixed units but tell you only about one. It's a bug.  Use care when creating a unit with multiple terms in the denominator. Implicit multiplication has the same operator precedence as explicit multiplication and division, which means these three expressions are identical:  // These three are identical\nmath( 8.314 m^3 Pa / mol / K ) // Unit 8.314 (m^3 Pa) / (mol K)\nmath( 8.314 (m^3 Pa) / (mol K) ) // Unit 8.314 (m^3 Pa) / (mol K)\nmath( 8.314 (m^3 * Pa) / (mol * K) ) // Unit 8.314 (m^3 Pa) / (mol K)  But this expression, which omits the second  /  between  mol  and  K , results in the wrong value:  // Missing the second  /  between  mol  and  K \nincorrect = unit( 8.314 m^3 Pa / mol K ) // Unit 8.314 (m^3 Pa K) / mol", 
            "title": "units"
        }, 
        {
            "location": "/units/#calculations", 
            "text": "The operations that support units are  add ,  subtract ,  multiply ,  divide ,  pow ,  abs ,  sqrt ,  square ,  cube , and  sign . Trigonometric functions like  cos  are also supported when the argument is an angle.  math( 45cm ) // Unit 450 mm\nmath( 0.1m ) // Unit 100 mm\nmath( a+b ) // Unit 0.65 m\n\nmath( 45 deg ) // Unit 45 deg\ncos(c) // Number 0.7071067811865476\n\n// Kinetic energy of average sedan on highway\nmath( d = (80 mi/h) ) // Unit 80 mi/h\nmath( e = (2 tonne) ) // Unit 2 tonne\nmath( 0.5 * d^2 * e ) // 1.2790064742399996 MJ  Please note that in mathlion, differently from the implementation in math.js  every variable is an array .  All arithmetic operators act on the value of the unit as it is represented in SI units. This may lead to surprising behavior when working with temperature scales like  celsius  (or  degC ) and  fahrenheit  (or  degF ). In general you should avoid calculations using  celsius  and  fahrenheit . Rather, use  kelvin  (or  K ) and  rankine  (or  R ) instead. This example highlights some problems when using  celsius  and  fahrenheit  in calculations:  math( T1= (14 degF) ) // Unit 14 degF (263.15 K)\nmath( T_28F=(T1*2) ) // Unit 487.67 degF (526.3 K), not 28 degF\n\nmath( Tnegative =-13degF ) // Unit -13 degF (248.15 K)\nmath( Tpositive= abs(T1) ) // Unit -13 degF (248.15 K), not 13 degF\n\nmath( 5 (degC/hour) ) // Unit 5 degC/hour\nmath( (5 degC)/hour ) // Unit 278.15 degC/hour", 
            "title": "Calculations"
        }, 
        {
            "location": "/units/#user-defined-units", 
            "text": "You can add your own units using the  createUnit  function. The following example defines a new unit  furlong , then uses the user-defined unit in a calculation:   createUnit( furlong ,  220 yards )\n eval( 1 mile to furlong ) // 8 furlong  If you cannot express the new unit in terms of any existing unit, then the second argument can be omitted. In this case, a new base unit is created:  // A  foo  cannot be expressed in terms of any other unit.\n createUnit( foo )\n eval( 8 foo * 4 feet ) // 32 foo feet  The second argument to  createUnit  can also be a configuration object consisting of the following properties:   definition  A  string  or  Unit  which defines the user-defined unit in terms of existing built-in or user-defined units. If omitted, a new base unit is created.  prefixes  A  string  indicating which prefixes js should use with the new unit. Possible values are  \"none\" ,  \"short\" ,  \"long\" ,  \"binary_short\" , or  \"binary_long\" . Default is  \"none\" .  offset  A value applied when converting to the unit. This is very helpful for temperature scales that do not share a zero with the absolute temperature scale. For example, if we were defining fahrenheit for the first time, we would use:  createUnit(\"fahrenheit\", {definition: \"0.555556 kelvin\", offset: 459.67})  aliases  An array of strings to alias the new unit. Example:  createUnit(\"knot\", {definition: \"0.514444 m/s\", aliases: [\"knots\", \"kt\", \"kts\"]})   An optional  options  object can also be supplied as the last argument to  createUnits . Currently only the  override  option is supported:  // Redefine the mile (would not be the first time in history)\n createUnit( mile ,  1609.347218694 , {override: true}})  Base units created without specifying a definition cannot be overridden.", 
            "title": "User-Defined Units"
        }, 
        {
            "location": "/units/#return-value", 
            "text": "createUnit  returns the created unit, or, when multiple units are created, the last unit created. Since  createUnit  is also compatible with the expression parser, this allows you to do things like this:  ( 45 mile/hour to createUnit( knot ,  0.514444m/s ) ) // 39.103964668651976 knot", 
            "title": "Return Value"
        }, 
        {
            "location": "/functions/abs/", 
            "text": "Function abs\n\n\nCalculate the absolute value of a number. For matrices, the function is\nevaluated element wise.\n\n\nSyntax\n\n\nabs(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nA number or matrix for which to get the absolute value\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nAbsolute value of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nabs(3.5);                // returns number 3.5\nabs(-4.2);               // returns number 4.2\n\nabs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]\n\n\n\n\nSee also\n\n\nsign", 
            "title": "Abs"
        }, 
        {
            "location": "/functions/abs/#function-abs", 
            "text": "Calculate the absolute value of a number. For matrices, the function is\nevaluated element wise.", 
            "title": "Function abs"
        }, 
        {
            "location": "/functions/abs/#syntax", 
            "text": "abs(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/abs/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix   Unit  A number or matrix for which to get the absolute value", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/abs/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix   Unit  Absolute value of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/abs/#examples", 
            "text": "abs(3.5);                // returns number 3.5\nabs(-4.2);               // returns number 4.2\n\nabs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/abs/#see-also", 
            "text": "sign", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acos/", 
            "text": "Function acos\n\n\nCalculate the inverse cosine of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacos(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe arc cosine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacos(0.5);           // returns number 1.0471975511965979\nacos(cos(1.5)); // returns number 1.5\n\nacos(2);             // returns Complex 0 + 1.3169578969248166 i\n\n\n\n\nSee also\n\n\ncos\n,\n\natan\n,\n\nasin", 
            "title": "Acos"
        }, 
        {
            "location": "/functions/acos/#function-acos", 
            "text": "Calculate the inverse cosine of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function acos"
        }, 
        {
            "location": "/functions/acos/#syntax", 
            "text": "acos(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acos/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acos/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  The arc cosine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acos/#examples", 
            "text": "acos(0.5);           // returns number 1.0471975511965979\nacos(cos(1.5)); // returns number 1.5\n\nacos(2);             // returns Complex 0 + 1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acos/#see-also", 
            "text": "cos , atan , asin", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acosh/", 
            "text": "Function acosh\n\n\nCalculate the hyperbolic arccos of a value,\ndefined as \nacosh(x) = ln(sqrt(x^2 - 1) + x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacosh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arccosine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacosh(1.5);       // returns 0.9624236501192069\n\n\n\n\nSee also\n\n\ncosh\n,\n\nasinh\n,\n\natanh", 
            "title": "Acosh"
        }, 
        {
            "location": "/functions/acosh/#function-acosh", 
            "text": "Calculate the hyperbolic arccos of a value,\ndefined as  acosh(x) = ln(sqrt(x^2 - 1) + x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function acosh"
        }, 
        {
            "location": "/functions/acosh/#syntax", 
            "text": "acosh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acosh/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acosh/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arccosine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acosh/#examples", 
            "text": "acosh(1.5);       // returns 0.9624236501192069", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acosh/#see-also", 
            "text": "cosh , asinh , atanh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acot/", 
            "text": "Function acot\n\n\nCalculate the inverse cotangent of a value, defined as \nacot(x) = atan(1/x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacot(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nThe arc cotangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacot(0.5);           // returns number 0.4636476090008061\nacot(cot(1.5)); // returns number 1.5\n\nacot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\n\n\n\nSee also\n\n\ncot\n,\n\natan", 
            "title": "Acot"
        }, 
        {
            "location": "/functions/acot/#function-acot", 
            "text": "Calculate the inverse cotangent of a value, defined as  acot(x) = atan(1/x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function acot"
        }, 
        {
            "location": "/functions/acot/#syntax", 
            "text": "acot(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acot/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acot/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  The arc cotangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acot/#examples", 
            "text": "acot(0.5);           // returns number 0.4636476090008061\nacot(cot(1.5)); // returns number 1.5\n\nacot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acot/#see-also", 
            "text": "cot , atan", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acoth/", 
            "text": "Function acoth\n\n\nCalculate the hyperbolic arccotangent of a value,\ndefined as \nacoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacoth(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arccotangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacoth(0.5);       // returns 0.8047189562170503\n\n\n\n\nSee also\n\n\nacsch\n,\n\nasech", 
            "title": "Acoth"
        }, 
        {
            "location": "/functions/acoth/#function-acoth", 
            "text": "Calculate the hyperbolic arccotangent of a value,\ndefined as  acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2 .  For matrices, the function is evaluated element wise.", 
            "title": "Function acoth"
        }, 
        {
            "location": "/functions/acoth/#syntax", 
            "text": "acoth(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acoth/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acoth/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arccotangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acoth/#examples", 
            "text": "acoth(0.5);       // returns 0.8047189562170503", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acoth/#see-also", 
            "text": "acsch , asech", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acsc/", 
            "text": "Function acsc\n\n\nCalculate the inverse cosecant of a value, defined as \nacsc(x) = asin(1/x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacsc(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nThe arc cosecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacsc(0.5);           // returns number 0.5235987755982989\nacsc(csc(1.5)); // returns number ~1.5\n\nacsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\n\n\n\nSee also\n\n\ncsc\n,\n\nasin\n,\n\nasec", 
            "title": "Acsc"
        }, 
        {
            "location": "/functions/acsc/#function-acsc", 
            "text": "Calculate the inverse cosecant of a value, defined as  acsc(x) = asin(1/x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function acsc"
        }, 
        {
            "location": "/functions/acsc/#syntax", 
            "text": "acsc(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acsc/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acsc/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  The arc cosecant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acsc/#examples", 
            "text": "acsc(0.5);           // returns number 0.5235987755982989\nacsc(csc(1.5)); // returns number ~1.5\n\nacsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acsc/#see-also", 
            "text": "csc , asin , asec", 
            "title": "See also"
        }, 
        {
            "location": "/functions/acsch/", 
            "text": "Function acsch\n\n\nCalculate the hyperbolic arccosecant of a value,\ndefined as \nacsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nacsch(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arccosecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\nacsch(0.5);       // returns 1.4436354751788103\n\n\n\n\nSee also\n\n\nasech\n,\n\nacoth", 
            "title": "Acsch"
        }, 
        {
            "location": "/functions/acsch/#function-acsch", 
            "text": "Calculate the hyperbolic arccosecant of a value,\ndefined as  acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1)) .  For matrices, the function is evaluated element wise.", 
            "title": "Function acsch"
        }, 
        {
            "location": "/functions/acsch/#syntax", 
            "text": "acsch(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/acsch/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/acsch/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arccosecant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/acsch/#examples", 
            "text": "acsch(0.5);       // returns 1.4436354751788103", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/acsch/#see-also", 
            "text": "asech , acoth", 
            "title": "See also"
        }, 
        {
            "location": "/functions/add/", 
            "text": "Function add\n\n\nAdd two values, \nx + y\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nadd(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to add\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nSecond value to add\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nSum of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nadd(2, 3);               // returns number 5\n\nvar a = complex(2, 3);\nvar b = complex(-4, 1);\nadd(a, b);               // returns Complex -2 + 4i\n\nadd([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\nvar c = unit('5 cm');\nvar d = unit('2.1 mm');\nadd(c, d);               // returns Unit 52.1 mm\n\nadd(\n2.3\n, \n4\n);         // returns number 6.3\n\n\n\n\nSee also\n\n\nsubtract", 
            "title": "Add"
        }, 
        {
            "location": "/functions/add/#function-add", 
            "text": "Add two values,  x + y .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function add"
        }, 
        {
            "location": "/functions/add/#syntax", 
            "text": "add(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/add/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  First value to add    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Second value to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/add/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Sum of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/add/#examples", 
            "text": "add(2, 3);               // returns number 5\n\nvar a = complex(2, 3);\nvar b = complex(-4, 1);\nadd(a, b);               // returns Complex -2 + 4i\n\nadd([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\nvar c = unit('5 cm');\nvar d = unit('2.1 mm');\nadd(c, d);               // returns Unit 52.1 mm\n\nadd( 2.3 ,  4 );         // returns number 6.3", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/add/#see-also", 
            "text": "subtract", 
            "title": "See also"
        }, 
        {
            "location": "/functions/and/", 
            "text": "Function and\n\n\nLogical \nand\n. Test whether two values are both defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nand(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to check\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nSecond value to check\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when both inputs are defined with a nonzero/nonempty value.\n\n\n\n\n\n\n\n\nExamples\n\n\nand(2, 4);   // returns true\n\na = [2, 0, 0];\nb = [3, 7, 0];\nc = 0;\n\nand(a, b);   // returns [true, false, false]\nand(a, c);   // returns [false, false, false]\n\n\n\n\nSee also\n\n\nnot\n,\n\nor\n,\n\nxor", 
            "title": "And"
        }, 
        {
            "location": "/functions/and/#function-and", 
            "text": "Logical  and . Test whether two values are both defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function and"
        }, 
        {
            "location": "/functions/and/#syntax", 
            "text": "and(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/and/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  First value to check    y  number   BigNumber   Complex   Unit   Array   Matrix  Second value to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/and/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when both inputs are defined with a nonzero/nonempty value.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/and/#examples", 
            "text": "and(2, 4);   // returns true\n\na = [2, 0, 0];\nb = [3, 7, 0];\nc = 0;\n\nand(a, b);   // returns [true, false, false]\nand(a, c);   // returns [false, false, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/and/#see-also", 
            "text": "not , or , xor", 
            "title": "See also"
        }, 
        {
            "location": "/functions/arg/", 
            "text": "Function arg\n\n\nCompute the argument of a complex value.\nFor a complex number \na + bi\n, the argument is computed as \natan2(b, a)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\narg(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nA complex number or array with complex numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nThe argument of x\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = complex(2, 2);\narg(a) / pi;          // returns number 0.25\n\nvar b = complex('2 + 3i');\narg(b);                    // returns number 0.982793723247329\natan2(3, 2);               // returns number 0.982793723247329\n\n\n\n\nSee also\n\n\nre\n,\n\nim\n,\n\nconj\n,\n\nabs", 
            "title": "Arg"
        }, 
        {
            "location": "/functions/arg/#function-arg", 
            "text": "Compute the argument of a complex value.\nFor a complex number  a + bi , the argument is computed as  atan2(b, a) .  For matrices, the function is evaluated element wise.", 
            "title": "Function arg"
        }, 
        {
            "location": "/functions/arg/#syntax", 
            "text": "arg(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/arg/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  A complex number or array with complex numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/arg/#returns", 
            "text": "Type  Description      number   Array   Matrix  The argument of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/arg/#examples", 
            "text": "var a = complex(2, 2);\narg(a) / pi;          // returns number 0.25\n\nvar b = complex('2 + 3i');\narg(b);                    // returns number 0.982793723247329\natan2(3, 2);               // returns number 0.982793723247329", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/arg/#see-also", 
            "text": "re , im , conj , abs", 
            "title": "See also"
        }, 
        {
            "location": "/functions/asec/", 
            "text": "Function asec\n\n\nCalculate the inverse secant of a value. Defined as \nasec(x) = acos(1/x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nasec(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nThe arc secant of x\n\n\n\n\n\n\n\n\nExamples\n\n\nasec(0.5);           // returns 1.0471975511965979\nasec(sec(1.5)); // returns 1.5\n\nasec(2);             // returns 0 + 1.3169578969248166 i\n\n\n\n\nSee also\n\n\nacos\n,\n\nacot\n,\n\nacsc", 
            "title": "Asec"
        }, 
        {
            "location": "/functions/asec/#function-asec", 
            "text": "Calculate the inverse secant of a value. Defined as  asec(x) = acos(1/x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function asec"
        }, 
        {
            "location": "/functions/asec/#syntax", 
            "text": "asec(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/asec/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/asec/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  The arc secant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/asec/#examples", 
            "text": "asec(0.5);           // returns 1.0471975511965979\nasec(sec(1.5)); // returns 1.5\n\nasec(2);             // returns 0 + 1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/asec/#see-also", 
            "text": "acos , acot , acsc", 
            "title": "See also"
        }, 
        {
            "location": "/functions/asech/", 
            "text": "Function asech\n\n\nCalculate the hyperbolic arcsecant of a value,\ndefined as \nasech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nasech(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arcsecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\nasech(0.5);       // returns 1.3169578969248166\n\n\n\n\nSee also\n\n\nacsch\n,\n\nacoth", 
            "title": "Asech"
        }, 
        {
            "location": "/functions/asech/#function-asech", 
            "text": "Calculate the hyperbolic arcsecant of a value,\ndefined as  asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function asech"
        }, 
        {
            "location": "/functions/asech/#syntax", 
            "text": "asech(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/asech/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/asech/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arcsecant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/asech/#examples", 
            "text": "asech(0.5);       // returns 1.3169578969248166", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/asech/#see-also", 
            "text": "acsch , acoth", 
            "title": "See also"
        }, 
        {
            "location": "/functions/asin/", 
            "text": "Function asin\n\n\nCalculate the inverse sine of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nasin(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe arc sine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nasin(0.5);           // returns number 0.5235987755982989\nasin(sin(1.5)); // returns number ~1.5\n\nasin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\n\n\n\nSee also\n\n\nsin\n,\n\natan\n,\n\nacos", 
            "title": "Asin"
        }, 
        {
            "location": "/functions/asin/#function-asin", 
            "text": "Calculate the inverse sine of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function asin"
        }, 
        {
            "location": "/functions/asin/#syntax", 
            "text": "asin(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/asin/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/asin/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  The arc sine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/asin/#examples", 
            "text": "asin(0.5);           // returns number 0.5235987755982989\nasin(sin(1.5)); // returns number ~1.5\n\nasin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/asin/#see-also", 
            "text": "sin , atan , acos", 
            "title": "See also"
        }, 
        {
            "location": "/functions/asinh/", 
            "text": "Function asinh\n\n\nCalculate the hyperbolic arcsine of a value,\ndefined as \nasinh(x) = ln(x + sqrt(x^2 + 1))\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nasinh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arcsine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nasinh(0.5);       // returns 0.48121182505960347\n\n\n\n\nSee also\n\n\nacosh\n,\n\natanh", 
            "title": "Asinh"
        }, 
        {
            "location": "/functions/asinh/#function-asinh", 
            "text": "Calculate the hyperbolic arcsine of a value,\ndefined as  asinh(x) = ln(x + sqrt(x^2 + 1)) .  For matrices, the function is evaluated element wise.", 
            "title": "Function asinh"
        }, 
        {
            "location": "/functions/asinh/#syntax", 
            "text": "asinh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/asinh/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/asinh/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arcsine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/asinh/#examples", 
            "text": "asinh(0.5);       // returns 0.48121182505960347", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/asinh/#see-also", 
            "text": "acosh , atanh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/atan/", 
            "text": "Function atan\n\n\nCalculate the inverse tangent of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\natan(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe arc tangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\natan(0.5);           // returns number 0.4636476090008061\natan(tan(1.5)); // returns number 1.5\n\natan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\n\n\n\nSee also\n\n\ntan\n,\n\nasin\n,\n\nacos", 
            "title": "Atan"
        }, 
        {
            "location": "/functions/atan/#function-atan", 
            "text": "Calculate the inverse tangent of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function atan"
        }, 
        {
            "location": "/functions/atan/#syntax", 
            "text": "atan(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/atan/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/atan/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  The arc tangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/atan/#examples", 
            "text": "atan(0.5);           // returns number 0.4636476090008061\natan(tan(1.5)); // returns number 1.5\n\natan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/atan/#see-also", 
            "text": "tan , asin , acos", 
            "title": "See also"
        }, 
        {
            "location": "/functions/atan2/", 
            "text": "Function atan2\n\n\nCalculate the inverse tangent function with two arguments, y/x.\nBy providing two arguments, the right quadrant of the computed angle can be\ndetermined.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\natan2(y, x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ny\n\n\nnumber \n Array \n Matrix\n\n\nSecond dimension\n\n\n\n\n\n\nx\n\n\nnumber \n Array \n Matrix\n\n\nFirst dimension\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nFour-quadrant inverse tangent\n\n\n\n\n\n\n\n\nExamples\n\n\natan2(2, 2) / pi;       // returns number 0.25\n\nvar angle = unit(60, 'deg'); // returns Unit 60 deg\nvar x = cos(angle);\nvar y = sin(angle);\n\natan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n\n\n\n\nSee also\n\n\ntan\n,\n\natan\n,\n\nsin\n,\n\ncos", 
            "title": "Atan2"
        }, 
        {
            "location": "/functions/atan2/#function-atan2", 
            "text": "Calculate the inverse tangent function with two arguments, y/x.\nBy providing two arguments, the right quadrant of the computed angle can be\ndetermined.  For matrices, the function is evaluated element wise.", 
            "title": "Function atan2"
        }, 
        {
            "location": "/functions/atan2/#syntax", 
            "text": "atan2(y, x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/atan2/#parameters", 
            "text": "Parameter  Type  Description      y  number   Array   Matrix  Second dimension    x  number   Array   Matrix  First dimension", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/atan2/#returns", 
            "text": "Type  Description      number   Array   Matrix  Four-quadrant inverse tangent", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/atan2/#examples", 
            "text": "atan2(2, 2) / pi;       // returns number 0.25\n\nvar angle = unit(60, 'deg'); // returns Unit 60 deg\nvar x = cos(angle);\nvar y = sin(angle);\n\natan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/atan2/#see-also", 
            "text": "tan , atan , sin , cos", 
            "title": "See also"
        }, 
        {
            "location": "/functions/atanh/", 
            "text": "Function atanh\n\n\nCalculate the hyperbolic arctangent of a value,\ndefined as \natanh(x) = ln((1 + x)/(1 - x)) / 2\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\natanh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic arctangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\natanh(0.5);       // returns 0.5493061443340549\n\n\n\n\nSee also\n\n\nacosh\n,\n\nasinh", 
            "title": "Atanh"
        }, 
        {
            "location": "/functions/atanh/#function-atanh", 
            "text": "Calculate the hyperbolic arctangent of a value,\ndefined as  atanh(x) = ln((1 + x)/(1 - x)) / 2 .  For matrices, the function is evaluated element wise.", 
            "title": "Function atanh"
        }, 
        {
            "location": "/functions/atanh/#syntax", 
            "text": "atanh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/atanh/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/atanh/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic arctangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/atanh/#examples", 
            "text": "atanh(0.5);       // returns 0.5493061443340549", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/atanh/#see-also", 
            "text": "acosh , asinh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bellNumbers/", 
            "text": "Function bellNumbers\n\n\nThe Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\nbellNumbers only takes integer arguments.\nThe following condition must be enforced: n \n= 0\n\n\nSyntax\n\n\nbellNumbers(n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber \n BigNumber\n\n\nTotal number of objects in the set\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nB(n)\n\n\n\n\n\n\n\n\nExamples\n\n\nbellNumbers(3); // returns 5;\nbellNumbers(8); // returns 4140;\n\n\n\n\nSee also\n\n\nstirlingS2", 
            "title": "bellNumbers"
        }, 
        {
            "location": "/functions/bellNumbers/#function-bellnumbers", 
            "text": "The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.\nbellNumbers only takes integer arguments.\nThe following condition must be enforced: n  = 0", 
            "title": "Function bellNumbers"
        }, 
        {
            "location": "/functions/bellNumbers/#syntax", 
            "text": "bellNumbers(n)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bellNumbers/#parameters", 
            "text": "Parameter  Type  Description      n  Number   BigNumber  Total number of objects in the set", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bellNumbers/#returns", 
            "text": "Type  Description      Number   BigNumber  B(n)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bellNumbers/#examples", 
            "text": "bellNumbers(3); // returns 5;\nbellNumbers(8); // returns 4140;", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bellNumbers/#see-also", 
            "text": "stirlingS2", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bignumber/", 
            "text": "Function bignumber\n\n\nCreate a BigNumber, which can store numbers with arbitrary precision.\nWhen a matrix is provided, all elements will be converted to BigNumber.\n\n\nSyntax\n\n\nbignumber(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nnumber \n string \n Fraction \n BigNumber \n Array \n Matrix \n boolean \n null\n\n\nValue for the big number, 0 by default.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBigNumber\n\n\nThe created bignumber\n\n\n\n\n\n\n\n\nExamples\n\n\n0.1 + 0.2;                                  // returns number 0.30000000000000004\nbignumber(0.1) + bignumber(0.2);  // returns BigNumber 0.3\n\n\n7.2e500;                                    // returns number Infinity\nbignumber('7.2e500');                  // returns BigNumber 7.2e500\n\n\n\n\nSee also\n\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nmatrix\n,\n\nstring\n,\n\nunit", 
            "title": "Bignumber"
        }, 
        {
            "location": "/functions/bignumber/#function-bignumber", 
            "text": "Create a BigNumber, which can store numbers with arbitrary precision.\nWhen a matrix is provided, all elements will be converted to BigNumber.", 
            "title": "Function bignumber"
        }, 
        {
            "location": "/functions/bignumber/#syntax", 
            "text": "bignumber(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bignumber/#parameters", 
            "text": "Parameter  Type  Description      value  number   string   Fraction   BigNumber   Array   Matrix   boolean   null  Value for the big number, 0 by default.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bignumber/#returns", 
            "text": "Type  Description      BigNumber  The created bignumber", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bignumber/#examples", 
            "text": "0.1 + 0.2;                                  // returns number 0.30000000000000004\nbignumber(0.1) + bignumber(0.2);  // returns BigNumber 0.3\n\n\n7.2e500;                                    // returns number Infinity\nbignumber('7.2e500');                  // returns BigNumber 7.2e500", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bignumber/#see-also", 
            "text": "boolean , complex , index , matrix , string , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bitAnd/", 
            "text": "Function bitAnd\n\n\nBitwise AND two values, \nx \n y\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nbitAnd(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nFirst value to and\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nSecond value to and\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nAND of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nbitAnd(53, 131);               // returns number 1\n\nbitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]\n\n\n\n\nSee also\n\n\nbitNot\n,\n\nbitOr\n,\n\nbitXor\n,\n\nleftShift\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "bitAnd"
        }, 
        {
            "location": "/functions/bitAnd/#function-bitand", 
            "text": "Bitwise AND two values,  x   y .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function bitAnd"
        }, 
        {
            "location": "/functions/bitAnd/#syntax", 
            "text": "bitAnd(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bitAnd/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  First value to and    y  number   BigNumber   Array   Matrix  Second value to and", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bitAnd/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  AND of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bitAnd/#examples", 
            "text": "bitAnd(53, 131);               // returns number 1\n\nbitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bitAnd/#see-also", 
            "text": "bitNot , bitOr , bitXor , leftShift , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bitNot/", 
            "text": "Function bitNot\n\n\nBitwise NOT value, \n~x\n.\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.\n\n\nSyntax\n\n\nbitNot(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nValue to not\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nNOT of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nbitNot(1);               // returns number -2\n\nbitNot([2, -3, 4]);      // returns Array [-3, 2, 5]\n\n\n\n\nSee also\n\n\nbitAnd\n,\n\nbitOr\n,\n\nbitXor\n,\n\nleftShift\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "bitNot"
        }, 
        {
            "location": "/functions/bitNot/#function-bitnot", 
            "text": "Bitwise NOT value,  ~x .\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.", 
            "title": "Function bitNot"
        }, 
        {
            "location": "/functions/bitNot/#syntax", 
            "text": "bitNot(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bitNot/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  Value to not", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bitNot/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  NOT of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bitNot/#examples", 
            "text": "bitNot(1);               // returns number -2\n\nbitNot([2, -3, 4]);      // returns Array [-3, 2, 5]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bitNot/#see-also", 
            "text": "bitAnd , bitOr , bitXor , leftShift , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bitOr/", 
            "text": "Function bitOr\n\n\nBitwise OR two values, \nx | y\n.\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the lowest print base.\n\n\nSyntax\n\n\nbitOr(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nFirst value to or\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nSecond value to or\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nOR of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nbitOr(1, 2);               // returns number 3\n\nbitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]\n\n\n\n\nSee also\n\n\nbitAnd\n,\n\nbitNot\n,\n\nbitXor\n,\n\nleftShift\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "bitOr"
        }, 
        {
            "location": "/functions/bitOr/#function-bitor", 
            "text": "Bitwise OR two values,  x | y .\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the lowest print base.", 
            "title": "Function bitOr"
        }, 
        {
            "location": "/functions/bitOr/#syntax", 
            "text": "bitOr(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bitOr/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  First value to or    y  number   BigNumber   Array   Matrix  Second value to or", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bitOr/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  OR of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bitOr/#examples", 
            "text": "bitOr(1, 2);               // returns number 3\n\nbitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bitOr/#see-also", 
            "text": "bitAnd , bitNot , bitXor , leftShift , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/bitXor/", 
            "text": "Function bitXor\n\n\nBitwise XOR two values, \nx ^ y\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nbitXor(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nFirst value to xor\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nSecond value to xor\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nXOR of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nbitXor(1, 2);               // returns number 3\n\nbitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]\n\n\n\n\nSee also\n\n\nbitAnd\n,\n\nbitNot\n,\n\nbitOr\n,\n\nleftShift\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "bitXor"
        }, 
        {
            "location": "/functions/bitXor/#function-bitxor", 
            "text": "Bitwise XOR two values,  x ^ y .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function bitXor"
        }, 
        {
            "location": "/functions/bitXor/#syntax", 
            "text": "bitXor(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/bitXor/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  First value to xor    y  number   BigNumber   Array   Matrix  Second value to xor", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/bitXor/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  XOR of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/bitXor/#examples", 
            "text": "bitXor(1, 2);               // returns number 3\n\nbitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/bitXor/#see-also", 
            "text": "bitAnd , bitNot , bitOr , leftShift , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/boolean/", 
            "text": "Function boolean\n\n\nCreate a boolean or convert a string or number to a boolean.\nIn case of a number, \ntrue\n is returned for non-zero numbers, and \nfalse\n in\ncase of zero.\nStrings can be \n'true'\n or \n'false'\n, or can contain a number.\nWhen value is a matrix, all elements will be converted to boolean.\n\n\nSyntax\n\n\nboolean(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nstring \n number \n boolean \n Array \n Matrix \n null\n\n\nA value of any type\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nThe boolean value\n\n\n\n\n\n\n\n\nExamples\n\n\nboolean(0);     // returns false\nboolean(1);     // returns true\nboolean(-3);     // returns true\nboolean('true');     // returns true\nboolean('false');     // returns false\nboolean([1, 0, 1, 1]);     // returns [true, false, true, true]\n\n\n\n\nSee also\n\n\nbignumber\n,\n\ncomplex\n,\n\nindex\n,\n\nmatrix\n,\n\nstring\n,\n\nunit", 
            "title": "Boolean"
        }, 
        {
            "location": "/functions/boolean/#function-boolean", 
            "text": "Create a boolean or convert a string or number to a boolean.\nIn case of a number,  true  is returned for non-zero numbers, and  false  in\ncase of zero.\nStrings can be  'true'  or  'false' , or can contain a number.\nWhen value is a matrix, all elements will be converted to boolean.", 
            "title": "Function boolean"
        }, 
        {
            "location": "/functions/boolean/#syntax", 
            "text": "boolean(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/boolean/#parameters", 
            "text": "Parameter  Type  Description      value  string   number   boolean   Array   Matrix   null  A value of any type", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/boolean/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  The boolean value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/boolean/#examples", 
            "text": "boolean(0);     // returns false\nboolean(1);     // returns true\nboolean(-3);     // returns true\nboolean('true');     // returns true\nboolean('false');     // returns false\nboolean([1, 0, 1, 1]);     // returns [true, false, true, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/boolean/#see-also", 
            "text": "bignumber , complex , index , matrix , string , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/catalan/", 
            "text": "Function catalan\n\n\nThe Catalan Numbers enumerate combinatorial structures of many different types.\ncatalan only takes integer arguments.\nThe following condition must be enforced: n \n= 0\n\n\nSyntax\n\n\ncatalan(n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber \n BigNumber\n\n\nnth Catalan number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nCn(n)\n\n\n\n\n\n\n\n\nExamples\n\n\ncatalan(3); // returns 5;\ncatalan(8); // returns 1430;\n\n\n\n\nSee also\n\n\nbellNumbers", 
            "title": "Catalan"
        }, 
        {
            "location": "/functions/catalan/#function-catalan", 
            "text": "The Catalan Numbers enumerate combinatorial structures of many different types.\ncatalan only takes integer arguments.\nThe following condition must be enforced: n  = 0", 
            "title": "Function catalan"
        }, 
        {
            "location": "/functions/catalan/#syntax", 
            "text": "catalan(n)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/catalan/#parameters", 
            "text": "Parameter  Type  Description      n  Number   BigNumber  nth Catalan number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/catalan/#returns", 
            "text": "Type  Description      Number   BigNumber  Cn(n)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/catalan/#examples", 
            "text": "catalan(3); // returns 5;\ncatalan(8); // returns 1430;", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/catalan/#see-also", 
            "text": "bellNumbers", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cbrt/", 
            "text": "Function cbrt\n\n\nCalculate the cubic root of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncbrt(x)\ncbrt(x, allRoots)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nValue for which to calculate the cubic root.\n\n\n\n\n\n\nallRoots\n\n\nboolean\n\n\nOptional, false by default. Only applicable when \nx\n is a number or complex number. If true, all complex roots are returned, if false (default) the principal root is returned.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nReturns the cubic root of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\ncbrt(27);                  // returns 3\ncube(3);                   // returns 27\ncbrt(-64);                 // returns -4\ncbrt(unit('27 m^3')); // returns Unit 3 m\ncbrt([27, 64, 125]);       // returns [3, 4, 5]\n\nvar x = complex('8i');\ncbrt(x);                   // returns Complex 1.7320508075689 + i\ncbrt(x, true);             // returns Matrix [\n                                //    1.7320508075689 + i\n                                //   -1.7320508075689 + i\n                                //   -2i\n                                // ]\n\n\n\n\nSee also\n\n\nsquare\n,\n\nsqrt\n,\n\ncube", 
            "title": "Cbrt"
        }, 
        {
            "location": "/functions/cbrt/#function-cbrt", 
            "text": "Calculate the cubic root of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function cbrt"
        }, 
        {
            "location": "/functions/cbrt/#syntax", 
            "text": "cbrt(x)\ncbrt(x, allRoots)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cbrt/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Value for which to calculate the cubic root.    allRoots  boolean  Optional, false by default. Only applicable when  x  is a number or complex number. If true, all complex roots are returned, if false (default) the principal root is returned.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cbrt/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Unit   Array   Matrix  Returns the cubic root of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cbrt/#examples", 
            "text": "cbrt(27);                  // returns 3\ncube(3);                   // returns 27\ncbrt(-64);                 // returns -4\ncbrt(unit('27 m^3')); // returns Unit 3 m\ncbrt([27, 64, 125]);       // returns [3, 4, 5]\n\nvar x = complex('8i');\ncbrt(x);                   // returns Complex 1.7320508075689 + i\ncbrt(x, true);             // returns Matrix [\n                                //    1.7320508075689 + i\n                                //   -1.7320508075689 + i\n                                //   -2i\n                                // ]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cbrt/#see-also", 
            "text": "square , sqrt , cube", 
            "title": "See also"
        }, 
        {
            "location": "/functions/ceil/", 
            "text": "Function ceil\n\n\nRound a value towards plus infinity\nIf \nx\n is complex, both real and imaginary part are rounded towards plus infinity.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nceil(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nNumber to be rounded\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nRounded value\n\n\n\n\n\n\n\n\nExamples\n\n\nceil(3.2);               // returns number 4\nceil(3.8);               // returns number 4\nceil(-4.2);              // returns number -4\nceil(-4.7);              // returns number -4\n\nvar c = complex(3.2, -2.7);\nceil(c);                 // returns Complex 4 - 2i\n\nceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]\n\n\n\n\nSee also\n\n\nfloor\n,\n\nfix\n,\n\nround", 
            "title": "Ceil"
        }, 
        {
            "location": "/functions/ceil/#function-ceil", 
            "text": "Round a value towards plus infinity\nIf  x  is complex, both real and imaginary part are rounded towards plus infinity.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function ceil"
        }, 
        {
            "location": "/functions/ceil/#syntax", 
            "text": "ceil(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/ceil/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix  Number to be rounded", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/ceil/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix  Rounded value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/ceil/#examples", 
            "text": "ceil(3.2);               // returns number 4\nceil(3.8);               // returns number 4\nceil(-4.2);              // returns number -4\nceil(-4.7);              // returns number -4\n\nvar c = complex(3.2, -2.7);\nceil(c);                 // returns Complex 4 - 2i\n\nceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/ceil/#see-also", 
            "text": "floor , fix , round", 
            "title": "See also"
        }, 
        {
            "location": "/functions/chain/", 
            "text": "Function chain\n\n\nWrap any value in a chain, allowing to perform chained operations on\nthe value.\n\n\nAll methods available in the js library can be called upon the chain,\nand then will be evaluated with the value itself as first argument.\nThe chain can be closed by executing \nchain.done()\n, which returns\nthe final value.\n\n\nThe chain has a number of special functions:\n\n\n\n\ndone()\n     Finalize the chain and return the chain's value.\n\n\nvalueOf()\n  The same as \ndone()\n\n\ntoString()\n Executes \nformat()\n onto the chain's value, returning\n               a string representation of the value.\n\n\n\n\nSyntax\n\n\nchain(value)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\n*\n\n\nA value of any type on which to start a chained operation.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype.Chain\n\n\nThe created chain\n\n\n\n\n\n\n\n\nExamples\n\n\nchain(3)\n    .add(4)\n    .subtract(2)\n    .done();     // 5\n\nchain( [[1, 2], [3, 4]] )\n    .subset(index(0, 0), 8)\n    .multiply(3)\n    .done();     // [[24, 6], [9, 12]]", 
            "title": "Chain"
        }, 
        {
            "location": "/functions/chain/#function-chain", 
            "text": "Wrap any value in a chain, allowing to perform chained operations on\nthe value.  All methods available in the js library can be called upon the chain,\nand then will be evaluated with the value itself as first argument.\nThe chain can be closed by executing  chain.done() , which returns\nthe final value.  The chain has a number of special functions:   done()      Finalize the chain and return the chain's value.  valueOf()   The same as  done()  toString()  Executes  format()  onto the chain's value, returning\n               a string representation of the value.", 
            "title": "Function chain"
        }, 
        {
            "location": "/functions/chain/#syntax", 
            "text": "chain(value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/chain/#parameters", 
            "text": "Parameter  Type  Description      value  *  A value of any type on which to start a chained operation.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/chain/#returns", 
            "text": "Type  Description      type.Chain  The created chain", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/chain/#examples", 
            "text": "chain(3)\n    .add(4)\n    .subtract(2)\n    .done();     // 5\n\nchain( [[1, 2], [3, 4]] )\n    .subset(index(0, 0), 8)\n    .multiply(3)\n    .done();     // [[24, 6], [9, 12]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/combinations/", 
            "text": "Function combinations\n\n\nCompute the number of ways of picking \nk\n unordered outcomes from \nn\n\npossibilities.\n\n\nCombinations only takes integer arguments.\nThe following condition must be enforced: k \n= n.\n\n\nSyntax\n\n\ncombinations(n, k)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nnumber \n BigNumber\n\n\nTotal number of objects in the set\n\n\n\n\n\n\nk\n\n\nnumber \n BigNumber\n\n\nNumber of objects in the subset\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber\n\n\nNumber of possible combinations.\n\n\n\n\n\n\n\n\nExamples\n\n\ncombinations(7, 5); // returns 21\n\n\n\n\nSee also\n\n\npermutations\n,\n\nfactorial", 
            "title": "Combinations"
        }, 
        {
            "location": "/functions/combinations/#function-combinations", 
            "text": "Compute the number of ways of picking  k  unordered outcomes from  n \npossibilities.  Combinations only takes integer arguments.\nThe following condition must be enforced: k  = n.", 
            "title": "Function combinations"
        }, 
        {
            "location": "/functions/combinations/#syntax", 
            "text": "combinations(n, k)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/combinations/#parameters", 
            "text": "Parameter  Type  Description      n  number   BigNumber  Total number of objects in the set    k  number   BigNumber  Number of objects in the subset", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/combinations/#returns", 
            "text": "Type  Description      number   BigNumber  Number of possible combinations.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/combinations/#examples", 
            "text": "combinations(7, 5); // returns 21", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/combinations/#see-also", 
            "text": "permutations , factorial", 
            "title": "See also"
        }, 
        {
            "location": "/functions/compare/", 
            "text": "Function compare\n\n\nCompare two values. Returns 1 when x \n y, -1 when x \n y, and 0 when x == y.\n\n\nx and y are considered equal when the relative difference between x and y\nis smaller than the configured epsilon. The function cannot be used to\ncompare values smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncompare(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nReturns the result of the comparison: 1, 0 or -1.\n\n\n\n\n\n\n\n\nExamples\n\n\ncompare(6, 1);           // returns 1\ncompare(2, 3);           // returns -1\ncompare(7, 7);           // returns 0\n\nvar a = unit('5 cm');\nvar b = unit('40 mm');\ncompare(a, b);           // returns 1\n\ncompare(2, [1, 2, 3]);   // returns [1, 0, -1]\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\nlarger\n,\n\nlargerEq", 
            "title": "Compare"
        }, 
        {
            "location": "/functions/compare/#function-compare", 
            "text": "Compare two values. Returns 1 when x   y, -1 when x   y, and 0 when x == y.  x and y are considered equal when the relative difference between x and y\nis smaller than the configured epsilon. The function cannot be used to\ncompare values smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.", 
            "title": "Function compare"
        }, 
        {
            "location": "/functions/compare/#syntax", 
            "text": "compare(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/compare/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   Fraction   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/compare/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Array   Matrix  Returns the result of the comparison: 1, 0 or -1.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/compare/#examples", 
            "text": "compare(6, 1);           // returns 1\ncompare(2, 3);           // returns -1\ncompare(7, 7);           // returns 0\n\nvar a = unit('5 cm');\nvar b = unit('40 mm');\ncompare(a, b);           // returns 1\n\ncompare(2, [1, 2, 3]);   // returns [1, 0, -1]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/compare/#see-also", 
            "text": "equal , unequal , smaller , smallerEq , larger , largerEq", 
            "title": "See also"
        }, 
        {
            "location": "/functions/complex/", 
            "text": "Function complex\n\n\nCreate a complex value or convert a value to a complex value.\n\n\nSyntax\n\n\ncomplex()                           // creates a complex value with zero\n                                         // as real and imaginary part.\ncomplex(re : number, im : string)   // creates a complex value with provided\n                                         // values for real and imaginary part.\ncomplex(re : number)                // creates a complex value with provided\n                                         // real value and zero imaginary part.\ncomplex(complex : Complex)          // clones the provided complex value.\ncomplex(arg : string)               // parses a string into a complex value.\ncomplex(array : Array)              // converts the elements of the array\n                                         // or matrix element wise into a\n                                         // complex value.\ncomplex({re: number, im: number})   // creates a complex value with provided\n                                         // values for real an imaginary part.\ncomplex({r: number, phi: number})   // creates a complex value with provided\n                                         // polar coordinates\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n* \n Array \n Matrix\n\n\nArguments specifying the real and imaginary part of the complex number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nComplex \n Array \n Matrix\n\n\nReturns a complex value\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = complex(3, -4);     // a = Complex 3 - 4i\na.re = 5;                        // a = Complex 5 - 4i\nvar i = a.im;                    // Number -4;\nvar b = complex('2 + 6i');  // Complex 2 + 6i\nvar c = complex();          // Complex 0 + 0i\nvar d = add(a, b);          // Complex 5 + 2i\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\nindex\n,\n\nmatrix\n,\n\nnumber\n,\n\nstring\n,\n\nunit", 
            "title": "Complex"
        }, 
        {
            "location": "/functions/complex/#function-complex", 
            "text": "Create a complex value or convert a value to a complex value.", 
            "title": "Function complex"
        }, 
        {
            "location": "/functions/complex/#syntax", 
            "text": "complex()                           // creates a complex value with zero\n                                         // as real and imaginary part.\ncomplex(re : number, im : string)   // creates a complex value with provided\n                                         // values for real and imaginary part.\ncomplex(re : number)                // creates a complex value with provided\n                                         // real value and zero imaginary part.\ncomplex(complex : Complex)          // clones the provided complex value.\ncomplex(arg : string)               // parses a string into a complex value.\ncomplex(array : Array)              // converts the elements of the array\n                                         // or matrix element wise into a\n                                         // complex value.\ncomplex({re: number, im: number})   // creates a complex value with provided\n                                         // values for real an imaginary part.\ncomplex({r: number, phi: number})   // creates a complex value with provided\n                                         // polar coordinates", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/complex/#parameters", 
            "text": "Parameter  Type  Description      args  *   Array   Matrix  Arguments specifying the real and imaginary part of the complex number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/complex/#returns", 
            "text": "Type  Description      Complex   Array   Matrix  Returns a complex value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/complex/#examples", 
            "text": "var a = complex(3, -4);     // a = Complex 3 - 4i\na.re = 5;                        // a = Complex 5 - 4i\nvar i = a.im;                    // Number -4;\nvar b = complex('2 + 6i');  // Complex 2 + 6i\nvar c = complex();          // Complex 0 + 0i\nvar d = add(a, b);          // Complex 5 + 2i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/complex/#see-also", 
            "text": "bignumber , boolean , index , matrix , number , string , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/composition/", 
            "text": "Function composition\n\n\nThe composition counts of n into k parts.\n\n\ncomposition only takes integer arguments.\nThe following condition must be enforced: k \n= n.\n\n\nSyntax\n\n\ncomposition(n, k)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber \n BigNumber\n\n\nTotal number of objects in the set\n\n\n\n\n\n\nk\n\n\nNumber \n BigNumber\n\n\nNumber of objects in the subset\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nReturns the composition counts of n into k parts.\n\n\n\n\n\n\n\n\nExamples\n\n\ncomposition(5, 3); // returns 6\n\n\n\n\nSee also\n\n\ncombinations", 
            "title": "Composition"
        }, 
        {
            "location": "/functions/composition/#function-composition", 
            "text": "The composition counts of n into k parts.  composition only takes integer arguments.\nThe following condition must be enforced: k  = n.", 
            "title": "Function composition"
        }, 
        {
            "location": "/functions/composition/#syntax", 
            "text": "composition(n, k)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/composition/#parameters", 
            "text": "Parameter  Type  Description      n  Number   BigNumber  Total number of objects in the set    k  Number   BigNumber  Number of objects in the subset", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/composition/#returns", 
            "text": "Type  Description      Number   BigNumber  Returns the composition counts of n into k parts.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/composition/#examples", 
            "text": "composition(5, 3); // returns 6", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/composition/#see-also", 
            "text": "combinations", 
            "title": "See also"
        }, 
        {
            "location": "/functions/concat/", 
            "text": "Function concat\n\n\nConcatenate two or more matrices.\n\n\nSyntax\n\n\nconcat(A, B, C, ...)\nconcat(A, B, C, ..., dim)\n\n\n\n\nWhere\n\n\n\n\ndim: number\n is a zero-based dimension over which to concatenate the matrices.\n  By default the last dimension of the matrices.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... Array \n Matrix\n\n\nTwo or more matrices\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nConcatenated matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nvar A = [[1, 2], [5, 6]];\nvar B = [[3, 4], [7, 8]];\n\nconcat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\nconcat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\nconcat('hello', ' ', 'world'); // returns 'hello world'\n\n\n\n\nSee also\n\n\nsize\n,\n\nsqueeze\n,\n\nsubset\n,\n\ntranspose", 
            "title": "Concat"
        }, 
        {
            "location": "/functions/concat/#function-concat", 
            "text": "Concatenate two or more matrices.", 
            "title": "Function concat"
        }, 
        {
            "location": "/functions/concat/#syntax", 
            "text": "concat(A, B, C, ...)\nconcat(A, B, C, ..., dim)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/concat/#where", 
            "text": "dim: number  is a zero-based dimension over which to concatenate the matrices.\n  By default the last dimension of the matrices.", 
            "title": "Where"
        }, 
        {
            "location": "/functions/concat/#parameters", 
            "text": "Parameter  Type  Description      args  ... Array   Matrix  Two or more matrices", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/concat/#returns", 
            "text": "Type  Description      Array   Matrix  Concatenated matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/concat/#examples", 
            "text": "var A = [[1, 2], [5, 6]];\nvar B = [[3, 4], [7, 8]];\n\nconcat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\nconcat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\nconcat('hello', ' ', 'world'); // returns 'hello world'", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/concat/#see-also", 
            "text": "size , squeeze , subset , transpose", 
            "title": "See also"
        }, 
        {
            "location": "/functions/config/", 
            "text": "Function config\n\n\nSet configuration options for js, and get current options.\nWill emit a 'config' event, with arguments (curr, prev).\n\n\nSyntax\n\n\nconfig(config: Object): Object\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nAvailable options: {number} epsilon Minimum relative difference between two compared values, used by all comparison functions. {string} matrix A string 'Matrix' (default) or 'Array'. {string} number A string 'number' (default), 'BigNumber', or 'Fraction' {number} precision The number of significant digits for BigNumbers. Not applicable for Numbers. {string} parenthesis How to display parentheses in LaTeX and string output.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nReturns the current configuration\n\n\n\n\n\n\n\n\nExamples\n\n\nconfig().number;                // outputs 'number'\neval('0.4');                    // outputs number 0.4\nconfig({number: 'Fraction'});\neval('0.4');                    // outputs Fraction 2/5", 
            "title": "Config"
        }, 
        {
            "location": "/functions/config/#function-config", 
            "text": "Set configuration options for js, and get current options.\nWill emit a 'config' event, with arguments (curr, prev).", 
            "title": "Function config"
        }, 
        {
            "location": "/functions/config/#syntax", 
            "text": "config(config: Object): Object", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/config/#parameters", 
            "text": "Parameter  Type  Description      options  Object  Available options: {number} epsilon Minimum relative difference between two compared values, used by all comparison functions. {string} matrix A string 'Matrix' (default) or 'Array'. {string} number A string 'number' (default), 'BigNumber', or 'Fraction' {number} precision The number of significant digits for BigNumbers. Not applicable for Numbers. {string} parenthesis How to display parentheses in LaTeX and string output.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/config/#returns", 
            "text": "Type  Description      Object  Returns the current configuration", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/config/#examples", 
            "text": "config().number;                // outputs 'number'\neval('0.4');                    // outputs number 0.4\nconfig({number: 'Fraction'});\neval('0.4');                    // outputs Fraction 2/5", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/conj/", 
            "text": "Function conj\n\n\nCompute the complex conjugate of a complex value.\nIf \nx = a+bi\n, the complex conjugate of \nx\n is \na - bi\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nconj(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nA complex number or array with complex numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe complex conjugate of x\n\n\n\n\n\n\n\n\nExamples\n\n\nconj(complex('2 + 3i'));  // returns Complex 2 - 3i\nconj(complex('2 - 3i'));  // returns Complex 2 + 3i\nconj(complex('-5.2i'));  // returns Complex 5.2i\n\n\n\n\nSee also\n\n\nre\n,\n\nim\n,\n\narg\n,\n\nabs", 
            "title": "Conj"
        }, 
        {
            "location": "/functions/conj/#function-conj", 
            "text": "Compute the complex conjugate of a complex value.\nIf  x = a+bi , the complex conjugate of  x  is  a - bi .  For matrices, the function is evaluated element wise.", 
            "title": "Function conj"
        }, 
        {
            "location": "/functions/conj/#syntax", 
            "text": "conj(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/conj/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  A complex number or array with complex numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/conj/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  The complex conjugate of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/conj/#examples", 
            "text": "conj(complex('2 + 3i'));  // returns Complex 2 - 3i\nconj(complex('2 - 3i'));  // returns Complex 2 + 3i\nconj(complex('-5.2i'));  // returns Complex 5.2i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/conj/#see-also", 
            "text": "re , im , arg , abs", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cos/", 
            "text": "Function cos\n\n\nCalculate the cosine of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncos(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nCosine of x\n\n\n\n\n\n\n\n\nExamples\n\n\ncos(2);                      // returns number -0.4161468365471422\ncos(pi / 4);            // returns number  0.7071067811865475\ncos(unit(180, 'deg'));  // returns number -1\ncos(unit(60, 'deg'));   // returns number  0.5\n\nvar angle = 0.2;\npow(sin(angle), 2) + pow(cos(angle), 2); // returns number ~1\n\n\n\n\nSee also\n\n\ncos\n,\n\ntan", 
            "title": "Cos"
        }, 
        {
            "location": "/functions/cos/#function-cos", 
            "text": "Calculate the cosine of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function cos"
        }, 
        {
            "location": "/functions/cos/#syntax", 
            "text": "cos(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cos/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cos/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Cosine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cos/#examples", 
            "text": "cos(2);                      // returns number -0.4161468365471422\ncos(pi / 4);            // returns number  0.7071067811865475\ncos(unit(180, 'deg'));  // returns number -1\ncos(unit(60, 'deg'));   // returns number  0.5\n\nvar angle = 0.2;\npow(sin(angle), 2) + pow(cos(angle), 2); // returns number ~1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cos/#see-also", 
            "text": "cos , tan", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cosh/", 
            "text": "Function cosh\n\n\nCalculate the hyperbolic cosine of a value,\ndefined as \ncosh(x) = 1/2 * (exp(x) + exp(-x))\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncosh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nHyperbolic cosine of x\n\n\n\n\n\n\n\n\nExamples\n\n\ncosh(0.5);       // returns number 1.1276259652063807\n\n\n\n\nSee also\n\n\nsinh\n,\n\ntanh", 
            "title": "Cosh"
        }, 
        {
            "location": "/functions/cosh/#function-cosh", 
            "text": "Calculate the hyperbolic cosine of a value,\ndefined as  cosh(x) = 1/2 * (exp(x) + exp(-x)) .  For matrices, the function is evaluated element wise.", 
            "title": "Function cosh"
        }, 
        {
            "location": "/functions/cosh/#syntax", 
            "text": "cosh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cosh/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cosh/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Hyperbolic cosine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cosh/#examples", 
            "text": "cosh(0.5);       // returns number 1.1276259652063807", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cosh/#see-also", 
            "text": "sinh , tanh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cot/", 
            "text": "Function cot\n\n\nCalculate the cotangent of a value. Defined as \ncot(x) = 1 / tan(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncot(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nCotangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\ncot(2);      // returns number -0.45765755436028577\n1 / tan(2);  // returns number -0.45765755436028577\n\n\n\n\nSee also\n\n\ntan\n,\n\nsec\n,\n\ncsc", 
            "title": "Cot"
        }, 
        {
            "location": "/functions/cot/#function-cot", 
            "text": "Calculate the cotangent of a value. Defined as  cot(x) = 1 / tan(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function cot"
        }, 
        {
            "location": "/functions/cot/#syntax", 
            "text": "cot(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cot/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cot/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Cotangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cot/#examples", 
            "text": "cot(2);      // returns number -0.45765755436028577\n1 / tan(2);  // returns number -0.45765755436028577", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cot/#see-also", 
            "text": "tan , sec , csc", 
            "title": "See also"
        }, 
        {
            "location": "/functions/coth/", 
            "text": "Function coth\n\n\nCalculate the hyperbolic cotangent of a value,\ndefined as \ncoth(x) = 1 / tanh(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncoth(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic cotangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\n// coth(x) = 1 / tanh(x)\ncoth(2);         // returns 1.0373147207275482\n1 / tanh(2);     // returns 1.0373147207275482\n\n\n\n\nSee also\n\n\nsinh\n,\n\ntanh\n,\n\ncosh", 
            "title": "Coth"
        }, 
        {
            "location": "/functions/coth/#function-coth", 
            "text": "Calculate the hyperbolic cotangent of a value,\ndefined as  coth(x) = 1 / tanh(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function coth"
        }, 
        {
            "location": "/functions/coth/#syntax", 
            "text": "coth(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/coth/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/coth/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic cotangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/coth/#examples", 
            "text": "// coth(x) = 1 / tanh(x)\ncoth(2);         // returns 1.0373147207275482\n1 / tanh(2);     // returns 1.0373147207275482", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/coth/#see-also", 
            "text": "sinh , tanh , cosh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/createUnit/", 
            "text": "Function createUnit\n\n\nCreate a user-defined unit and register it with the Unit type.\n\n\nSyntax\n\n\ncreateUnit({\n  baseUnit1: {\n    aliases: [string, ...]\n    prefixes: object\n  },\n  unit2: {\n    definition: string,\n    aliases: [string, ...]\n    prefixes: object,\n    offset: number\n  },\n  unit3: string    // Shortcut\n})\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nThe name of the new unit. Must be unique. Example: 'knot'\n\n\n\n\n\n\ndefinition\n\n\nstring, Unit\n\n\nDefinition of the unit in terms of existing units. For example, '0.514444444 m / s'.\n\n\n\n\n\n\noptions\n\n\nObject\n\n\n(optional) An object containing any of the following properties:\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUnit\n\n\nThe new unit\n\n\n\n\n\n\n\n\nExamples\n\n\ncreateUnit('foo');\ncreateUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts]});\ncreateUnit('mph', '1 mile/hour');\n\n\n\n\nSee also\n\n\nunit", 
            "title": "createUnit"
        }, 
        {
            "location": "/functions/createUnit/#function-createunit", 
            "text": "Create a user-defined unit and register it with the Unit type.", 
            "title": "Function createUnit"
        }, 
        {
            "location": "/functions/createUnit/#syntax", 
            "text": "createUnit({\n  baseUnit1: {\n    aliases: [string, ...]\n    prefixes: object\n  },\n  unit2: {\n    definition: string,\n    aliases: [string, ...]\n    prefixes: object,\n    offset: number\n  },\n  unit3: string    // Shortcut\n})", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/createUnit/#parameters", 
            "text": "Parameter  Type  Description      name  string  The name of the new unit. Must be unique. Example: 'knot'    definition  string, Unit  Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.    options  Object  (optional) An object containing any of the following properties:", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/createUnit/#returns", 
            "text": "Type  Description      Unit  The new unit", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/createUnit/#examples", 
            "text": "createUnit('foo');\ncreateUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts]});\ncreateUnit('mph', '1 mile/hour');", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/createUnit/#see-also", 
            "text": "unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cross/", 
            "text": "Function cross\n\n\nCalculate the cross product for two vectors in three dimensional space.\nThe cross product of \nA = [a1, a2, a3]\n and \nB =[b1, b2, b3]\n is defined\nas:\n\n\ncross(A, B) = [\n     a2 * b3 - a3 * b2,\n     a3 * b1 - a1 * b3,\n     a1 * b2 - a2 * b1\n   ]\n\n\nSyntax\n\n\ncross(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nFirst vector\n\n\n\n\n\n\ny\n\n\nArray \n Matrix\n\n\nSecond vector\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nReturns the cross product of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\ncross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]\ncross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]\ncross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]\n\n\n\n\nSee also\n\n\ndot\n,\n\nmultiply", 
            "title": "Cross"
        }, 
        {
            "location": "/functions/cross/#function-cross", 
            "text": "Calculate the cross product for two vectors in three dimensional space.\nThe cross product of  A = [a1, a2, a3]  and  B =[b1, b2, b3]  is defined\nas:  cross(A, B) = [\n     a2 * b3 - a3 * b2,\n     a3 * b1 - a1 * b3,\n     a1 * b2 - a2 * b1\n   ]", 
            "title": "Function cross"
        }, 
        {
            "location": "/functions/cross/#syntax", 
            "text": "cross(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cross/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix  First vector    y  Array   Matrix  Second vector", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cross/#returns", 
            "text": "Type  Description      Array   Matrix  Returns the cross product of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cross/#examples", 
            "text": "cross([1, 1, 0],  [0, 1, 1]);  // Returns [1, -1, 1]\ncross([3, -3, 1], [4, 9, 2]);  // Returns [-15, -2, 39]\ncross([2, 3, 4],  [5, 6, 7]);  // Returns [-3, 6, -3]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cross/#see-also", 
            "text": "dot , multiply", 
            "title": "See also"
        }, 
        {
            "location": "/functions/csc/", 
            "text": "Function csc\n\n\nCalculate the cosecant of a value, defined as \ncsc(x) = 1/sin(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncsc(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nCosecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\ncsc(2);      // returns number 1.099750170294617\n1 / sin(2);  // returns number 1.099750170294617\n\n\n\n\nSee also\n\n\nsin\n,\n\nsec\n,\n\ncot", 
            "title": "Csc"
        }, 
        {
            "location": "/functions/csc/#function-csc", 
            "text": "Calculate the cosecant of a value, defined as  csc(x) = 1/sin(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function csc"
        }, 
        {
            "location": "/functions/csc/#syntax", 
            "text": "csc(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/csc/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/csc/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Cosecant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/csc/#examples", 
            "text": "csc(2);      // returns number 1.099750170294617\n1 / sin(2);  // returns number 1.099750170294617", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/csc/#see-also", 
            "text": "sin , sec , cot", 
            "title": "See also"
        }, 
        {
            "location": "/functions/csch/", 
            "text": "Function csch\n\n\nCalculate the hyperbolic cosecant of a value,\ndefined as \ncsch(x) = 1 / sinh(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncsch(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic cosecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\n// csch(x) = 1/ sinh(x)\ncsch(0.5);       // returns 1.9190347513349437\n1 / sinh(0.5);   // returns 1.9190347513349437\n\n\n\n\nSee also\n\n\nsinh\n,\n\nsech\n,\n\ncoth", 
            "title": "Csch"
        }, 
        {
            "location": "/functions/csch/#function-csch", 
            "text": "Calculate the hyperbolic cosecant of a value,\ndefined as  csch(x) = 1 / sinh(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function csch"
        }, 
        {
            "location": "/functions/csch/#syntax", 
            "text": "csch(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/csch/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/csch/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic cosecant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/csch/#examples", 
            "text": "// csch(x) = 1/ sinh(x)\ncsch(0.5);       // returns 1.9190347513349437\n1 / sinh(0.5);   // returns 1.9190347513349437", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/csch/#see-also", 
            "text": "sinh , sech , coth", 
            "title": "See also"
        }, 
        {
            "location": "/functions/cube/", 
            "text": "Function cube\n\n\nCompute the cube of a value, \nx * x * x\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ncube(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nNumber for which to calculate the cube\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nCube of x\n\n\n\n\n\n\n\n\nExamples\n\n\ncube(2);            // returns number 8\npow(2, 3);          // returns number 8\ncube(4);            // returns number 64\n4 * 4 * 4;               // returns number 64\n\ncube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]\n\n\n\n\nSee also\n\n\nmultiply\n,\n\nsquare\n,\n\npow\n,\n\ncbrt", 
            "title": "Cube"
        }, 
        {
            "location": "/functions/cube/#function-cube", 
            "text": "Compute the cube of a value,  x * x * x .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function cube"
        }, 
        {
            "location": "/functions/cube/#syntax", 
            "text": "cube(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/cube/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix   Unit  Number for which to calculate the cube", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/cube/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix   Unit  Cube of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/cube/#examples", 
            "text": "cube(2);            // returns number 8\npow(2, 3);          // returns number 8\ncube(4);            // returns number 64\n4 * 4 * 4;               // returns number 64\n\ncube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/cube/#see-also", 
            "text": "multiply , square , pow , cbrt", 
            "title": "See also"
        }, 
        {
            "location": "/functions/deepEqual/", 
            "text": "Function deepEqual\n\n\nTest element wise whether two matrices are equal.\nThe function accepts both matrices and scalar values.\n\n\nSyntax\n\n\ndeepEqual(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nFirst matrix to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nSecond matrix to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nReturns true when the input matrices have the same size and each of their elements is equal.\n\n\n\n\n\n\n\n\nExamples\n\n\ndeepEqual(2, 4);   // returns false\n\na = [2, 5, 1];\nb = [2, 7, 1];\n\ndeepEqual(a, b);   // returns false\nequal(a, b);       // returns [true, false, true]\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal", 
            "title": "deepEqual"
        }, 
        {
            "location": "/functions/deepEqual/#function-deepequal", 
            "text": "Test element wise whether two matrices are equal.\nThe function accepts both matrices and scalar values.", 
            "title": "Function deepEqual"
        }, 
        {
            "location": "/functions/deepEqual/#syntax", 
            "text": "deepEqual(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/deepEqual/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  First matrix to compare    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Second matrix to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/deepEqual/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Returns true when the input matrices have the same size and each of their elements is equal.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/deepEqual/#examples", 
            "text": "deepEqual(2, 4);   // returns false\n\na = [2, 5, 1];\nb = [2, 7, 1];\n\ndeepEqual(a, b);   // returns false\nequal(a, b);       // returns [true, false, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/deepEqual/#see-also", 
            "text": "equal , unequal", 
            "title": "See also"
        }, 
        {
            "location": "/functions/det/", 
            "text": "Function det\n\n\nCalculate the determinant of a matrix.\n\n\nSyntax\n\n\ndet(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nA matrix\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nThe determinant of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\ndet([[1, 2], [3, 4]]); // returns -2\n\nvar A = [\n  [-2, 2, 3],\n  [-1, 1, 3],\n  [2, 0, -1]\n]\ndet(A); // returns 6\n\n\n\n\nSee also\n\n\ninv", 
            "title": "Det"
        }, 
        {
            "location": "/functions/det/#function-det", 
            "text": "Calculate the determinant of a matrix.", 
            "title": "Function det"
        }, 
        {
            "location": "/functions/det/#syntax", 
            "text": "det(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/det/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix  A matrix", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/det/#returns", 
            "text": "Type  Description      number  The determinant of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/det/#examples", 
            "text": "det([[1, 2], [3, 4]]); // returns -2\n\nvar A = [\n  [-2, 2, 3],\n  [-1, 1, 3],\n  [2, 0, -1]\n]\ndet(A); // returns 6", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/det/#see-also", 
            "text": "inv", 
            "title": "See also"
        }, 
        {
            "location": "/functions/diag/", 
            "text": "Function diag\n\n\nCreate a diagonal matrix or retrieve the diagonal of a matrix\n\n\nWhen \nx\n is a vector, a matrix with vector \nx\n on the diagonal will be returned.\nWhen \nx\n is a two dimensional matrix, the matrixes \nk\nth diagonal will be returned as vector.\nWhen k is positive, the values are placed on the super diagonal.\nWhen k is negative, the values are placed on the sub diagonal.\n\n\nSyntax\n\n\ndiag(X)\ndiag(X, format)\ndiag(X, k)\ndiag(X, k, format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nA two dimensional matrix or a vector\n\n\n\n\n\n\nk\n\n\nnumber \n BigNumber\n\n\nThe diagonal where the vector will be filled in or retrieved. Default value: 0.\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nThe matrix storage format. Default value: 'dense'.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array\n\n\nDiagonal matrix from input vector, or diagonal from input matrix.\n\n\n\n\n\n\n\n\nExamples\n\n\n // create a diagonal matrix\n diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n// retrieve the diagonal from a matrix\nvar a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\ndiag(a);   // returns [1, 5, 9]\n\n\n\n\nSee also\n\n\nones\n,\n\nzeros\n,\n\neye", 
            "title": "Diag"
        }, 
        {
            "location": "/functions/diag/#function-diag", 
            "text": "Create a diagonal matrix or retrieve the diagonal of a matrix  When  x  is a vector, a matrix with vector  x  on the diagonal will be returned.\nWhen  x  is a two dimensional matrix, the matrixes  k th diagonal will be returned as vector.\nWhen k is positive, the values are placed on the super diagonal.\nWhen k is negative, the values are placed on the sub diagonal.", 
            "title": "Function diag"
        }, 
        {
            "location": "/functions/diag/#syntax", 
            "text": "diag(X)\ndiag(X, format)\ndiag(X, k)\ndiag(X, k, format)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/diag/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  A two dimensional matrix or a vector    k  number   BigNumber  The diagonal where the vector will be filled in or retrieved. Default value: 0.    format  string  The matrix storage format. Default value: 'dense'.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/diag/#returns", 
            "text": "Type  Description      Matrix   Array  Diagonal matrix from input vector, or diagonal from input matrix.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/diag/#examples", 
            "text": "// create a diagonal matrix\n diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]\n diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n// retrieve the diagonal from a matrix\nvar a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\ndiag(a);   // returns [1, 5, 9]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/diag/#see-also", 
            "text": "ones , zeros , eye", 
            "title": "See also"
        }, 
        {
            "location": "/functions/distance/", 
            "text": "Function distance\n\n\nCalculates:\n   The eucledian distance between two points in 2 and 3 dimensional spaces.\n   Distance between point and a line in 2 and 3 dimensional spaces.\n   Pairwise distance between a set of 2D or 3D points\nNOTE:\n   When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n   For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x\u2212x0, y\u2212y0, z\u2212z0) = t(a, b, c)\n\n\nSyntax\n\n\ndistance([x1, y1], [x2, y2])\n distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\ndistance([x1, y1, z1], [x2, y2, z2])\ndistance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\ndistance([[A], [B], [C]...])\ndistance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\ndistance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\ndistance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\ndistance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\ndistance([x1, y1], [xCoeffLine, yCoeffLine, constant])\ndistance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\ndistance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\ndistance([x, y, z], [x0, y0, z0, a, b, c])\ndistance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix \n Object\n\n\nCo-ordinates of first point\n\n\n\n\n\n\ny\n\n\nArray \n Matrix \n Object\n\n\nCo-ordinates of second point\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nReturns the distance from two/three points\n\n\n\n\n\n\n\n\nExamples\n\n\ndistance([0,0], [4,4])                     // Returns 5.6569\ndistance(\n {pointOneX: 0, pointOneY: 0},\n {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\ndistance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\ndistance(\n {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\ndistance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\ndistance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\ndistance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\ndistance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\ndistance(\n {pointX: 1, pointY: 4},\n {lineOnePtX: 6, lineOnePtY: 3},\n {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\ndistance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\ndistance(\n {pointX: 2, pointY: 3, pointZ: 1},\n {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857", 
            "title": "Distance"
        }, 
        {
            "location": "/functions/distance/#function-distance", 
            "text": "Calculates:\n   The eucledian distance between two points in 2 and 3 dimensional spaces.\n   Distance between point and a line in 2 and 3 dimensional spaces.\n   Pairwise distance between a set of 2D or 3D points\nNOTE:\n   When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n   For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x\u2212x0, y\u2212y0, z\u2212z0) = t(a, b, c)", 
            "title": "Function distance"
        }, 
        {
            "location": "/functions/distance/#syntax", 
            "text": "distance([x1, y1], [x2, y2])\n distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})\ndistance([x1, y1, z1], [x2, y2, z2])\ndistance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})\ndistance([[A], [B], [C]...])\ndistance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])\ndistance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})\ndistance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])\ndistance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})\ndistance([x1, y1], [xCoeffLine, yCoeffLine, constant])\ndistance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})\ndistance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line\ndistance([x, y, z], [x0, y0, z0, a, b, c])\ndistance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/distance/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix   Object  Co-ordinates of first point    y  Array   Matrix   Object  Co-ordinates of second point", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/distance/#returns", 
            "text": "Type  Description      Number   BigNumber  Returns the distance from two/three points", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/distance/#examples", 
            "text": "distance([0,0], [4,4])                     // Returns 5.6569\ndistance(\n {pointOneX: 0, pointOneY: 0},\n {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\ndistance([1, 0, 1], [4, -2, 2])            // Returns 3.74166\ndistance(\n {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\ndistance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\ndistance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\ndistance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\ndistance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847\ndistance(\n {pointX: 1, pointY: 4},\n {lineOnePtX: 6, lineOnePtY: 3},\n {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744\ndistance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\ndistance(\n {pointX: 2, pointY: 3, pointZ: 1},\n {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/divide/", 
            "text": "Function divide\n\n\nDivide two values, \nx / y\n.\nTo divide matrices, \nx\n is multiplied with the inverse of \ny\n: \nx * inv(y)\n.\n\n\nSyntax\n\n\ndivide(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nNumerator\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nDenominator\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nQuotient, \nx / y\n\n\n\n\n\n\n\n\nExamples\n\n\ndivide(2, 3);            // returns number 0.6666666666666666\n\nvar a = complex(5, 14);\nvar b = complex(4, 1);\ndivide(a, b);            // returns Complex 2 + 3i\n\nvar c = [[7, -6], [13, -4]];\nvar d = [[1, 2], [4, 3]];\ndivide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\nvar e = unit('18 km');\ndivide(e, 4.5);          // returns Unit 4 km\n\n\n\n\nSee also\n\n\nmultiply", 
            "title": "Divide"
        }, 
        {
            "location": "/functions/divide/#function-divide", 
            "text": "Divide two values,  x / y .\nTo divide matrices,  x  is multiplied with the inverse of  y :  x * inv(y) .", 
            "title": "Function divide"
        }, 
        {
            "location": "/functions/divide/#syntax", 
            "text": "divide(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/divide/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Numerator    y  number   BigNumber   Fraction   Complex   Array   Matrix  Denominator", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/divide/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Quotient,  x / y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/divide/#examples", 
            "text": "divide(2, 3);            // returns number 0.6666666666666666\n\nvar a = complex(5, 14);\nvar b = complex(4, 1);\ndivide(a, b);            // returns Complex 2 + 3i\n\nvar c = [[7, -6], [13, -4]];\nvar d = [[1, 2], [4, 3]];\ndivide(c, d);            // returns Array [[-9, 4], [-11, 6]]\n\nvar e = unit('18 km');\ndivide(e, 4.5);          // returns Unit 4 km", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/divide/#see-also", 
            "text": "multiply", 
            "title": "See also"
        }, 
        {
            "location": "/functions/dot/", 
            "text": "Function dot\n\n\nCalculate the dot product of two vectors. The dot product of\n\nA = [a1, a2, a3, ..., an]\n and \nB = [b1, b2, b3, ..., bn]\n is defined as:\n\n\ndot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n\n\nSyntax\n\n\ndot(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nFirst vector\n\n\n\n\n\n\ny\n\n\nArray \n Matrix\n\n\nSecond vector\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nReturns the dot product of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\ndot([2, 4, 1], [2, 2, 3]);       // returns number 15\nmultiply([2, 4, 1], [2, 2, 3]);  // returns number 15\n\n\n\n\nSee also\n\n\nmultiply\n,\n\ncross", 
            "title": "Dot"
        }, 
        {
            "location": "/functions/dot/#function-dot", 
            "text": "Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an]  and  B = [b1, b2, b3, ..., bn]  is defined as:  dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn", 
            "title": "Function dot"
        }, 
        {
            "location": "/functions/dot/#syntax", 
            "text": "dot(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/dot/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix  First vector    y  Array   Matrix  Second vector", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/dot/#returns", 
            "text": "Type  Description      number  Returns the dot product of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/dot/#examples", 
            "text": "dot([2, 4, 1], [2, 2, 3]);       // returns number 15\nmultiply([2, 4, 1], [2, 2, 3]);  // returns number 15", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/dot/#see-also", 
            "text": "multiply , cross", 
            "title": "See also"
        }, 
        {
            "location": "/functions/dotDivide/", 
            "text": "Function dotDivide\n\n\nDivide two matrices element wise. The function accepts both matrices and\nscalar values.\n\n\nSyntax\n\n\ndotDivide(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nNumerator\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nDenominator\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nQuotient, \nx ./ y\n\n\n\n\n\n\n\n\nExamples\n\n\ndotDivide(2, 4);   // returns 0.5\n\na = [[9, 5], [6, 1]];\nb = [[3, 2], [5, 2]];\n\ndotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\ndivide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]\n\n\n\n\nSee also\n\n\ndivide\n,\n\nmultiply\n,\n\ndotMultiply", 
            "title": "dotDivide"
        }, 
        {
            "location": "/functions/dotDivide/#function-dotdivide", 
            "text": "Divide two matrices element wise. The function accepts both matrices and\nscalar values.", 
            "title": "Function dotDivide"
        }, 
        {
            "location": "/functions/dotDivide/#syntax", 
            "text": "dotDivide(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/dotDivide/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Numerator    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Denominator", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/dotDivide/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Quotient,  x ./ y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/dotDivide/#examples", 
            "text": "dotDivide(2, 4);   // returns 0.5\n\na = [[9, 5], [6, 1]];\nb = [[3, 2], [5, 2]];\n\ndotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]\ndivide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/dotDivide/#see-also", 
            "text": "divide , multiply , dotMultiply", 
            "title": "See also"
        }, 
        {
            "location": "/functions/dotMultiply/", 
            "text": "Function dotMultiply\n\n\nMultiply two matrices element wise. The function accepts both matrices and\nscalar values.\n\n\nSyntax\n\n\ndotMultiply(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nLeft hand value\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nRight hand value\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nMultiplication of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\ndotMultiply(2, 4); // returns 8\n\na = [[9, 5], [6, 1]];\nb = [[3, 2], [5, 2]];\n\ndotMultiply(a, b); // returns [[27, 10], [30, 2]]\nmultiply(a, b);    // returns [[52, 28], [23, 14]]\n\n\n\n\nSee also\n\n\nmultiply\n,\n\ndivide\n,\n\ndotDivide", 
            "title": "dotMultiply"
        }, 
        {
            "location": "/functions/dotMultiply/#function-dotmultiply", 
            "text": "Multiply two matrices element wise. The function accepts both matrices and\nscalar values.", 
            "title": "Function dotMultiply"
        }, 
        {
            "location": "/functions/dotMultiply/#syntax", 
            "text": "dotMultiply(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/dotMultiply/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Left hand value    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Right hand value", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/dotMultiply/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Multiplication of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/dotMultiply/#examples", 
            "text": "dotMultiply(2, 4); // returns 8\n\na = [[9, 5], [6, 1]];\nb = [[3, 2], [5, 2]];\n\ndotMultiply(a, b); // returns [[27, 10], [30, 2]]\nmultiply(a, b);    // returns [[52, 28], [23, 14]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/dotMultiply/#see-also", 
            "text": "multiply , divide , dotDivide", 
            "title": "See also"
        }, 
        {
            "location": "/functions/dotPow/", 
            "text": "Function dotPow\n\n\nCalculates the power of x to y element wise.\n\n\nSyntax\n\n\ndotPow(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nThe base\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nThe exponent\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nThe value of \nx\n to the power \ny\n\n\n\n\n\n\n\n\nExamples\n\n\ndotPow(2, 3);            // returns number 8\n\nvar a = [[1, 2], [4, 3]];\ndotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\npow(a, 2);               // returns Array [[9, 8], [16, 17]]\n\n\n\n\nSee also\n\n\npow\n,\n\nsqrt\n,\n\nmultiply", 
            "title": "dotPow"
        }, 
        {
            "location": "/functions/dotPow/#function-dotpow", 
            "text": "Calculates the power of x to y element wise.", 
            "title": "Function dotPow"
        }, 
        {
            "location": "/functions/dotPow/#syntax", 
            "text": "dotPow(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/dotPow/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  The base    y  number   BigNumber   Complex   Unit   Array   Matrix  The exponent", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/dotPow/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Unit   Array   Matrix  The value of  x  to the power  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/dotPow/#examples", 
            "text": "dotPow(2, 3);            // returns number 8\n\nvar a = [[1, 2], [4, 3]];\ndotPow(a, 2);            // returns Array [[1, 4], [16, 9]]\npow(a, 2);               // returns Array [[9, 8], [16, 17]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/dotPow/#see-also", 
            "text": "pow , sqrt , multiply", 
            "title": "See also"
        }, 
        {
            "location": "/functions/equal/", 
            "text": "Function equal\n\n\nTest whether two values are equal.\n\n\nThe function tests whether the relative difference between x and y is\nsmaller than the configured epsilon. The function cannot be used to\ncompare values smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\nIn case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\n\n\nValues \nnull\n and \nundefined\n are compared strictly, thus \nnull\n is only\nequal to \nnull\n and nothing else, and \nundefined\n is only equal to\n\nundefined\n and nothing else.\n\n\nSyntax\n\n\nequal(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n boolean \n Complex \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n boolean \n Complex \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the compared values are equal, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nequal(2 + 2, 3);         // returns false\nequal(2 + 2, 4);         // returns true\n\nvar a = unit('50 cm');\nvar b = unit('5 m');\nequal(a, b);             // returns true\n\nvar c = [2, 5, 1];\nvar d = [2, 7, 1];\n\nequal(c, d);             // returns [true, false, true]\ndeepEqual(c, d);         // returns false\n\nequal(0, null);          // returns false\n\n\n\n\nSee also\n\n\nunequal\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\nlarger\n,\n\nlargerEq\n,\n\ncompare\n,\n\ndeepEqual", 
            "title": "Equal"
        }, 
        {
            "location": "/functions/equal/#function-equal", 
            "text": "Test whether two values are equal.  The function tests whether the relative difference between x and y is\nsmaller than the configured epsilon. The function cannot be used to\ncompare values smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.\nIn case of complex numbers, x.re must equal y.re, and x.im must equal y.im.  Values  null  and  undefined  are compared strictly, thus  null  is only\nequal to  null  and nothing else, and  undefined  is only equal to undefined  and nothing else.", 
            "title": "Function equal"
        }, 
        {
            "location": "/functions/equal/#syntax", 
            "text": "equal(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/equal/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   boolean   Complex   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   boolean   Complex   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/equal/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the compared values are equal, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/equal/#examples", 
            "text": "equal(2 + 2, 3);         // returns false\nequal(2 + 2, 4);         // returns true\n\nvar a = unit('50 cm');\nvar b = unit('5 m');\nequal(a, b);             // returns true\n\nvar c = [2, 5, 1];\nvar d = [2, 7, 1];\n\nequal(c, d);             // returns [true, false, true]\ndeepEqual(c, d);         // returns false\n\nequal(0, null);          // returns false", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/equal/#see-also", 
            "text": "unequal , smaller , smallerEq , larger , largerEq , compare , deepEqual", 
            "title": "See also"
        }, 
        {
            "location": "/functions/exp/", 
            "text": "Function exp\n\n\nCalculate the exponent of a value.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nexp(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nA number or matrix to exponentiate\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nExponent of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nexp(2);                  // returns number 7.3890560989306495\npow(e, 2);          // returns number 7.3890560989306495\nlog(exp(2));        // returns number 2\n\nexp([1, 2, 3]);\n// returns Array [\n//   2.718281828459045,\n//   7.3890560989306495,\n//   20.085536923187668\n// ]\n\n\n\n\nSee also\n\n\nlog\n,\n\npow", 
            "title": "Exp"
        }, 
        {
            "location": "/functions/exp/#function-exp", 
            "text": "Calculate the exponent of a value.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function exp"
        }, 
        {
            "location": "/functions/exp/#syntax", 
            "text": "exp(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/exp/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  A number or matrix to exponentiate", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/exp/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Exponent of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/exp/#examples", 
            "text": "exp(2);                  // returns number 7.3890560989306495\npow(e, 2);          // returns number 7.3890560989306495\nlog(exp(2));        // returns number 2\n\nexp([1, 2, 3]);\n// returns Array [\n//   2.718281828459045,\n//   7.3890560989306495,\n//   20.085536923187668\n// ]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/exp/#see-also", 
            "text": "log , pow", 
            "title": "See also"
        }, 
        {
            "location": "/functions/eye/", 
            "text": "Function eye\n\n\nCreate a 2-dimensional identity matrix with size m x n or n x n.\nThe matrix has ones on the diagonal and zeros elsewhere.\n\n\nSyntax\n\n\neye(n)\neye(n, format)\neye(m, n)\neye(m, n, format)\neye([m, n])\neye([m, n], format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\n...number \n Matrix \n Array\n\n\nThe size for the matrix\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nThe Matrix storage format\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array \n number\n\n\nA matrix with ones on the diagonal.\n\n\n\n\n\n\n\n\nExamples\n\n\neye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\neye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\neye(size(A));         // returns [[1, 0, 0], [0, 1, 0]]\n\n\n\n\nSee also\n\n\ndiag\n,\n\nones\n,\n\nzeros\n,\n\nsize\n,\n\nrange", 
            "title": "Eye"
        }, 
        {
            "location": "/functions/eye/#function-eye", 
            "text": "Create a 2-dimensional identity matrix with size m x n or n x n.\nThe matrix has ones on the diagonal and zeros elsewhere.", 
            "title": "Function eye"
        }, 
        {
            "location": "/functions/eye/#syntax", 
            "text": "eye(n)\neye(n, format)\neye(m, n)\neye(m, n, format)\neye([m, n])\neye([m, n], format)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/eye/#parameters", 
            "text": "Parameter  Type  Description      size  ...number   Matrix   Array  The size for the matrix    format  string  The Matrix storage format", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/eye/#returns", 
            "text": "Type  Description      Matrix   Array   number  A matrix with ones on the diagonal.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/eye/#examples", 
            "text": "eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\neye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\neye(size(A));         // returns [[1, 0, 0], [0, 1, 0]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/eye/#see-also", 
            "text": "diag , ones , zeros , size , range", 
            "title": "See also"
        }, 
        {
            "location": "/functions/factorial/", 
            "text": "Function factorial\n\n\nCompute the factorial of a value\n\n\nFactorial only supports an integer value as argument.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nfactorial(n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nAn integer number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nThe factorial of \nn\n\n\n\n\n\n\n\n\nExamples\n\n\nfactorial(5);    // returns 120\nfactorial(3);    // returns 6\n\n\n\n\nSee also\n\n\ncombinations\n,\n\ngamma\n,\n\npermutations", 
            "title": "Factorial"
        }, 
        {
            "location": "/functions/factorial/#function-factorial", 
            "text": "Compute the factorial of a value  Factorial only supports an integer value as argument.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function factorial"
        }, 
        {
            "location": "/functions/factorial/#syntax", 
            "text": "factorial(n)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/factorial/#parameters", 
            "text": "Parameter  Type  Description      n  number   BigNumber   Array   Matrix  An integer number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/factorial/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  The factorial of  n", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/factorial/#examples", 
            "text": "factorial(5);    // returns 120\nfactorial(3);    // returns 6", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/factorial/#see-also", 
            "text": "combinations , gamma , permutations", 
            "title": "See also"
        }, 
        {
            "location": "/functions/filter/", 
            "text": "Function filter\n\n\nFilter the items in an array or one dimensional matrix.\n\n\nSyntax\n\n\nfilter(x, test)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nA one dimensional matrix or array to filter\n\n\n\n\n\n\ntest\n\n\nFunction \n RegExp\n\n\nA function or regular expression to test items. All entries for which \ntest\n returns true are returned. When \ntest\n is a function, it is invoked with three parameters: the value of the element, the index of the element, and the matrix/array being traversed. The function must return a boolean.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array\n\n\nReturns the filtered matrix.\n\n\n\n\n\n\n\n\nExamples\n\n\nfunction isPositive (x) {\n  return x \n 0;\n}\nfilter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\nfilter([\n23\n, \nfoo\n, \n100\n, \n55\n, \nbar\n], /[0-9]+/); // returns [\n23\n, \n100\n, \n55\n]\n\n\n\n\nSee also\n\n\nforEach\n,\n\nmap\n,\n\nsort", 
            "title": "Filter"
        }, 
        {
            "location": "/functions/filter/#function-filter", 
            "text": "Filter the items in an array or one dimensional matrix.", 
            "title": "Function filter"
        }, 
        {
            "location": "/functions/filter/#syntax", 
            "text": "filter(x, test)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/filter/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  A one dimensional matrix or array to filter    test  Function   RegExp  A function or regular expression to test items. All entries for which  test  returns true are returned. When  test  is a function, it is invoked with three parameters: the value of the element, the index of the element, and the matrix/array being traversed. The function must return a boolean.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/filter/#returns", 
            "text": "Type  Description      Matrix   Array  Returns the filtered matrix.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/filter/#examples", 
            "text": "function isPositive (x) {\n  return x   0;\n}\nfilter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]\n\nfilter([ 23 ,  foo ,  100 ,  55 ,  bar ], /[0-9]+/); // returns [ 23 ,  100 ,  55 ]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/filter/#see-also", 
            "text": "forEach , map , sort", 
            "title": "See also"
        }, 
        {
            "location": "/functions/fix/", 
            "text": "Function fix\n\n\nRound a value towards zero.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nfix(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nNumber to be rounded\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nRounded value\n\n\n\n\n\n\n\n\nExamples\n\n\nfix(3.2);                // returns number 3\nfix(3.8);                // returns number 3\nfix(-4.2);               // returns number -4\nfix(-4.7);               // returns number -4\n\nvar c = complex(3.2, -2.7);\nfix(c);                  // returns Complex 3 - 2i\n\nfix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]\n\n\n\n\nSee also\n\n\nceil\n,\n\nfloor\n,\n\nround", 
            "title": "Fix"
        }, 
        {
            "location": "/functions/fix/#function-fix", 
            "text": "Round a value towards zero.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function fix"
        }, 
        {
            "location": "/functions/fix/#syntax", 
            "text": "fix(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/fix/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix  Number to be rounded", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/fix/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix  Rounded value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/fix/#examples", 
            "text": "fix(3.2);                // returns number 3\nfix(3.8);                // returns number 3\nfix(-4.2);               // returns number -4\nfix(-4.7);               // returns number -4\n\nvar c = complex(3.2, -2.7);\nfix(c);                  // returns Complex 3 - 2i\n\nfix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/fix/#see-also", 
            "text": "ceil , floor , round", 
            "title": "See also"
        }, 
        {
            "location": "/functions/flatten/", 
            "text": "Function flatten\n\n\nFlatten a multi dimensional matrix into a single dimensional matrix.\n\n\nSyntax\n\n\nflatten(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nMatrix to be flattened\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array\n\n\nReturns the flattened matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nflatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]\n\n\n\n\nSee also\n\n\nconcat\n,\n\nresize\n,\n\nsize\n,\n\nsqueeze", 
            "title": "Flatten"
        }, 
        {
            "location": "/functions/flatten/#function-flatten", 
            "text": "Flatten a multi dimensional matrix into a single dimensional matrix.", 
            "title": "Function flatten"
        }, 
        {
            "location": "/functions/flatten/#syntax", 
            "text": "flatten(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/flatten/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  Matrix to be flattened", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/flatten/#returns", 
            "text": "Type  Description      Matrix   Array  Returns the flattened matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/flatten/#examples", 
            "text": "flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/flatten/#see-also", 
            "text": "concat , resize , size , squeeze", 
            "title": "See also"
        }, 
        {
            "location": "/functions/floor/", 
            "text": "Function floor\n\n\nRound a value towards minus infinity.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nfloor(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nNumber to be rounded\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nRounded value\n\n\n\n\n\n\n\n\nExamples\n\n\nfloor(3.2);              // returns number 3\nfloor(3.8);              // returns number 3\nfloor(-4.2);             // returns number -5\nfloor(-4.7);             // returns number -5\n\nvar c = complex(3.2, -2.7);\nfloor(c);                // returns Complex 3 - 3i\n\nfloor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]\n\n\n\n\nSee also\n\n\nceil\n,\n\nfix\n,\n\nround", 
            "title": "Floor"
        }, 
        {
            "location": "/functions/floor/#function-floor", 
            "text": "Round a value towards minus infinity.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function floor"
        }, 
        {
            "location": "/functions/floor/#syntax", 
            "text": "floor(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/floor/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix  Number to be rounded", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/floor/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix  Rounded value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/floor/#examples", 
            "text": "floor(3.2);              // returns number 3\nfloor(3.8);              // returns number 3\nfloor(-4.2);             // returns number -5\nfloor(-4.7);             // returns number -5\n\nvar c = complex(3.2, -2.7);\nfloor(c);                // returns Complex 3 - 3i\n\nfloor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/floor/#see-also", 
            "text": "ceil , fix , round", 
            "title": "See also"
        }, 
        {
            "location": "/functions/fraction/", 
            "text": "Function fraction\n\n\nCreate a fraction convert a value to a fraction.\n\n\nSyntax\n\n\nfraction(numerator, denominator)\nfraction({n: numerator, d: denominator})\nfraction(matrix: Array | Matrix)         Turn all matrix entries\n                                              into fractions\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\nnumber \n string \n Fraction \n BigNumber \n Array \n Matrix\n\n\nArguments specifying the numerator and denominator of the fraction\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFraction \n Array \n Matrix\n\n\nReturns a fraction\n\n\n\n\n\n\n\n\nExamples\n\n\nfraction(1, 3);\nfraction('2/3');\nfraction({n: 2, d: 3});\nfraction([0.2, 0.25, 1.25]);\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nnumber\n,\n\nstring\n,\n\nunit", 
            "title": "Fraction"
        }, 
        {
            "location": "/functions/fraction/#function-fraction", 
            "text": "Create a fraction convert a value to a fraction.", 
            "title": "Function fraction"
        }, 
        {
            "location": "/functions/fraction/#syntax", 
            "text": "fraction(numerator, denominator)\nfraction({n: numerator, d: denominator})\nfraction(matrix: Array | Matrix)         Turn all matrix entries\n                                              into fractions", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/fraction/#parameters", 
            "text": "Parameter  Type  Description      args  number   string   Fraction   BigNumber   Array   Matrix  Arguments specifying the numerator and denominator of the fraction", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/fraction/#returns", 
            "text": "Type  Description      Fraction   Array   Matrix  Returns a fraction", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/fraction/#examples", 
            "text": "fraction(1, 3);\nfraction('2/3');\nfraction({n: 2, d: 3});\nfraction([0.2, 0.25, 1.25]);", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/fraction/#see-also", 
            "text": "bignumber , number , string , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/gamma/", 
            "text": "Function gamma\n\n\nCompute the gamma function of a value using Lanczos approximation for\nsmall values, and an extended Stirling approximation for large values.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ngamma(n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nnumber \n Array \n Matrix\n\n\nA real or complex number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nThe gamma of \nn\n\n\n\n\n\n\n\n\nExamples\n\n\ngamma(5);       // returns 24\ngamma(-0.5);    // returns -3.5449077018110335\ngamma(i);  // returns -0.15494982830180973 - 0.49801566811835596i\n\n\n\n\nSee also\n\n\ncombinations\n,\n\nfactorial\n,\n\npermutations", 
            "title": "Gamma"
        }, 
        {
            "location": "/functions/gamma/#function-gamma", 
            "text": "Compute the gamma function of a value using Lanczos approximation for\nsmall values, and an extended Stirling approximation for large values.  For matrices, the function is evaluated element wise.", 
            "title": "Function gamma"
        }, 
        {
            "location": "/functions/gamma/#syntax", 
            "text": "gamma(n)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/gamma/#parameters", 
            "text": "Parameter  Type  Description      n  number   Array   Matrix  A real or complex number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/gamma/#returns", 
            "text": "Type  Description      number   Array   Matrix  The gamma of  n", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/gamma/#examples", 
            "text": "gamma(5);       // returns 24\ngamma(-0.5);    // returns -3.5449077018110335\ngamma(i);  // returns -0.15494982830180973 - 0.49801566811835596i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/gamma/#see-also", 
            "text": "combinations , factorial , permutations", 
            "title": "See also"
        }, 
        {
            "location": "/functions/gcd/", 
            "text": "Function gcd\n\n\nCalculate the greatest common divisor for two or more values or arrays.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ngcd(a, b)\ngcd(a, b, c, ...)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... number \n BigNumber \n Fraction \n Array \n Matrix\n\n\nTwo or more integer numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nThe greatest common divisor\n\n\n\n\n\n\n\n\nExamples\n\n\ngcd(8, 12);              // returns 4\ngcd(-4, 6);              // returns 2\ngcd(25, 15, -10);        // returns 5\n\ngcd([8, -4], [12, 6]);   // returns [4, 2]\n\n\n\n\nSee also\n\n\nlcm\n,\n\nxgcd", 
            "title": "Gcd"
        }, 
        {
            "location": "/functions/gcd/#function-gcd", 
            "text": "Calculate the greatest common divisor for two or more values or arrays.  For matrices, the function is evaluated element wise.", 
            "title": "Function gcd"
        }, 
        {
            "location": "/functions/gcd/#syntax", 
            "text": "gcd(a, b)\ngcd(a, b, c, ...)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/gcd/#parameters", 
            "text": "Parameter  Type  Description      args  ... number   BigNumber   Fraction   Array   Matrix  Two or more integer numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/gcd/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Array   Matrix  The greatest common divisor", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/gcd/#examples", 
            "text": "gcd(8, 12);              // returns 4\ngcd(-4, 6);              // returns 2\ngcd(25, 15, -10);        // returns 5\n\ngcd([8, -4], [12, 6]);   // returns [4, 2]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/gcd/#see-also", 
            "text": "lcm , xgcd", 
            "title": "See also"
        }, 
        {
            "location": "/functions/hypot/", 
            "text": "Function hypot\n\n\nCalculate the hypotenusa of a list with values. The hypotenusa is defined as:\n\n\nhypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n\n\n\nFor matrix input, the hypotenusa is calculated for all values in the matrix.\n\n\nSyntax\n\n\nhypot(a, b, ...)\nhypot([a, b, c, ...])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... number \n BigNumber\n\n\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber\n\n\nReturns the hypothenusa of the input values.\n\n\n\n\n\n\n\n\nExamples\n\n\nhypot(3, 4);      // 5\nhypot(3, 4, 5);   // 7.0710678118654755\nhypot([3, 4, 5]); // 7.0710678118654755\nhypot(-2);        // 2\n\n\n\n\nSee also\n\n\nabs\n,\n\nnorm", 
            "title": "Hypot"
        }, 
        {
            "location": "/functions/hypot/#function-hypot", 
            "text": "Calculate the hypotenusa of a list with values. The hypotenusa is defined as:  hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)  For matrix input, the hypotenusa is calculated for all values in the matrix.", 
            "title": "Function hypot"
        }, 
        {
            "location": "/functions/hypot/#syntax", 
            "text": "hypot(a, b, ...)\nhypot([a, b, c, ...])", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/hypot/#parameters", 
            "text": "Parameter  Type  Description      args  ... number   BigNumber", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/hypot/#returns", 
            "text": "Type  Description      number   BigNumber  Returns the hypothenusa of the input values.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/hypot/#examples", 
            "text": "hypot(3, 4);      // 5\nhypot(3, 4, 5);   // 7.0710678118654755\nhypot([3, 4, 5]); // 7.0710678118654755\nhypot(-2);        // 2", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/hypot/#see-also", 
            "text": "abs , norm", 
            "title": "See also"
        }, 
        {
            "location": "/functions/im/", 
            "text": "Function im\n\n\nGet the imaginary part of a complex number.\nFor a complex number \na + bi\n, the function returns \nb\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nim(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nA complex number or array with complex numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nThe imaginary part of x\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = complex(2, 3);\nre(a);                     // returns number 2\nim(a);                     // returns number 3\n\nre(complex('-5.2i')); // returns number -5.2\nre(complex(2.4));     // returns number 0\n\n\n\n\nSee also\n\n\nre\n,\n\nconj\n,\n\nabs\n,\n\narg", 
            "title": "Im"
        }, 
        {
            "location": "/functions/im/#function-im", 
            "text": "Get the imaginary part of a complex number.\nFor a complex number  a + bi , the function returns  b .  For matrices, the function is evaluated element wise.", 
            "title": "Function im"
        }, 
        {
            "location": "/functions/im/#syntax", 
            "text": "im(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/im/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  A complex number or array with complex numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/im/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  The imaginary part of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/im/#examples", 
            "text": "var a = complex(2, 3);\nre(a);                     // returns number 2\nim(a);                     // returns number 3\n\nre(complex('-5.2i')); // returns number -5.2\nre(complex(2.4));     // returns number 0", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/im/#see-also", 
            "text": "re , conj , abs , arg", 
            "title": "See also"
        }, 
        {
            "location": "/functions/intersect/", 
            "text": "Function intersect\n\n\nCalculates the point of intersection of two lines in two or three dimensions\nand of a line and a plane in three dimensions. The inputs are in the form of\narrays or 1 dimensional matrices. The line intersection functions return null\nif the lines do not meet.\n\n\nNote: Fill the plane coefficients as \nx + y + z = c\n and not as \nx + y + z + c = 0\n.\n\n\nSyntax\n\n\nintersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\nintersect(endPoint1, endPoint2, planeCoefficients)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nw\n\n\nArray \n Matrix\n\n\nCo-ordinates of first end-point of first line\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nCo-ordinates of second end-point of first line\n\n\n\n\n\n\ny\n\n\nArray \n Matrix\n\n\nCo-ordinates of first end-point of second line OR Co-efficients of the plane's equation\n\n\n\n\n\n\nz\n\n\nArray \n Matrix\n\n\nCo-ordinates of second end-point of second line OR null if the calculation is for line and plane\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\nReturns the point of intersection of lines/lines-planes\n\n\n\n\n\n\n\n\nExamples\n\n\nintersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\nintersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\nintersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]", 
            "title": "Intersect"
        }, 
        {
            "location": "/functions/intersect/#function-intersect", 
            "text": "Calculates the point of intersection of two lines in two or three dimensions\nand of a line and a plane in three dimensions. The inputs are in the form of\narrays or 1 dimensional matrices. The line intersection functions return null\nif the lines do not meet.  Note: Fill the plane coefficients as  x + y + z = c  and not as  x + y + z + c = 0 .", 
            "title": "Function intersect"
        }, 
        {
            "location": "/functions/intersect/#syntax", 
            "text": "intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\nintersect(endPoint1, endPoint2, planeCoefficients)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/intersect/#parameters", 
            "text": "Parameter  Type  Description      w  Array   Matrix  Co-ordinates of first end-point of first line    x  Array   Matrix  Co-ordinates of second end-point of first line    y  Array   Matrix  Co-ordinates of first end-point of second line OR Co-efficients of the plane's equation    z  Array   Matrix  Co-ordinates of second end-point of second line OR null if the calculation is for line and plane", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/intersect/#returns", 
            "text": "Type  Description      Array  Returns the point of intersection of lines/lines-planes", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/intersect/#examples", 
            "text": "intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]\nintersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]\nintersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/inv/", 
            "text": "Function inv\n\n\nCalculate the inverse of a square matrix.\n\n\nSyntax\n\n\ninv(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nMatrix to be inversed\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nThe inverse of \nx\n.\n\n\n\n\n\n\n\n\nExamples\n\n\ninv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\ninv(4);                 // returns 0.25\n1 / 4;                       // returns 0.25\n\n\n\n\nSee also\n\n\ndet\n,\n\ntranspose", 
            "title": "Inv"
        }, 
        {
            "location": "/functions/inv/#function-inv", 
            "text": "Calculate the inverse of a square matrix.", 
            "title": "Function inv"
        }, 
        {
            "location": "/functions/inv/#syntax", 
            "text": "inv(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/inv/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Array   Matrix  Matrix to be inversed", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/inv/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  The inverse of  x .", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/inv/#examples", 
            "text": "inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]\ninv(4);                 // returns 0.25\n1 / 4;                       // returns 0.25", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/inv/#see-also", 
            "text": "det , transpose", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isInteger/", 
            "text": "Function isInteger\n\n\nTest whether a value is an integer number.\nThe function supports \nnumber\n, \nBigNumber\n, and \nFraction\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisInteger(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n contains a numeric, integer value. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisInteger(2);                     // returns true\nisInteger(0);                     // returns true\nisInteger(0.5);                   // returns false\nisInteger(bignumber(500));   // returns true\nisInteger(fraction(4));      // returns true\nisInteger('3');                   // returns true\nisInteger([3, 0.5, -2]);          // returns [true, false, true]\nisInteger(complex('2-4i');   // throws an error\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisPositive\n,\n\nisNegative\n,\n\nisZero", 
            "title": "isInteger"
        }, 
        {
            "location": "/functions/isInteger/#function-isinteger", 
            "text": "Test whether a value is an integer number.\nThe function supports  number ,  BigNumber , and  Fraction .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isInteger"
        }, 
        {
            "location": "/functions/isInteger/#syntax", 
            "text": "isInteger(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isInteger/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isInteger/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  contains a numeric, integer value. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isInteger/#examples", 
            "text": "isInteger(2);                     // returns true\nisInteger(0);                     // returns true\nisInteger(0.5);                   // returns false\nisInteger(bignumber(500));   // returns true\nisInteger(fraction(4));      // returns true\nisInteger('3');                   // returns true\nisInteger([3, 0.5, -2]);          // returns [true, false, true]\nisInteger(complex('2-4i');   // throws an error", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isInteger/#see-also", 
            "text": "isNumeric , isPositive , isNegative , isZero", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isNaN/", 
            "text": "Function isNaN\n\n\nTest whether a value is NaN (not a number).\nThe function supports types \nnumber\n, \nBigNumber\n, \nFraction\n, \nUnit\n and \nComplex\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisNaN(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Unit \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is NaN. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisNaN(3);                     // returns false\nisNaN(NaN);                   // returns true\nisNaN(0);                     // returns false\nisNaN(bignumber(NaN));   // returns true\nisNaN(bignumber(0));     // returns false\nisNaN(fraction(-2, 5));  // returns false\nisNaN('-2');                  // returns false\nisNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisNegative\n,\n\nisPositive\n,\n\nisZero\n,\n\nisInteger", 
            "title": "isNaN"
        }, 
        {
            "location": "/functions/isNaN/#function-isnan", 
            "text": "Test whether a value is NaN (not a number).\nThe function supports types  number ,  BigNumber ,  Fraction ,  Unit  and  Complex .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isNaN"
        }, 
        {
            "location": "/functions/isNaN/#syntax", 
            "text": "isNaN(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isNaN/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Unit   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isNaN/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is NaN. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isNaN/#examples", 
            "text": "isNaN(3);                     // returns false\nisNaN(NaN);                   // returns true\nisNaN(0);                     // returns false\nisNaN(bignumber(NaN));   // returns true\nisNaN(bignumber(0));     // returns false\nisNaN(fraction(-2, 5));  // returns false\nisNaN('-2');                  // returns false\nisNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isNaN/#see-also", 
            "text": "isNumeric , isNegative , isPositive , isZero , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isNegative/", 
            "text": "Function isNegative\n\n\nTest whether a value is negative: smaller than zero.\nThe function supports types \nnumber\n, \nBigNumber\n, \nFraction\n, and \nUnit\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisNegative(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Unit \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is larger than zero. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisNegative(3);                     // returns false\nisNegative(-2);                    // returns true\nisNegative(0);                     // returns false\nisNegative(-0);                    // returns false\nisNegative(bignumber(2));     // returns false\nisNegative(fraction(-2, 5));  // returns true\nisNegative('-2');                  // returns true\nisNegative([2, 0, -3]');           // returns [false, false, true]\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisPositive\n,\n\nisZero\n,\n\nisInteger", 
            "title": "isNegative"
        }, 
        {
            "location": "/functions/isNegative/#function-isnegative", 
            "text": "Test whether a value is negative: smaller than zero.\nThe function supports types  number ,  BigNumber ,  Fraction , and  Unit .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isNegative"
        }, 
        {
            "location": "/functions/isNegative/#syntax", 
            "text": "isNegative(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isNegative/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Unit   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isNegative/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is larger than zero. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isNegative/#examples", 
            "text": "isNegative(3);                     // returns false\nisNegative(-2);                    // returns true\nisNegative(0);                     // returns false\nisNegative(-0);                    // returns false\nisNegative(bignumber(2));     // returns false\nisNegative(fraction(-2, 5));  // returns true\nisNegative('-2');                  // returns true\nisNegative([2, 0, -3]');           // returns [false, false, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isNegative/#see-also", 
            "text": "isNumeric , isPositive , isZero , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isNumeric/", 
            "text": "Function isNumeric\n\n\nTest whether a value is an numeric value.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisNumeric(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\n*\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is a \nnumber\n, \nBigNumber\n, \nFraction\n, or \nboolean\n. Returns false for other types. Throws an error in case of unknown types.\n\n\n\n\n\n\n\n\nExamples\n\n\nisNumeric(2);                     // returns true\nisNumeric(0);                     // returns true\nisNumeric(bignumber(500));   // returns true\nisNumeric(fraction(4));      // returns true\nisNumeric(complex('2-4i');   // returns false\nisNumeric('3');                   // returns false\nisNumeric([2.3, 'foo', false]);   // returns [true, false, true]\n\n\n\n\nSee also\n\n\nisZero\n,\n\nisPositive\n,\n\nisNegative\n,\n\nisInteger", 
            "title": "isNumeric"
        }, 
        {
            "location": "/functions/isNumeric/#function-isnumeric", 
            "text": "Test whether a value is an numeric value.  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isNumeric"
        }, 
        {
            "location": "/functions/isNumeric/#syntax", 
            "text": "isNumeric(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isNumeric/#parameters", 
            "text": "Parameter  Type  Description      x  *  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isNumeric/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is a  number ,  BigNumber ,  Fraction , or  boolean . Returns false for other types. Throws an error in case of unknown types.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isNumeric/#examples", 
            "text": "isNumeric(2);                     // returns true\nisNumeric(0);                     // returns true\nisNumeric(bignumber(500));   // returns true\nisNumeric(fraction(4));      // returns true\nisNumeric(complex('2-4i');   // returns false\nisNumeric('3');                   // returns false\nisNumeric([2.3, 'foo', false]);   // returns [true, false, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isNumeric/#see-also", 
            "text": "isZero , isPositive , isNegative , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isPositive/", 
            "text": "Function isPositive\n\n\nTest whether a value is positive: larger than zero.\nThe function supports types \nnumber\n, \nBigNumber\n, \nFraction\n, and \nUnit\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisPositive(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Unit \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is larger than zero. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisPositive(3);                     // returns true\nisPositive(-2);                    // returns false\nisPositive(0);                     // returns false\nisPositive(-0);                    // returns false\nisPositive(0.5);                   // returns true\nisPositive(bignumber(2));     // returns true\nisPositive(fraction(-2, 5));  // returns false\nisPositive(fraction(1,3));    // returns false\nisPositive('2');                   // returns true\nisPositive([2, 0, -3]');           // returns [true, false, false]\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisZero\n,\n\nisNegative\n,\n\nisInteger", 
            "title": "isPositive"
        }, 
        {
            "location": "/functions/isPositive/#function-ispositive", 
            "text": "Test whether a value is positive: larger than zero.\nThe function supports types  number ,  BigNumber ,  Fraction , and  Unit .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isPositive"
        }, 
        {
            "location": "/functions/isPositive/#syntax", 
            "text": "isPositive(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isPositive/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Unit   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isPositive/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is larger than zero. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isPositive/#examples", 
            "text": "isPositive(3);                     // returns true\nisPositive(-2);                    // returns false\nisPositive(0);                     // returns false\nisPositive(-0);                    // returns false\nisPositive(0.5);                   // returns true\nisPositive(bignumber(2));     // returns true\nisPositive(fraction(-2, 5));  // returns false\nisPositive(fraction(1,3));    // returns false\nisPositive('2');                   // returns true\nisPositive([2, 0, -3]');           // returns [true, false, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isPositive/#see-also", 
            "text": "isNumeric , isZero , isNegative , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isPrime/", 
            "text": "Function isPrime\n\n\nTest whether a value is prime: has no divisors other than itself and one.\nThe function supports type \nnumber\n, \nbignumber\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisPrime(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is larger than zero. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisPrime(3);                     // returns true\nisPrime(-2);                    // returns false\nisPrime(0);                     // returns false\nisPrime(-0);                    // returns false\nisPrime(0.5);                   // returns false\nisPrime('2');                   // returns true\nisPrime([2, 17, 100]');           // returns [true, true, false]\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisZero\n,\n\nisNegative\n,\n\nisInteger", 
            "title": "isPrime"
        }, 
        {
            "location": "/functions/isPrime/#function-isprime", 
            "text": "Test whether a value is prime: has no divisors other than itself and one.\nThe function supports type  number ,  bignumber .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isPrime"
        }, 
        {
            "location": "/functions/isPrime/#syntax", 
            "text": "isPrime(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isPrime/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isPrime/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is larger than zero. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isPrime/#examples", 
            "text": "isPrime(3);                     // returns true\nisPrime(-2);                    // returns false\nisPrime(0);                     // returns false\nisPrime(-0);                    // returns false\nisPrime(0.5);                   // returns false\nisPrime('2');                   // returns true\nisPrime([2, 17, 100]');           // returns [true, true, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isPrime/#see-also", 
            "text": "isNumeric , isZero , isNegative , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/isZero/", 
            "text": "Function isZero\n\n\nTest whether a value is zero.\nThe function can check for zero for types \nnumber\n, \nBigNumber\n, \nFraction\n,\n\nComplex\n, and \nUnit\n.\n\n\nThe function is evaluated element-wise in case of Array or Matrix input.\n\n\nSyntax\n\n\nisZero(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Fraction \n Unit \n Array \n Matrix\n\n\nValue to be tested\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nReturns true when \nx\n is zero. Throws an error in case of an unknown data type.\n\n\n\n\n\n\n\n\nExamples\n\n\nisZero(0);                     // returns true\nisZero(2);                     // returns false\nisZero(0.5);                   // returns false\nisZero(bignumber(0));     // returns true\nisZero(fraction(0));      // returns true\nisZero(fraction(1,3));    // returns false\nisZero(complex('2 - 4i'); // returns false\nisZero(complex('0i');     // returns true\nisZero('0');                   // returns true\nisZero('2');                   // returns false\nisZero([2, 0, -3]');           // returns [false, true, false]\n\n\n\n\nSee also\n\n\nisNumeric\n,\n\nisPositive\n,\n\nisNegative\n,\n\nisInteger", 
            "title": "isZero"
        }, 
        {
            "location": "/functions/isZero/#function-iszero", 
            "text": "Test whether a value is zero.\nThe function can check for zero for types  number ,  BigNumber ,  Fraction , Complex , and  Unit .  The function is evaluated element-wise in case of Array or Matrix input.", 
            "title": "Function isZero"
        }, 
        {
            "location": "/functions/isZero/#syntax", 
            "text": "isZero(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/isZero/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Fraction   Unit   Array   Matrix  Value to be tested", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/isZero/#returns", 
            "text": "Type  Description      boolean  Returns true when  x  is zero. Throws an error in case of an unknown data type.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/isZero/#examples", 
            "text": "isZero(0);                     // returns true\nisZero(2);                     // returns false\nisZero(0.5);                   // returns false\nisZero(bignumber(0));     // returns true\nisZero(fraction(0));      // returns true\nisZero(fraction(1,3));    // returns false\nisZero(complex('2 - 4i'); // returns false\nisZero(complex('0i');     // returns true\nisZero('0');                   // returns true\nisZero('2');                   // returns false\nisZero([2, 0, -3]');           // returns [false, true, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/isZero/#see-also", 
            "text": "isNumeric , isPositive , isNegative , isInteger", 
            "title": "See also"
        }, 
        {
            "location": "/functions/kldivergence/", 
            "text": "Function kldivergence\n\n\nCalculate the Kullback-Leibler (KL) divergence  between two distributions\n\n\nSyntax\n\n\nkldivergence(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nq\n\n\nArray \n Matrix\n\n\nFirst vector\n\n\n\n\n\n\np\n\n\nArray \n Matrix\n\n\nSecond vector\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nReturns distance between q and p\n\n\n\n\n\n\n\n\nExamples\n\n\nkldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153", 
            "title": "Kldivergence"
        }, 
        {
            "location": "/functions/kldivergence/#function-kldivergence", 
            "text": "Calculate the Kullback-Leibler (KL) divergence  between two distributions", 
            "title": "Function kldivergence"
        }, 
        {
            "location": "/functions/kldivergence/#syntax", 
            "text": "kldivergence(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/kldivergence/#parameters", 
            "text": "Parameter  Type  Description      q  Array   Matrix  First vector    p  Array   Matrix  Second vector", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/kldivergence/#returns", 
            "text": "Type  Description      number  Returns distance between q and p", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/kldivergence/#examples", 
            "text": "kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/larger/", 
            "text": "Function larger\n\n\nTest whether value x is larger than y.\n\n\nThe function returns true when x is larger than y and the relative\ndifference between x and y is larger than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nlarger(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the x is larger than y, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nlarger(2, 3);             // returns false\nlarger(5, 2 + 2);         // returns true\n\nvar a = unit('5 cm');\nvar b = unit('2 inch');\nlarger(a, b);             // returns false\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\nlargerEq\n,\n\ncompare", 
            "title": "Larger"
        }, 
        {
            "location": "/functions/larger/#function-larger", 
            "text": "Test whether value x is larger than y.  The function returns true when x is larger than y and the relative\ndifference between x and y is larger than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.", 
            "title": "Function larger"
        }, 
        {
            "location": "/functions/larger/#syntax", 
            "text": "larger(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/larger/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/larger/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the x is larger than y, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/larger/#examples", 
            "text": "larger(2, 3);             // returns false\nlarger(5, 2 + 2);         // returns true\n\nvar a = unit('5 cm');\nvar b = unit('2 inch');\nlarger(a, b);             // returns false", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/larger/#see-also", 
            "text": "equal , unequal , smaller , smallerEq , largerEq , compare", 
            "title": "See also"
        }, 
        {
            "location": "/functions/largerEq/", 
            "text": "Function largerEq\n\n\nTest whether value x is larger or equal to y.\n\n\nThe function returns true when x is larger than y or the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nlargerEq(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the x is larger or equal to y, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nlarger(2, 1 + 1);         // returns false\nlargerEq(2, 1 + 1);       // returns true\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\nlarger\n,\n\ncompare", 
            "title": "largerEq"
        }, 
        {
            "location": "/functions/largerEq/#function-largereq", 
            "text": "Test whether value x is larger or equal to y.  The function returns true when x is larger than y or the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.", 
            "title": "Function largerEq"
        }, 
        {
            "location": "/functions/largerEq/#syntax", 
            "text": "largerEq(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/largerEq/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/largerEq/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the x is larger or equal to y, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/largerEq/#examples", 
            "text": "larger(2, 1 + 1);         // returns false\nlargerEq(2, 1 + 1);       // returns true", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/largerEq/#see-also", 
            "text": "equal , unequal , smaller , smallerEq , larger , compare", 
            "title": "See also"
        }, 
        {
            "location": "/functions/lcm/", 
            "text": "Function lcm\n\n\nCalculate the least common multiple for two or more values or arrays.\n\n\nlcm is defined as:\n\n\nlcm(a, b) = abs(a * b) / gcd(a, b)\n\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nlcm(a, b)\nlcm(a, b, c, ...)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... number \n BigNumber \n Array \n Matrix\n\n\nTwo or more integer numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nThe least common multiple\n\n\n\n\n\n\n\n\nExamples\n\n\nlcm(4, 6);               // returns 12\nlcm(6, 21);              // returns 42\nlcm(6, 21, 5);           // returns 210\n\nlcm([4, 6], [6, 21]);    // returns [12, 42]\n\n\n\n\nSee also\n\n\ngcd\n,\n\nxgcd", 
            "title": "Lcm"
        }, 
        {
            "location": "/functions/lcm/#function-lcm", 
            "text": "Calculate the least common multiple for two or more values or arrays.  lcm is defined as:  lcm(a, b) = abs(a * b) / gcd(a, b)  For matrices, the function is evaluated element wise.", 
            "title": "Function lcm"
        }, 
        {
            "location": "/functions/lcm/#syntax", 
            "text": "lcm(a, b)\nlcm(a, b, c, ...)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/lcm/#parameters", 
            "text": "Parameter  Type  Description      args  ... number   BigNumber   Array   Matrix  Two or more integer numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/lcm/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  The least common multiple", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/lcm/#examples", 
            "text": "lcm(4, 6);               // returns 12\nlcm(6, 21);              // returns 42\nlcm(6, 21, 5);           // returns 210\n\nlcm([4, 6], [6, 21]);    // returns [12, 42]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/lcm/#see-also", 
            "text": "gcd , xgcd", 
            "title": "See also"
        }, 
        {
            "location": "/functions/leftShift/", 
            "text": "Function leftShift\n\n\nBitwise left logical shift of a value x by y number of bits, \nx \n y\n.\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.\n\n\nSyntax\n\n\nleftShift(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nValue to be shifted\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber\n\n\nAmount of shifts\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nx\n shifted left \ny\n times\n\n\n\n\n\n\n\n\nExamples\n\n\nleftShift(1, 2);               // returns number 4\n\nleftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]\n\n\n\n\nSee also\n\n\nleftShift\n,\n\nbitNot\n,\n\nbitOr\n,\n\nbitXor\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "leftShift"
        }, 
        {
            "location": "/functions/leftShift/#function-leftshift", 
            "text": "Bitwise left logical shift of a value x by y number of bits,  x   y .\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.", 
            "title": "Function leftShift"
        }, 
        {
            "location": "/functions/leftShift/#syntax", 
            "text": "leftShift(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/leftShift/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  Value to be shifted    y  number   BigNumber  Amount of shifts", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/leftShift/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  x  shifted left  y  times", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/leftShift/#examples", 
            "text": "leftShift(1, 2);               // returns number 4\n\nleftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/leftShift/#see-also", 
            "text": "leftShift , bitNot , bitOr , bitXor , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/log/", 
            "text": "Function log\n\n\nCalculate the logarithm of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nlog(x)\nlog(x, base)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nValue for which to calculate the logarithm.\n\n\n\n\n\n\nbase\n\n\nnumber \n BigNumber \n Complex\n\n\nOptional base for the logarithm. If not provided, the natural logarithm of \nx\n is calculated. Default value: e.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nReturns the logarithm of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nlog(3.5);                  // returns 1.252762968495368\nexp(log(2.4));        // returns 2.4\n\npow(10, 4);                // returns 10000\nlog(10000, 10);            // returns 4\nlog(10000) / log(10); // returns 4\n\nlog(1024, 2);              // returns 10\npow(2, 10);                // returns 1024\n\n\n\n\nSee also\n\n\nexp\n,\n\nlog10", 
            "title": "Log"
        }, 
        {
            "location": "/functions/log/#function-log", 
            "text": "Calculate the logarithm of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function log"
        }, 
        {
            "location": "/functions/log/#syntax", 
            "text": "log(x)\nlog(x, base)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/log/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Value for which to calculate the logarithm.    base  number   BigNumber   Complex  Optional base for the logarithm. If not provided, the natural logarithm of  x  is calculated. Default value: e.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/log/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Returns the logarithm of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/log/#examples", 
            "text": "log(3.5);                  // returns 1.252762968495368\nexp(log(2.4));        // returns 2.4\n\npow(10, 4);                // returns 10000\nlog(10000, 10);            // returns 4\nlog(10000) / log(10); // returns 4\n\nlog(1024, 2);              // returns 10\npow(2, 10);                // returns 1024", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/log/#see-also", 
            "text": "exp , log10", 
            "title": "See also"
        }, 
        {
            "location": "/functions/log10/", 
            "text": "Function log10\n\n\nCalculate the 10-base logarithm of a value. This is the same as calculating \nlog(x, 10)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nlog10(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nValue for which to calculate the logarithm.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nReturns the 10-base logarithm of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nlog10(0.00001);            // returns -5\nlog10(10000);              // returns 4\nlog(10000) / log(10); // returns 4\npow(10, 4);                // returns 10000\n\n\n\n\nSee also\n\n\nexp\n,\n\nlog", 
            "title": "Log10"
        }, 
        {
            "location": "/functions/log10/#function-log10", 
            "text": "Calculate the 10-base logarithm of a value. This is the same as calculating  log(x, 10) .  For matrices, the function is evaluated element wise.", 
            "title": "Function log10"
        }, 
        {
            "location": "/functions/log10/#syntax", 
            "text": "log10(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/log10/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Value for which to calculate the logarithm.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/log10/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Returns the 10-base logarithm of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/log10/#examples", 
            "text": "log10(0.00001);            // returns -5\nlog10(10000);              // returns 4\nlog(10000) / log(10); // returns 4\npow(10, 4);                // returns 10000", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/log10/#see-also", 
            "text": "exp , log", 
            "title": "See also"
        }, 
        {
            "location": "/functions/lsolve/", 
            "text": "Function lsolve\n\n\nSolves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.\n\n\nL * x = b\n\n\nSyntax\n\n\nlsolve(L, b);\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nL\n\n\nMatrix, Array\n\n\nA N x N matrix or array (L)\n\n\n\n\n\n\nb\n\n\nMatrix, Array\n\n\nA column vector with the b values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDenseMatrix \n Array\n\n\nA column vector with the linear system solution (x)\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = lsolve(a, b);  // [[-5.5], [20]]\n\n\n\n\nSee also\n\n\nlup\n,\n\nslu\n,\n\nusolve\n,\n\nlusolve", 
            "title": "Lsolve"
        }, 
        {
            "location": "/functions/lsolve/#function-lsolve", 
            "text": "Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.  L * x = b", 
            "title": "Function lsolve"
        }, 
        {
            "location": "/functions/lsolve/#syntax", 
            "text": "lsolve(L, b);", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/lsolve/#parameters", 
            "text": "Parameter  Type  Description      L  Matrix, Array  A N x N matrix or array (L)    b  Matrix, Array  A column vector with the b values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/lsolve/#returns", 
            "text": "Type  Description      DenseMatrix   Array  A column vector with the linear system solution (x)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/lsolve/#examples", 
            "text": "var a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = lsolve(a, b);  // [[-5.5], [20]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/lsolve/#see-also", 
            "text": "lup , slu , usolve , lusolve", 
            "title": "See also"
        }, 
        {
            "location": "/functions/lup/", 
            "text": "Function lup\n\n\nCalculate the Matrix LU decomposition with partial pivoting. Matrix \nA\n is decomposed in two matrices (\nL\n, \nU\n) and a\nrow permutation vector \np\n where \nA[p,:] = L * U\n\n\nSyntax\n\n\nlup(A);\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nA\n\n\nMatrix \n Array\n\n\nA two dimensional matrix or array for which to get the LUP decomposition.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\nMatrix\n\n\nThe lower triangular matrix, the upper triangular matrix and the permutation matrix.\n\n\n\n\n\n\n\n\nExamples\n\n\nvar m = [[2, 1], [1, 4]];\nvar r = lup();\n// r = {\n//   L: [[1, 0], [0.5, 1]],\n//   U: [[2, 1], [0, 3.5]],\n//   P: [0, 1]\n// }\n\n\n\n\nSee also\n\n\nslu\n,\n\nlsolve\n,\n\nlusolve\n,\n\nusolve", 
            "title": "Lup"
        }, 
        {
            "location": "/functions/lup/#function-lup", 
            "text": "Calculate the Matrix LU decomposition with partial pivoting. Matrix  A  is decomposed in two matrices ( L ,  U ) and a\nrow permutation vector  p  where  A[p,:] = L * U", 
            "title": "Function lup"
        }, 
        {
            "location": "/functions/lup/#syntax", 
            "text": "lup(A);", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/lup/#parameters", 
            "text": "Parameter  Type  Description      A  Matrix   Array  A two dimensional matrix or array for which to get the LUP decomposition.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/lup/#returns", 
            "text": "Type  Description      Array Matrix  The lower triangular matrix, the upper triangular matrix and the permutation matrix.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/lup/#examples", 
            "text": "var m = [[2, 1], [1, 4]];\nvar r = lup();\n// r = {\n//   L: [[1, 0], [0.5, 1]],\n//   U: [[2, 1], [0, 3.5]],\n//   P: [0, 1]\n// }", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/lup/#see-also", 
            "text": "slu , lsolve , lusolve , usolve", 
            "title": "See also"
        }, 
        {
            "location": "/functions/lusolve/", 
            "text": "Function lusolve\n\n\nSolves the linear system \nA * x = b\n where \nA\n is an [n x n] matrix and \nb\n is a [n] column vector.\n\n\nSyntax\n\n\nlusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\nlusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = lup(A)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nA\n\n\nMatrix \n Array \n Object\n\n\nInvertible Matrix or the Matrix LU decomposition\n\n\n\n\n\n\nb\n\n\nMatrix \n Array\n\n\nColumn Vector\n\n\n\n\n\n\norder\n\n\nnumber\n\n\nThe Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix\n\n\n\n\n\n\nthreshold\n\n\nNumber\n\n\nPartial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDenseMatrix \n Array\n\n\nColumn vector with the solution to the linear system A * x = b\n\n\n\n\n\n\n\n\nExamples\n\n\nvar m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\nvar x = lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\nvar f = lup(m);\nvar x1 = lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\nvar x2 = lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\nvar a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = lusolve(a, b);  // [[-5.5], [20]]\n\n\n\n\nSee also\n\n\nlup\n,\n\nslu\n,\n\nlsolve\n,\n\nusolve", 
            "title": "Lusolve"
        }, 
        {
            "location": "/functions/lusolve/#function-lusolve", 
            "text": "Solves the linear system  A * x = b  where  A  is an [n x n] matrix and  b  is a [n] column vector.", 
            "title": "Function lusolve"
        }, 
        {
            "location": "/functions/lusolve/#syntax", 
            "text": "lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b\nlusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = lup(A)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/lusolve/#parameters", 
            "text": "Parameter  Type  Description      A  Matrix   Array   Object  Invertible Matrix or the Matrix LU decomposition    b  Matrix   Array  Column Vector    order  number  The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix    threshold  Number  Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/lusolve/#returns", 
            "text": "Type  Description      DenseMatrix   Array  Column vector with the solution to the linear system A * x = b", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/lusolve/#examples", 
            "text": "var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];\n\nvar x = lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]\n\nvar f = lup(m);\nvar x1 = lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]\nvar x2 = lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]\n\nvar a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = lusolve(a, b);  // [[-5.5], [20]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/lusolve/#see-also", 
            "text": "lup , slu , lsolve , usolve", 
            "title": "See also"
        }, 
        {
            "location": "/functions/matrix/", 
            "text": "Function matrix\n\n\nCreate a Matrix. The function creates a new \ntype.Matrix\n object from\nan \nArray\n. A Matrix has utility functions to manipulate the data in the\nmatrix, like getting the size and getting or setting values in the matrix.\nSupported storage formats are 'dense' and 'sparse'.\n\n\nSyntax\n\n\nmatrix()                         // creates an empty matrix using default storage format (dense).\nmatrix(data)                     // creates a matrix with initial data using default storage format (dense).\nmatrix('dense')                  // creates an empty matrix using the given storage format.\nmatrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\nmatrix(data, 'sparse')           // creates a sparse matrix with initial data.\nmatrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nArray \n Matrix\n\n\nA multi dimensional array\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nThe Matrix storage format\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix\n\n\nThe created matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nvar m = matrix([[1, 2], [3, 4]]);\nm.size();                        // Array [2, 2]\nm.resize([3, 2], 5);\nm.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\nm.get([1, 0])                    // number 3\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nnumber\n,\n\nstring\n,\n\nunit\n,\n\nsparse", 
            "title": "Matrix"
        }, 
        {
            "location": "/functions/matrix/#function-matrix", 
            "text": "Create a Matrix. The function creates a new  type.Matrix  object from\nan  Array . A Matrix has utility functions to manipulate the data in the\nmatrix, like getting the size and getting or setting values in the matrix.\nSupported storage formats are 'dense' and 'sparse'.", 
            "title": "Function matrix"
        }, 
        {
            "location": "/functions/matrix/#syntax", 
            "text": "matrix()                         // creates an empty matrix using default storage format (dense).\nmatrix(data)                     // creates a matrix with initial data using default storage format (dense).\nmatrix('dense')                  // creates an empty matrix using the given storage format.\nmatrix(data, 'dense')            // creates a matrix with initial data using the given storage format.\nmatrix(data, 'sparse')           // creates a sparse matrix with initial data.\nmatrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/matrix/#parameters", 
            "text": "Parameter  Type  Description      data  Array   Matrix  A multi dimensional array    format  string  The Matrix storage format", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/matrix/#returns", 
            "text": "Type  Description      Matrix  The created matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/matrix/#examples", 
            "text": "var m = matrix([[1, 2], [3, 4]]);\nm.size();                        // Array [2, 2]\nm.resize([3, 2], 5);\nm.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\nm.get([1, 0])                    // number 3", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/matrix/#see-also", 
            "text": "bignumber , boolean , complex , index , number , string , unit , sparse", 
            "title": "See also"
        }, 
        {
            "location": "/functions/max/", 
            "text": "Function max\n\n\nCompute the maximum value of a matrix or a  list with values.\nIn case of a multi dimensional array, the maximum of the flattened array\nwill be calculated. When \ndim\n is provided, the maximum over the selected\ndimension will be calculated. Parameter \ndim\n is zero-based.\n\n\nSyntax\n\n\nmax(a, b, c, ...)\nmax(A)\nmax(A, dim)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe maximum value\n\n\n\n\n\n\n\n\nExamples\n\n\nmax(2, 1, 4, 3);                  // returns 4\nmax([2, 1, 4, 3]);                // returns 4\n\n// maximum over a specified dimension (zero-based)\nmax([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\nmax([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\nmax(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\nmin(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmin\n,\n\nprod\n,\n\nstd\n,\n\nsum\n,\n\nvar", 
            "title": "Max"
        }, 
        {
            "location": "/functions/max/#function-max", 
            "text": "Compute the maximum value of a matrix or a  list with values.\nIn case of a multi dimensional array, the maximum of the flattened array\nwill be calculated. When  dim  is provided, the maximum over the selected\ndimension will be calculated. Parameter  dim  is zero-based.", 
            "title": "Function max"
        }, 
        {
            "location": "/functions/max/#syntax", 
            "text": "max(a, b, c, ...)\nmax(A)\nmax(A, dim)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/max/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/max/#returns", 
            "text": "Type  Description      *  The maximum value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/max/#examples", 
            "text": "max(2, 1, 4, 3);                  // returns 4\nmax([2, 1, 4, 3]);                // returns 4\n\n// maximum over a specified dimension (zero-based)\nmax([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]\nmax([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]\n\nmax(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\nmin(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/max/#see-also", 
            "text": "mean , median , min , prod , std , sum , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/mean/", 
            "text": "Function mean\n\n\nCompute the mean value of matrix or a list with values.\nIn case of a multi dimensional array, the mean of the flattened array\nwill be calculated. When \ndim\n is provided, the maximum over the selected\ndimension will be calculated. Parameter \ndim\n is zero-based.\n\n\nSyntax\n\n\nmean(a, b, c, ...)\nmean(A)\nmean(A, dim)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe mean of all values\n\n\n\n\n\n\n\n\nExamples\n\n\nmean(2, 1, 4, 3);                     // returns 2.5\nmean([1, 2.7, 3.2, 4]);               // returns 2.725\n\nmean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\nmean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]\n\n\n\n\nSee also\n\n\nmedian\n,\n\nmin\n,\n\nmax\n,\n\nsum\n,\n\nprod\n,\n\nstd\n,\n\nvar", 
            "title": "Mean"
        }, 
        {
            "location": "/functions/mean/#function-mean", 
            "text": "Compute the mean value of matrix or a list with values.\nIn case of a multi dimensional array, the mean of the flattened array\nwill be calculated. When  dim  is provided, the maximum over the selected\ndimension will be calculated. Parameter  dim  is zero-based.", 
            "title": "Function mean"
        }, 
        {
            "location": "/functions/mean/#syntax", 
            "text": "mean(a, b, c, ...)\nmean(A)\nmean(A, dim)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/mean/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/mean/#returns", 
            "text": "Type  Description      *  The mean of all values", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/mean/#examples", 
            "text": "mean(2, 1, 4, 3);                     // returns 2.5\nmean([1, 2.7, 3.2, 4]);               // returns 2.725\n\nmean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]\nmean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/mean/#see-also", 
            "text": "median , min , max , sum , prod , std , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/median/", 
            "text": "Function median\n\n\nCompute the median of a matrix or a list with values. The values are\nsorted and the middle value is returned. In case of an even number of\nvalues, the average of the two middle values is returned.\nSupported types of values are: Number, BigNumber, Unit\n\n\nIn case of a (multi dimensional) array or matrix, the median of all\nelements will be calculated.\n\n\nSyntax\n\n\nmedian(a, b, c, ...)\nmedian(A)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe median\n\n\n\n\n\n\n\n\nExamples\n\n\nmedian(5, 2, 7);        // returns 5\nmedian([3, -1, 5, 7]);  // returns 4\n\n\n\n\nSee also\n\n\nmean\n,\n\nmin\n,\n\nmax\n,\n\nsum\n,\n\nprod\n,\n\nstd\n,\n\nvar", 
            "title": "Median"
        }, 
        {
            "location": "/functions/median/#function-median", 
            "text": "Compute the median of a matrix or a list with values. The values are\nsorted and the middle value is returned. In case of an even number of\nvalues, the average of the two middle values is returned.\nSupported types of values are: Number, BigNumber, Unit  In case of a (multi dimensional) array or matrix, the median of all\nelements will be calculated.", 
            "title": "Function median"
        }, 
        {
            "location": "/functions/median/#syntax", 
            "text": "median(a, b, c, ...)\nmedian(A)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/median/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/median/#returns", 
            "text": "Type  Description      *  The median", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/median/#examples", 
            "text": "median(5, 2, 7);        // returns 5\nmedian([3, -1, 5, 7]);  // returns 4", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/median/#see-also", 
            "text": "mean , min , max , sum , prod , std , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/min/", 
            "text": "Function min\n\n\nCompute the maximum value of a matrix or a  list of values.\nIn case of a multi dimensional array, the maximum of the flattened array\nwill be calculated. When \ndim\n is provided, the maximum over the selected\ndimension will be calculated. Parameter \ndim\n is zero-based.\n\n\nSyntax\n\n\nmin(a, b, c, ...)\nmin(A)\nmin(A, dim)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe minimum value\n\n\n\n\n\n\n\n\nExamples\n\n\nmin(2, 1, 4, 3);                  // returns 1\nmin([2, 1, 4, 3]);                // returns 1\n\n// maximum over a specified dimension (zero-based)\nmin([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\nmin([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\nmax(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\nmin(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmax\n,\n\nprod\n,\n\nstd\n,\n\nsum\n,\n\nvar", 
            "title": "Min"
        }, 
        {
            "location": "/functions/min/#function-min", 
            "text": "Compute the maximum value of a matrix or a  list of values.\nIn case of a multi dimensional array, the maximum of the flattened array\nwill be calculated. When  dim  is provided, the maximum over the selected\ndimension will be calculated. Parameter  dim  is zero-based.", 
            "title": "Function min"
        }, 
        {
            "location": "/functions/min/#syntax", 
            "text": "min(a, b, c, ...)\nmin(A)\nmin(A, dim)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/min/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/min/#returns", 
            "text": "Type  Description      *  The minimum value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/min/#examples", 
            "text": "min(2, 1, 4, 3);                  // returns 1\nmin([2, 1, 4, 3]);                // returns 1\n\n// maximum over a specified dimension (zero-based)\nmin([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]\nmin([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]\n\nmax(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1\nmin(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/min/#see-also", 
            "text": "mean , median , max , prod , std , sum , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/mod/", 
            "text": "Function mod\n\n\nCalculates the modulus, the remainder of an integer division.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nThe modulus is defined as:\n\n\nx - y * floor(x / y)\n\n\n\nSee http://en.wikipedia.org/wiki/Modulo_operation.\n\n\nSyntax\n\n\nmod(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nDividend\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nDivisor\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Array \n Matrix\n\n\nReturns the remainder of \nx\n divided by \ny\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nmod(8, 3);                // returns 2\nmod(11, 2);               // returns 1\n\nfunction isOdd(x) {\n  return mod(x, 2) != 0;\n}\n\nisOdd(2);                      // returns false\nisOdd(3);                      // returns true\n\n\n\n\nSee also\n\n\ndivide", 
            "title": "Mod"
        }, 
        {
            "location": "/functions/mod/#function-mod", 
            "text": "Calculates the modulus, the remainder of an integer division.  For matrices, the function is evaluated element wise.  The modulus is defined as:  x - y * floor(x / y)  See http://en.wikipedia.org/wiki/Modulo_operation.", 
            "title": "Function mod"
        }, 
        {
            "location": "/functions/mod/#syntax", 
            "text": "mod(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/mod/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Array   Matrix  Dividend    y  number   BigNumber   Fraction   Array   Matrix  Divisor", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/mod/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Array   Matrix  Returns the remainder of  x  divided by  y .", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/mod/#examples", 
            "text": "mod(8, 3);                // returns 2\nmod(11, 2);               // returns 1\n\nfunction isOdd(x) {\n  return mod(x, 2) != 0;\n}\n\nisOdd(2);                      // returns false\nisOdd(3);                      // returns true", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/mod/#see-also", 
            "text": "divide", 
            "title": "See also"
        }, 
        {
            "location": "/functions/mode/", 
            "text": "Function mode\n\n\nComputes the mode of a set of numbers or a list with values(numbers or characters).\nIf there are more than one modes, it returns a list of those values.\n\n\nSyntax\n\n\nmode(a, b, c, ...)\nmode(A)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe mode of all values\n\n\n\n\n\n\n\n\nExamples\n\n\nmode(2, 1, 4, 3, 1);                            // returns [1]\nmode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\nmode(1, 4, 6, 1, 6)                             // returns [1, 6]\nmode('a','a','b','c')                           // returns [\na\n]\nmode(1, 1.5, 'abc')                             // returns [1, 1.5, \nabc\n]\n\n\n\n\nSee also\n\n\nmedian\n,\n\n,\n\nmean", 
            "title": "Mode"
        }, 
        {
            "location": "/functions/mode/#function-mode", 
            "text": "Computes the mode of a set of numbers or a list with values(numbers or characters).\nIf there are more than one modes, it returns a list of those values.", 
            "title": "Function mode"
        }, 
        {
            "location": "/functions/mode/#syntax", 
            "text": "mode(a, b, c, ...)\nmode(A)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/mode/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/mode/#returns", 
            "text": "Type  Description      *  The mode of all values", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/mode/#examples", 
            "text": "mode(2, 1, 4, 3, 1);                            // returns [1]\nmode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]\nmode(1, 4, 6, 1, 6)                             // returns [1, 6]\nmode('a','a','b','c')                           // returns [ a ]\nmode(1, 1.5, 'abc')                             // returns [1, 1.5,  abc ]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/mode/#see-also", 
            "text": "median , , mean", 
            "title": "See also"
        }, 
        {
            "location": "/functions/multinomial/", 
            "text": "Function multinomial\n\n\nMultinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from \nn\n possibilities.\n\n\nmultinomial takes one array of integers as an argument.\nThe following condition must be enforced: every ai \n= 0\n\n\nSyntax\n\n\nmultinomial(a) // a is an array type\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nnumber[] \n BigNumber[]\n\n\nInteger numbers of objects in the subset\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nMultinomial coefficient.\n\n\n\n\n\n\n\n\nExamples\n\n\nmultinomial([1,2,1]); // returns 12\n\n\n\n\nSee also\n\n\ncombinations\n,\n\nfactorial", 
            "title": "Multinomial"
        }, 
        {
            "location": "/functions/multinomial/#function-multinomial", 
            "text": "Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from  n  possibilities.  multinomial takes one array of integers as an argument.\nThe following condition must be enforced: every ai  = 0", 
            "title": "Function multinomial"
        }, 
        {
            "location": "/functions/multinomial/#syntax", 
            "text": "multinomial(a) // a is an array type", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/multinomial/#parameters", 
            "text": "Parameter  Type  Description      a  number[]   BigNumber[]  Integer numbers of objects in the subset", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/multinomial/#returns", 
            "text": "Type  Description      Number   BigNumber  Multinomial coefficient.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/multinomial/#examples", 
            "text": "multinomial([1,2,1]); // returns 12", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/multinomial/#see-also", 
            "text": "combinations , factorial", 
            "title": "See also"
        }, 
        {
            "location": "/functions/multiply/", 
            "text": "Function multiply\n\n\nMultiply two values, \nx * y\n.\nFor matrices, the matrix product is calculated.\n\n\nSyntax\n\n\nmultiply(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to multiply\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nSecond value to multiply\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nMultiplication of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nmultiply(4, 5.2);        // returns number 20.8\n\nvar a = complex(2, 3);\nvar b = complex(4, 1);\nmultiply(a, b);          // returns Complex 5 + 14i\n\nvar c = [[1, 2], [4, 3]];\nvar d = [[1, 2, 3], [3, -4, 7]];\nmultiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\nvar e = unit('2.1 km');\nmultiply(3, e);          // returns Unit 6.3 km\n\n\n\n\nSee also\n\n\ndivide", 
            "title": "Multiply"
        }, 
        {
            "location": "/functions/multiply/#function-multiply", 
            "text": "Multiply two values,  x * y .\nFor matrices, the matrix product is calculated.", 
            "title": "Function multiply"
        }, 
        {
            "location": "/functions/multiply/#syntax", 
            "text": "multiply(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/multiply/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  First value to multiply    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Second value to multiply", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/multiply/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Multiplication of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/multiply/#examples", 
            "text": "multiply(4, 5.2);        // returns number 20.8\n\nvar a = complex(2, 3);\nvar b = complex(4, 1);\nmultiply(a, b);          // returns Complex 5 + 14i\n\nvar c = [[1, 2], [4, 3]];\nvar d = [[1, 2, 3], [3, -4, 7]];\nmultiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]\n\nvar e = unit('2.1 km');\nmultiply(3, e);          // returns Unit 6.3 km", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/multiply/#see-also", 
            "text": "divide", 
            "title": "See also"
        }, 
        {
            "location": "/functions/norm/", 
            "text": "Function norm\n\n\nCalculate the norm of a number, vector or matrix.\n\n\nThe second parameter p is optional. If not provided, it defaults to 2.\n\n\nSyntax\n\n\nnorm(x)\nnorm(x, p)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nValue for which to calculate the norm\n\n\n\n\n\n\np\n\n\nnumber \n BigNumber \n string\n\n\nVector space. Supported numbers include Infinity and -Infinity. Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm) Default value: 2.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber\n\n\nthe p-norm\n\n\n\n\n\n\n\n\nExamples\n\n\nabs(-3.5);                         // returns 3.5\nnorm(-3.5);                        // returns 3.5\n\nnorm(complex(3, -4));         // returns 5\n\nnorm([1, 2, -3], Infinity);        // returns 3\nnorm([1, 2, -3], -Infinity);       // returns 1\n\nnorm([3, 4], 2);                   // returns 5\n\nnorm([[1, 2], [3, 4]], 1)          // returns 6\nnorm([[1, 2], [3, 4]], 'inf');     // returns 7\nnorm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661\n\n\n\n\nSee also\n\n\nabs\n,\n\nhypot", 
            "title": "Norm"
        }, 
        {
            "location": "/functions/norm/#function-norm", 
            "text": "Calculate the norm of a number, vector or matrix.  The second parameter p is optional. If not provided, it defaults to 2.", 
            "title": "Function norm"
        }, 
        {
            "location": "/functions/norm/#syntax", 
            "text": "norm(x)\nnorm(x, p)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/norm/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  Value for which to calculate the norm    p  number   BigNumber   string  Vector space. Supported numbers include Infinity and -Infinity. Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm) Default value: 2.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/norm/#returns", 
            "text": "Type  Description      number   BigNumber  the p-norm", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/norm/#examples", 
            "text": "abs(-3.5);                         // returns 3.5\nnorm(-3.5);                        // returns 3.5\n\nnorm(complex(3, -4));         // returns 5\n\nnorm([1, 2, -3], Infinity);        // returns 3\nnorm([1, 2, -3], -Infinity);       // returns 1\n\nnorm([3, 4], 2);                   // returns 5\n\nnorm([[1, 2], [3, 4]], 1)          // returns 6\nnorm([[1, 2], [3, 4]], 'inf');     // returns 7\nnorm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/norm/#see-also", 
            "text": "abs , hypot", 
            "title": "See also"
        }, 
        {
            "location": "/functions/not/", 
            "text": "Function not\n\n\nLogical \nnot\n. Flips boolean value of a given parameter.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nnot(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to check\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when input is a zero or empty value.\n\n\n\n\n\n\n\n\nExamples\n\n\nnot(2);      // returns false\nnot(0);      // returns true\nnot(true);   // returns false\n\na = [2, -7, 0];\nnot(a);      // returns [false, false, true]\n\n\n\n\nSee also\n\n\nand\n,\n\nor\n,\n\nxor", 
            "title": "Not"
        }, 
        {
            "location": "/functions/not/#function-not", 
            "text": "Logical  not . Flips boolean value of a given parameter.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function not"
        }, 
        {
            "location": "/functions/not/#syntax", 
            "text": "not(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/not/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  First value to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/not/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when input is a zero or empty value.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/not/#examples", 
            "text": "not(2);      // returns false\nnot(0);      // returns true\nnot(true);   // returns false\n\na = [2, -7, 0];\nnot(a);      // returns [false, false, true]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/not/#see-also", 
            "text": "and , or , xor", 
            "title": "See also"
        }, 
        {
            "location": "/functions/nthRoot/", 
            "text": "Function nthRoot\n\n\nCalculate the nth root of a value.\nThe principal nth root of a positive real number A, is the positive real\nsolution of the equation\n\n\nx^root = A\n\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nnthRoot(a)\nnthRoot(a, root)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nnumber \n BigNumber \n Array \n Matrix \n Complex\n\n\nValue for which to calculate the nth root\n\n\n\n\n\n\nroot\n\n\nnumber \n BigNumber\n\n\nThe root. Default value: 2.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nReturns the nth root of \na\n\n\n\n\n\n\n\n\nExamples\n\n\nnthRoot(9, 2);    // returns 3, as 3^2 == 9\nsqrt(9);          // returns 3, as 3^2 == 9\nnthRoot(64, 3);   // returns 4, as 4^3 == 64\n\n\n\n\nSee also\n\n\nsqrt\n,\n\npow", 
            "title": "nthRoot"
        }, 
        {
            "location": "/functions/nthRoot/#function-nthroot", 
            "text": "Calculate the nth root of a value.\nThe principal nth root of a positive real number A, is the positive real\nsolution of the equation  x^root = A  For matrices, the function is evaluated element wise.", 
            "title": "Function nthRoot"
        }, 
        {
            "location": "/functions/nthRoot/#syntax", 
            "text": "nthRoot(a)\nnthRoot(a, root)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/nthRoot/#parameters", 
            "text": "Parameter  Type  Description      a  number   BigNumber   Array   Matrix   Complex  Value for which to calculate the nth root    root  number   BigNumber  The root. Default value: 2.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/nthRoot/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Returns the nth root of  a", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/nthRoot/#examples", 
            "text": "nthRoot(9, 2);    // returns 3, as 3^2 == 9\nsqrt(9);          // returns 3, as 3^2 == 9\nnthRoot(64, 3);   // returns 4, as 4^3 == 64", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/nthRoot/#see-also", 
            "text": "sqrt , pow", 
            "title": "See also"
        }, 
        {
            "location": "/functions/number/", 
            "text": "Function number\n\n\nCreate a number or convert a string, boolean, or unit to a number.\nWhen value is a matrix, all elements will be converted to number.\n\n\nSyntax\n\n\nnumber(value)\nnumber(unit, valuelessUnit)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nstring \n number \n BigNumber \n Fraction \n boolean \n Array \n Matrix \n Unit \n null\n\n\nValue to be converted\n\n\n\n\n\n\nvaluelessUnit\n\n\nUnit \n string\n\n\nA valueless unit, used to convert a unit to a number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nThe created number\n\n\n\n\n\n\n\n\nExamples\n\n\nnumber(2);                         // returns number 2\nnumber('7.2');                     // returns number 7.2\nnumber(true);                      // returns number 1\nnumber([true, false, true, true]); // returns [1, 0, 1, 1]\nnumber(unit('52cm'), 'm');    // returns 0.52\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nmatrix\n,\n\nstring\n,\n\nunit", 
            "title": "Number"
        }, 
        {
            "location": "/functions/number/#function-number", 
            "text": "Create a number or convert a string, boolean, or unit to a number.\nWhen value is a matrix, all elements will be converted to number.", 
            "title": "Function number"
        }, 
        {
            "location": "/functions/number/#syntax", 
            "text": "number(value)\nnumber(unit, valuelessUnit)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/number/#parameters", 
            "text": "Parameter  Type  Description      value  string   number   BigNumber   Fraction   boolean   Array   Matrix   Unit   null  Value to be converted    valuelessUnit  Unit   string  A valueless unit, used to convert a unit to a number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/number/#returns", 
            "text": "Type  Description      number   Array   Matrix  The created number", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/number/#examples", 
            "text": "number(2);                         // returns number 2\nnumber('7.2');                     // returns number 7.2\nnumber(true);                      // returns number 1\nnumber([true, false, true, true]); // returns [1, 0, 1, 1]\nnumber(unit('52cm'), 'm');    // returns 0.52", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/number/#see-also", 
            "text": "bignumber , boolean , complex , index , matrix , string , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/ones/", 
            "text": "Function ones\n\n\nCreate a matrix filled with ones. The created matrix can have one or\nmultiple dimensions.\n\n\nSyntax\n\n\nones(m)\nones(m, format)\nones(m, n)\nones(m, n, format)\nones([m, n])\nones([m, n], format)\nones([m, n, p, ...])\nones([m, n, p, ...], format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\n...number \n Array\n\n\nThe size of each dimension of the matrix\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nThe Matrix storage format\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix \n number\n\n\nA matrix filled with ones\n\n\n\n\n\n\n\n\nExamples\n\n\nones(3);                   // returns [1, 1, 1]\nones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\nones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nones(size(A));       // returns [[1, 1, 1], [1, 1, 1]]\n\n\n\n\nSee also\n\n\nzeros\n,\n\neye\n,\n\nsize\n,\n\nrange", 
            "title": "Ones"
        }, 
        {
            "location": "/functions/ones/#function-ones", 
            "text": "Create a matrix filled with ones. The created matrix can have one or\nmultiple dimensions.", 
            "title": "Function ones"
        }, 
        {
            "location": "/functions/ones/#syntax", 
            "text": "ones(m)\nones(m, format)\nones(m, n)\nones(m, n, format)\nones([m, n])\nones([m, n], format)\nones([m, n, p, ...])\nones([m, n, p, ...], format)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/ones/#parameters", 
            "text": "Parameter  Type  Description      size  ...number   Array  The size of each dimension of the matrix    format  string  The Matrix storage format", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/ones/#returns", 
            "text": "Type  Description      Array   Matrix   number  A matrix filled with ones", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/ones/#examples", 
            "text": "ones(3);                   // returns [1, 1, 1]\nones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]\nones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nones(size(A));       // returns [[1, 1, 1], [1, 1, 1]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/ones/#see-also", 
            "text": "zeros , eye , size , range", 
            "title": "See also"
        }, 
        {
            "location": "/functions/or/", 
            "text": "Function or\n\n\nLogical \nor\n. Test if at least one value is defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nor(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to check\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nSecond value to check\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when one of the inputs is defined with a nonzero/nonempty value.\n\n\n\n\n\n\n\n\nExamples\n\n\nor(2, 4);   // returns true\n\na = [2, 5, 0];\nb = [0, 22, 0];\nc = 0;\n\nor(a, b);   // returns [true, true, false]\nor(b, c);   // returns [false, true, false]\n\n\n\n\nSee also\n\n\nand\n,\n\nnot\n,\n\nxor", 
            "title": "Or"
        }, 
        {
            "location": "/functions/or/#function-or", 
            "text": "Logical  or . Test if at least one value is defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function or"
        }, 
        {
            "location": "/functions/or/#syntax", 
            "text": "or(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/or/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  First value to check    y  number   BigNumber   Complex   Unit   Array   Matrix  Second value to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/or/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when one of the inputs is defined with a nonzero/nonempty value.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/or/#examples", 
            "text": "or(2, 4);   // returns true\n\na = [2, 5, 0];\nb = [0, 22, 0];\nc = 0;\n\nor(a, b);   // returns [true, true, false]\nor(b, c);   // returns [false, true, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/or/#see-also", 
            "text": "and , not , xor", 
            "title": "See also"
        }, 
        {
            "location": "/functions/partitionSelect/", 
            "text": "Function partitionSelect\n\n\nPartition-based selection of an array or 1D matrix.\nWill find the kth smallest value, and mutates the input array.\nUses Quickselect.\n\n\nSyntax\n\n\npartitionSelect(x, k)\npartitionSelect(x, k, compare)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nA one dimensional matrix or array to sort\n\n\n\n\n\n\nk\n\n\nNumber\n\n\nThe kth smallest value to be retrieved; zero-based index\n\n\n\n\n\n\ncompare\n\n\nFunction \n 'asc' \n 'desc'\n\n\nAn optional comparator function. The function is called as \ncompare(a, b)\n, and must return 1 when a \n b, -1 when a \n b, and 0 when a == b. Default value: 'asc'.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nReturns the kth lowest value.\n\n\n\n\n\n\n\n\nExamples\n\n\npartitionSelect([5, 10, 1], 2);           // returns 10\npartitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\nfunction sortByLength (a, b) {\n  return a.length - b.length;\n}\npartitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'\n\n\n\n\nSee also\n\n\nsort", 
            "title": "partitionSelect"
        }, 
        {
            "location": "/functions/partitionSelect/#function-partitionselect", 
            "text": "Partition-based selection of an array or 1D matrix.\nWill find the kth smallest value, and mutates the input array.\nUses Quickselect.", 
            "title": "Function partitionSelect"
        }, 
        {
            "location": "/functions/partitionSelect/#syntax", 
            "text": "partitionSelect(x, k)\npartitionSelect(x, k, compare)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/partitionSelect/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  A one dimensional matrix or array to sort    k  Number  The kth smallest value to be retrieved; zero-based index    compare  Function   'asc'   'desc'  An optional comparator function. The function is called as  compare(a, b) , and must return 1 when a   b, -1 when a   b, and 0 when a == b. Default value: 'asc'.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/partitionSelect/#returns", 
            "text": "Type  Description      *  Returns the kth lowest value.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/partitionSelect/#examples", 
            "text": "partitionSelect([5, 10, 1], 2);           // returns 10\npartitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'\n\nfunction sortByLength (a, b) {\n  return a.length - b.length;\n}\npartitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/partitionSelect/#see-also", 
            "text": "sort", 
            "title": "See also"
        }, 
        {
            "location": "/functions/permutations/", 
            "text": "Function permutations\n\n\nCompute the number of ways of obtaining an ordered subset of \nk\n elements\nfrom a set of \nn\n elements.\n\n\nPermutations only takes integer arguments.\nThe following condition must be enforced: k \n= n.\n\n\nSyntax\n\n\npermutations(n)\npermutations(n, k)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nnumber \n BigNumber\n\n\nThe number of objects in total\n\n\n\n\n\n\nk\n\n\nnumber \n BigNumber\n\n\nThe number of objects in the subset\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber\n\n\nThe number of permutations\n\n\n\n\n\n\n\n\nExamples\n\n\npermutations(5);     // 120\npermutations(5, 3);  // 60\n\n\n\n\nSee also\n\n\ncombinations\n,\n\nfactorial", 
            "title": "Permutations"
        }, 
        {
            "location": "/functions/permutations/#function-permutations", 
            "text": "Compute the number of ways of obtaining an ordered subset of  k  elements\nfrom a set of  n  elements.  Permutations only takes integer arguments.\nThe following condition must be enforced: k  = n.", 
            "title": "Function permutations"
        }, 
        {
            "location": "/functions/permutations/#syntax", 
            "text": "permutations(n)\npermutations(n, k)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/permutations/#parameters", 
            "text": "Parameter  Type  Description      n  number   BigNumber  The number of objects in total    k  number   BigNumber  The number of objects in the subset", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/permutations/#returns", 
            "text": "Type  Description      number   BigNumber  The number of permutations", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/permutations/#examples", 
            "text": "permutations(5);     // 120\npermutations(5, 3);  // 60", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/permutations/#see-also", 
            "text": "combinations , factorial", 
            "title": "See also"
        }, 
        {
            "location": "/functions/pickRandom/", 
            "text": "Function pickRandom\n\n\nRandom pick a value from a one dimensional array.\nArray element is picked using a random function with uniform distribution.\n\n\nSyntax\n\n\npickRandom(array)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\nArray\n\n\nA one dimensional array\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nOne of the elements of the provided input array\n\n\n\n\n\n\n\n\nExamples\n\n\npickRandom([3, 6, 12, 2]);       // returns one of the values in the array\n\n\n\n\nSee also\n\n\nrandom\n,\n\nrandomInt", 
            "title": "pickRandom"
        }, 
        {
            "location": "/functions/pickRandom/#function-pickrandom", 
            "text": "Random pick a value from a one dimensional array.\nArray element is picked using a random function with uniform distribution.", 
            "title": "Function pickRandom"
        }, 
        {
            "location": "/functions/pickRandom/#syntax", 
            "text": "pickRandom(array)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/pickRandom/#parameters", 
            "text": "Parameter  Type  Description      array  Array  A one dimensional array", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/pickRandom/#returns", 
            "text": "Type  Description      number  One of the elements of the provided input array", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/pickRandom/#examples", 
            "text": "pickRandom([3, 6, 12, 2]);       // returns one of the values in the array", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/pickRandom/#see-also", 
            "text": "random , randomInt", 
            "title": "See also"
        }, 
        {
            "location": "/functions/pow/", 
            "text": "Function pow\n\n\nCalculates the power of x to y, \nx ^ y\n.\nMatrix exponentiation is supported for square matrices \nx\n, and positive\ninteger exponents \ny\n.\n\n\nFor cubic roots of negative numbers, the function returns the principal\nroot by default. In order to let the function return the real root,\njs can be configured with \nconfig({predictable: true})\n.\nTo retrieve all cubic roots of a value, use \ncbrt(x, true)\n.\n\n\nSyntax\n\n\npow(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe base\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Complex\n\n\nThe exponent\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nThe value of \nx\n to the power \ny\n\n\n\n\n\n\n\n\nExamples\n\n\npow(2, 3);               // returns number 8\n\nvar a = complex(2, 3);\npow(a, 2)                // returns Complex -5 + 12i\n\nvar b = [[1, 2], [4, 3]];\npow(b, 2);               // returns Array [[9, 8], [16, 17]]\n\n\n\n\nSee also\n\n\nmultiply\n,\n\nsqrt\n,\n\ncbrt\n,\n\nnthRoot", 
            "title": "Pow"
        }, 
        {
            "location": "/functions/pow/#function-pow", 
            "text": "Calculates the power of x to y,  x ^ y .\nMatrix exponentiation is supported for square matrices  x , and positive\ninteger exponents  y .  For cubic roots of negative numbers, the function returns the principal\nroot by default. In order to let the function return the real root,\njs can be configured with  config({predictable: true}) .\nTo retrieve all cubic roots of a value, use  cbrt(x, true) .", 
            "title": "Function pow"
        }, 
        {
            "location": "/functions/pow/#syntax", 
            "text": "pow(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/pow/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  The base    y  number   BigNumber   Complex  The exponent", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/pow/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  The value of  x  to the power  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/pow/#examples", 
            "text": "pow(2, 3);               // returns number 8\n\nvar a = complex(2, 3);\npow(a, 2)                // returns Complex -5 + 12i\n\nvar b = [[1, 2], [4, 3]];\npow(b, 2);               // returns Array [[9, 8], [16, 17]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/pow/#see-also", 
            "text": "multiply , sqrt , cbrt , nthRoot", 
            "title": "See also"
        }, 
        {
            "location": "/functions/prod/", 
            "text": "Function prod\n\n\nCompute the product of a matrix or a list with values.\nIn case of a (multi dimensional) array or matrix, the sum of all\nelements will be calculated.\n\n\nSyntax\n\n\nprod(a, b, c, ...)\nprod(A)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe product of all values\n\n\n\n\n\n\n\n\nExamples\n\n\nmultiply(2, 3);           // returns 6\nprod(2, 3);               // returns 6\nprod(2, 3, 4);            // returns 24\nprod([2, 3, 4]);          // returns 24\nprod([[2, 5], [4, 3]]);   // returns 120\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmin\n,\n\nmax\n,\n\nsum\n,\n\nstd\n,\n\nvar", 
            "title": "Prod"
        }, 
        {
            "location": "/functions/prod/#function-prod", 
            "text": "Compute the product of a matrix or a list with values.\nIn case of a (multi dimensional) array or matrix, the sum of all\nelements will be calculated.", 
            "title": "Function prod"
        }, 
        {
            "location": "/functions/prod/#syntax", 
            "text": "prod(a, b, c, ...)\nprod(A)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/prod/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/prod/#returns", 
            "text": "Type  Description      *  The product of all values", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/prod/#examples", 
            "text": "multiply(2, 3);           // returns 6\nprod(2, 3);               // returns 6\nprod(2, 3, 4);            // returns 24\nprod([2, 3, 4]);          // returns 24\nprod([[2, 5], [4, 3]]);   // returns 120", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/prod/#see-also", 
            "text": "mean , median , min , max , sum , std , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/quantileSeq/", 
            "text": "Function quantileSeq\n\n\nCompute the prob order quantile of a matrix or a list with values.\nThe sequence is sorted and the middle value is returned.\nSupported types of sequence values are: Number, BigNumber, Unit\nSupported types of probability are: Number, BigNumber\n\n\nIn case of a (multi dimensional) array or matrix, the prob order quantile\nof all elements will be calculated.\n\n\nSyntax\n\n\nquantileSeq(A, prob[, sorted])\nquantileSeq(A, [prob1, prob2, ...][, sorted])\nquantileSeq(A, N[, sorted])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nArray, Matrix\n\n\nA single matrix or Array\n\n\n\n\n\n\nprobOrN\n\n\nNumber, BigNumber, Array\n\n\nprob is the order of the quantile, while N is the amount of evenly distributed steps of probabilities; only one of these options can be provided\n\n\n\n\n\n\nsorted\n\n\nBoolean\n\n\n=false              is data sorted in ascending order\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber, BigNumber, Unit, Array\n\n\nQuantile(s)\n\n\n\n\n\n\n\n\nExamples\n\n\nquantileSeq([3, -1, 5, 7], 0.5);         // returns 4\nquantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\nquantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\nquantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4\n\n\n\n\nSee also\n\n\nmedian\n,\n\nmean\n,\n\nmin\n,\n\nmax\n,\n\nsum\n,\n\nprod\n,\n\nstd\n,\n\nvar", 
            "title": "quantileSeq"
        }, 
        {
            "location": "/functions/quantileSeq/#function-quantileseq", 
            "text": "Compute the prob order quantile of a matrix or a list with values.\nThe sequence is sorted and the middle value is returned.\nSupported types of sequence values are: Number, BigNumber, Unit\nSupported types of probability are: Number, BigNumber  In case of a (multi dimensional) array or matrix, the prob order quantile\nof all elements will be calculated.", 
            "title": "Function quantileSeq"
        }, 
        {
            "location": "/functions/quantileSeq/#syntax", 
            "text": "quantileSeq(A, prob[, sorted])\nquantileSeq(A, [prob1, prob2, ...][, sorted])\nquantileSeq(A, N[, sorted])", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/quantileSeq/#parameters", 
            "text": "Parameter  Type  Description      data  Array, Matrix  A single matrix or Array    probOrN  Number, BigNumber, Array  prob is the order of the quantile, while N is the amount of evenly distributed steps of probabilities; only one of these options can be provided    sorted  Boolean  =false              is data sorted in ascending order", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/quantileSeq/#returns", 
            "text": "Type  Description      Number, BigNumber, Unit, Array  Quantile(s)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/quantileSeq/#examples", 
            "text": "quantileSeq([3, -1, 5, 7], 0.5);         // returns 4\nquantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]\nquantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]\nquantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/quantileSeq/#see-also", 
            "text": "median , mean , min , max , sum , prod , std , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/random/", 
            "text": "Function random\n\n\nReturn a random number larger or equal to \nmin\n and smaller than \nmax\n\nusing a uniform distribution.\n\n\nSyntax\n\n\nrandom()                // generate a random number between 0 and 1\nrandom(max)             // generate a random number between 0 and max\nrandom(min, max)        // generate a random number between min and max\nrandom(size)            // generate a matrix with random numbers between 0 and 1\nrandom(size, max)       // generate a matrix with random numbers between 0 and max\nrandom(size, min, max)  // generate a matrix with random numbers between min and max\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\nArray \n Matrix\n\n\nIf provided, an array or matrix with given size and filled with random values is returned\n\n\n\n\n\n\nmin\n\n\nnumber\n\n\nMinimum boundary for the random value, included\n\n\n\n\n\n\nmax\n\n\nnumber\n\n\nMaximum boundary for the random value, excluded\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nA random number\n\n\n\n\n\n\n\n\nExamples\n\n\nrandom();       // returns a random number between 0 and 1\nrandom(100);    // returns a random number between 0 and 100\nrandom(30, 40); // returns a random number between 30 and 40\nrandom([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1\n\n\n\n\nSee also\n\n\nrandomInt\n,\n\npickRandom", 
            "title": "Random"
        }, 
        {
            "location": "/functions/random/#function-random", 
            "text": "Return a random number larger or equal to  min  and smaller than  max \nusing a uniform distribution.", 
            "title": "Function random"
        }, 
        {
            "location": "/functions/random/#syntax", 
            "text": "random()                // generate a random number between 0 and 1\nrandom(max)             // generate a random number between 0 and max\nrandom(min, max)        // generate a random number between min and max\nrandom(size)            // generate a matrix with random numbers between 0 and 1\nrandom(size, max)       // generate a matrix with random numbers between 0 and max\nrandom(size, min, max)  // generate a matrix with random numbers between min and max", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/random/#parameters", 
            "text": "Parameter  Type  Description      size  Array   Matrix  If provided, an array or matrix with given size and filled with random values is returned    min  number  Minimum boundary for the random value, included    max  number  Maximum boundary for the random value, excluded", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/random/#returns", 
            "text": "Type  Description      number   Array   Matrix  A random number", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/random/#examples", 
            "text": "random();       // returns a random number between 0 and 1\nrandom(100);    // returns a random number between 0 and 100\nrandom(30, 40); // returns a random number between 30 and 40\nrandom([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/random/#see-also", 
            "text": "randomInt , pickRandom", 
            "title": "See also"
        }, 
        {
            "location": "/functions/randomInt/", 
            "text": "Function randomInt\n\n\nReturn a random integer number larger or equal to \nmin\n and smaller than \nmax\n\nusing a uniform distribution.\n\n\nSyntax\n\n\nrandomInt(max)             // generate a random integer between 0 and max\nrandomInt(min, max)        // generate a random integer between min and max\nrandomInt(size)            // generate a matrix with random integer between 0 and 1\nrandomInt(size, max)       // generate a matrix with random integer between 0 and max\nrandomInt(size, min, max)  // generate a matrix with random integer between min and max\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\nArray \n Matrix\n\n\nIf provided, an array or matrix with given size and filled with random values is returned\n\n\n\n\n\n\nmin\n\n\nnumber\n\n\nMinimum boundary for the random value, included\n\n\n\n\n\n\nmax\n\n\nnumber\n\n\nMaximum boundary for the random value, excluded\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nA random integer value\n\n\n\n\n\n\n\n\nExamples\n\n\nrandomInt(100);    // returns a random integer between 0 and 100\nrandomInt(30, 40); // returns a random integer between 30 and 40\nrandomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1\n\n\n\n\nSee also\n\n\nrandom\n,\n\npickRandom", 
            "title": "randomInt"
        }, 
        {
            "location": "/functions/randomInt/#function-randomint", 
            "text": "Return a random integer number larger or equal to  min  and smaller than  max \nusing a uniform distribution.", 
            "title": "Function randomInt"
        }, 
        {
            "location": "/functions/randomInt/#syntax", 
            "text": "randomInt(max)             // generate a random integer between 0 and max\nrandomInt(min, max)        // generate a random integer between min and max\nrandomInt(size)            // generate a matrix with random integer between 0 and 1\nrandomInt(size, max)       // generate a matrix with random integer between 0 and max\nrandomInt(size, min, max)  // generate a matrix with random integer between min and max", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/randomInt/#parameters", 
            "text": "Parameter  Type  Description      size  Array   Matrix  If provided, an array or matrix with given size and filled with random values is returned    min  number  Minimum boundary for the random value, included    max  number  Maximum boundary for the random value, excluded", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/randomInt/#returns", 
            "text": "Type  Description      number   Array   Matrix  A random integer value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/randomInt/#examples", 
            "text": "randomInt(100);    // returns a random integer between 0 and 100\nrandomInt(30, 40); // returns a random integer between 30 and 40\nrandomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/randomInt/#see-also", 
            "text": "random , pickRandom", 
            "title": "See also"
        }, 
        {
            "location": "/functions/range/", 
            "text": "Function range\n\n\nCreate an array from a range.\nBy default, the range end is excluded. This can be customized by providing\nan extra parameter \nincludeEnd\n.\n\n\nSyntax\n\n\nrange(str [, includeEnd])               // Create a range from a string,\n                                             // where the string contains the\n                                             // start, optional step, and end,\n                                             // separated by a colon.\nrange(start, end [, includeEnd])        // Create a range with start and\n                                             // end and a step size of 1.\nrange(start, end, step [, includeEnd])  // Create a range with start, step,\n                                             // and end.\n\n\n\n\nWhere\n\n\n\n\nstr: string\n\n  A string 'start:end' or 'start:step:end'\n\n\nstart: {number | BigNumber}\n\n  Start of the range\n\n\nend: number | BigNumber\n\n  End of the range, excluded by default, included when parameter includeEnd=true\n\n\nstep: number | BigNumber\n\n  Step size. Default value is 1.\n\n\nincludeEnd: boolean\n\n  Option to specify whether to include the end or not. False by default.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n*\n\n\nParameters describing the ranges \nstart\n, \nend\n, and optional \nstep\n.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nrange\n\n\n\n\n\n\n\n\nExamples\n\n\nrange(2, 6);        // [2, 3, 4, 5]\nrange(2, -3, -1);   // [2, 1, 0, -1, -2]\nrange('2:1:6');     // [2, 3, 4, 5]\nrange(2, 6, true);  // [2, 3, 4, 5, 6]\n\n\n\n\nSee also\n\n\nones\n,\n\nzeros\n,\n\nsize\n,\n\nsubset", 
            "title": "Range"
        }, 
        {
            "location": "/functions/range/#function-range", 
            "text": "Create an array from a range.\nBy default, the range end is excluded. This can be customized by providing\nan extra parameter  includeEnd .", 
            "title": "Function range"
        }, 
        {
            "location": "/functions/range/#syntax", 
            "text": "range(str [, includeEnd])               // Create a range from a string,\n                                             // where the string contains the\n                                             // start, optional step, and end,\n                                             // separated by a colon.\nrange(start, end [, includeEnd])        // Create a range with start and\n                                             // end and a step size of 1.\nrange(start, end, step [, includeEnd])  // Create a range with start, step,\n                                             // and end.", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/range/#where", 
            "text": "str: string \n  A string 'start:end' or 'start:step:end'  start: {number | BigNumber} \n  Start of the range  end: number | BigNumber \n  End of the range, excluded by default, included when parameter includeEnd=true  step: number | BigNumber \n  Step size. Default value is 1.  includeEnd: boolean \n  Option to specify whether to include the end or not. False by default.", 
            "title": "Where"
        }, 
        {
            "location": "/functions/range/#parameters", 
            "text": "Parameter  Type  Description      args  *  Parameters describing the ranges  start ,  end , and optional  step .", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/range/#returns", 
            "text": "Type  Description      Array   Matrix  range", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/range/#examples", 
            "text": "range(2, 6);        // [2, 3, 4, 5]\nrange(2, -3, -1);   // [2, 1, 0, -1, -2]\nrange('2:1:6');     // [2, 3, 4, 5]\nrange(2, 6, true);  // [2, 3, 4, 5, 6]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/range/#see-also", 
            "text": "ones , zeros , size , subset", 
            "title": "See also"
        }, 
        {
            "location": "/functions/re/", 
            "text": "Function re\n\n\nGet the real part of a complex number.\nFor a complex number \na + bi\n, the function returns \na\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nre(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nA complex number or array with complex numbers\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nThe real part of x\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = complex(2, 3);\nre(a);                     // returns number 2\nim(a);                     // returns number 3\n\nre(complex('-5.2i')); // returns number 0\nre(complex(2.4));     // returns number 2.4\n\n\n\n\nSee also\n\n\nim\n,\n\nconj\n,\n\nabs\n,\n\narg", 
            "title": "Re"
        }, 
        {
            "location": "/functions/re/#function-re", 
            "text": "Get the real part of a complex number.\nFor a complex number  a + bi , the function returns  a .  For matrices, the function is evaluated element wise.", 
            "title": "Function re"
        }, 
        {
            "location": "/functions/re/#syntax", 
            "text": "re(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/re/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix  A complex number or array with complex numbers", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/re/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  The real part of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/re/#examples", 
            "text": "var a = complex(2, 3);\nre(a);                     // returns number 2\nim(a);                     // returns number 3\n\nre(complex('-5.2i')); // returns number 0\nre(complex(2.4));     // returns number 2.4", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/re/#see-also", 
            "text": "im , conj , abs , arg", 
            "title": "See also"
        }, 
        {
            "location": "/functions/resize/", 
            "text": "Function resize\n\n\nResize a matrix\n\n\nSyntax\n\n\nresize(x, size)\nresize(x, size, defaultValue)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix \n *\n\n\nMatrix to be resized\n\n\n\n\n\n\nsize\n\n\nArray \n Matrix\n\n\nOne dimensional array with numbers\n\n\n\n\n\n\ndefaultValue\n\n\nnumber \n string\n\n\nZero by default, except in case of a string, in that case defaultValue = ' ' Default value: 0.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n* \n Array \n Matrix\n\n\nA resized clone of matrix \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nresize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\nresize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\nresize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\nresize(\nhello\n, [8], \n!\n);    // returns string 'hello!!!'\n\n\n\n\nSee also\n\n\nsize\n,\n\nsqueeze\n,\n\nsubset", 
            "title": "Resize"
        }, 
        {
            "location": "/functions/resize/#function-resize", 
            "text": "Resize a matrix", 
            "title": "Function resize"
        }, 
        {
            "location": "/functions/resize/#syntax", 
            "text": "resize(x, size)\nresize(x, size, defaultValue)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/resize/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix   *  Matrix to be resized    size  Array   Matrix  One dimensional array with numbers    defaultValue  number   string  Zero by default, except in case of a string, in that case defaultValue = ' ' Default value: 0.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/resize/#returns", 
            "text": "Type  Description      *   Array   Matrix  A resized clone of matrix  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/resize/#examples", 
            "text": "resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]\nresize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]\nresize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]\nresize( hello , [8],  ! );    // returns string 'hello!!!'", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/resize/#see-also", 
            "text": "size , squeeze , subset", 
            "title": "See also"
        }, 
        {
            "location": "/functions/rightArithShift/", 
            "text": "Function rightArithShift\n\n\nBitwise right arithmetic shift of a value x by y number of bits, \nx \n y\n.\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.\n\n\nSyntax\n\n\nrightArithShift(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nValue to be shifted\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber\n\n\nAmount of shifts\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Array \n Matrix\n\n\nx\n sign-filled shifted right \ny\n times\n\n\n\n\n\n\n\n\nExamples\n\n\nrightArithShift(4, 2);               // returns number 1\n\nrightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]\n\n\n\n\nSee also\n\n\nbitAnd\n,\n\nbitNot\n,\n\nbitOr\n,\n\nbitXor\n,\n\nrightArithShift\n,\n\nrightLogShift", 
            "title": "rightArithShift"
        }, 
        {
            "location": "/functions/rightArithShift/#function-rightarithshift", 
            "text": "Bitwise right arithmetic shift of a value x by y number of bits,  x   y .\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.", 
            "title": "Function rightArithShift"
        }, 
        {
            "location": "/functions/rightArithShift/#syntax", 
            "text": "rightArithShift(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/rightArithShift/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Array   Matrix  Value to be shifted    y  number   BigNumber  Amount of shifts", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/rightArithShift/#returns", 
            "text": "Type  Description      number   BigNumber   Array   Matrix  x  sign-filled shifted right  y  times", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/rightArithShift/#examples", 
            "text": "rightArithShift(4, 2);               // returns number 1\n\nrightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/rightArithShift/#see-also", 
            "text": "bitAnd , bitNot , bitOr , bitXor , rightArithShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/rightLogShift/", 
            "text": "Function rightLogShift\n\n\nBitwise right logical shift of value x by y number of bits, \nx \n y\n.\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.\n\n\nSyntax\n\n\nrightLogShift(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Array \n Matrix\n\n\nValue to be shifted\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nAmount of shifts\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Array \n Matrix\n\n\nx\n zero-filled shifted right \ny\n times\n\n\n\n\n\n\n\n\nExamples\n\n\nrightLogShift(4, 2);               // returns number 1\n\nrightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]\n\n\n\n\nSee also\n\n\nbitAnd\n,\n\nbitNot\n,\n\nbitOr\n,\n\nbitXor\n,\n\nleftShift\n,\n\nrightLogShift", 
            "title": "rightLogShift"
        }, 
        {
            "location": "/functions/rightLogShift/#function-rightlogshift", 
            "text": "Bitwise right logical shift of value x by y number of bits,  x   y .\nFor matrices, the function is evaluated element wise.\nFor units, the function is evaluated on the best prefix base.", 
            "title": "Function rightLogShift"
        }, 
        {
            "location": "/functions/rightLogShift/#syntax", 
            "text": "rightLogShift(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/rightLogShift/#parameters", 
            "text": "Parameter  Type  Description      x  number   Array   Matrix  Value to be shifted    y  number  Amount of shifts", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/rightLogShift/#returns", 
            "text": "Type  Description      number   Array   Matrix  x  zero-filled shifted right  y  times", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/rightLogShift/#examples", 
            "text": "rightLogShift(4, 2);               // returns number 1\n\nrightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/rightLogShift/#see-also", 
            "text": "bitAnd , bitNot , bitOr , bitXor , leftShift , rightLogShift", 
            "title": "See also"
        }, 
        {
            "location": "/functions/round/", 
            "text": "Function round\n\n\nRound a value towards the nearest integer.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nround(x)\nround(x, n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nNumber to be rounded\n\n\n\n\n\n\nn\n\n\nnumber \n BigNumber \n Array\n\n\nNumber of decimals Default value: 0.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix\n\n\nRounded value\n\n\n\n\n\n\n\n\nExamples\n\n\nround(3.2);              // returns number 3\nround(3.8);              // returns number 4\nround(-4.2);             // returns number -4\nround(-4.7);             // returns number -5\nround(pi, 3);       // returns number 3.142\nround(123.45678, 2);     // returns number 123.46\n\nvar c = complex(3.2, -2.7);\nround(c);                // returns Complex 3 - 3i\n\nround([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]\n\n\n\n\nSee also\n\n\nceil\n,\n\nfix\n,\n\nfloor", 
            "title": "Round"
        }, 
        {
            "location": "/functions/round/#function-round", 
            "text": "Round a value towards the nearest integer.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function round"
        }, 
        {
            "location": "/functions/round/#syntax", 
            "text": "round(x)\nround(x, n)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/round/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix  Number to be rounded    n  number   BigNumber   Array  Number of decimals Default value: 0.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/round/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix  Rounded value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/round/#examples", 
            "text": "round(3.2);              // returns number 3\nround(3.8);              // returns number 4\nround(-4.2);             // returns number -4\nround(-4.7);             // returns number -5\nround(pi, 3);       // returns number 3.142\nround(123.45678, 2);     // returns number 123.46\n\nvar c = complex(3.2, -2.7);\nround(c);                // returns Complex 3 - 3i\n\nround([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/round/#see-also", 
            "text": "ceil , fix , floor", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sec/", 
            "text": "Function sec\n\n\nCalculate the secant of a value, defined as \nsec(x) = 1/cos(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsec(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nSecant of x\n\n\n\n\n\n\n\n\nExamples\n\n\nsec(2);      // returns number -2.4029979617223822\n1 / cos(2);  // returns number -2.4029979617223822\n\n\n\n\nSee also\n\n\ncos\n,\n\ncsc\n,\n\ncot", 
            "title": "Sec"
        }, 
        {
            "location": "/functions/sec/#function-sec", 
            "text": "Calculate the secant of a value, defined as  sec(x) = 1/cos(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function sec"
        }, 
        {
            "location": "/functions/sec/#syntax", 
            "text": "sec(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sec/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sec/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Secant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sec/#examples", 
            "text": "sec(2);      // returns number -2.4029979617223822\n1 / cos(2);  // returns number -2.4029979617223822", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sec/#see-also", 
            "text": "cos , csc , cot", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sech/", 
            "text": "Function sech\n\n\nCalculate the hyperbolic secant of a value,\ndefined as \nsech(x) = 1 / cosh(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsech(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n Complex \n Array \n Matrix\n\n\nHyperbolic secant of x\n\n\n\n\n\n\n\n\nExamples\n\n\n// sech(x) = 1/ cosh(x)\nsech(0.5);       // returns 0.886818883970074\n1 / cosh(0.5);   // returns 0.886818883970074\n\n\n\n\nSee also\n\n\ncosh\n,\n\ncsch\n,\n\ncoth", 
            "title": "Sech"
        }, 
        {
            "location": "/functions/sech/#function-sech", 
            "text": "Calculate the hyperbolic secant of a value,\ndefined as  sech(x) = 1 / cosh(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function sech"
        }, 
        {
            "location": "/functions/sech/#syntax", 
            "text": "sech(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sech/#parameters", 
            "text": "Parameter  Type  Description      x  number   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sech/#returns", 
            "text": "Type  Description      number   Complex   Array   Matrix  Hyperbolic secant of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sech/#examples", 
            "text": "// sech(x) = 1/ cosh(x)\nsech(0.5);       // returns 0.886818883970074\n1 / cosh(0.5);   // returns 0.886818883970074", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sech/#see-also", 
            "text": "cosh , csch , coth", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sign/", 
            "text": "Function sign\n\n\nCompute the sign of a value. The sign of a value x is:\n\n\n\n\n1 when x \n 1\n\n\n-1 when x \n 0\n\n\n0 when x == 0\n\n\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsign(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nThe number for which to determine the sign\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\ne The sign of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nsign(3.5);               // returns 1\nsign(-4.2);              // returns -1\nsign(0);                 // returns 0\n\nsign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]\n\n\n\n\nSee also\n\n\nabs", 
            "title": "Sign"
        }, 
        {
            "location": "/functions/sign/#function-sign", 
            "text": "Compute the sign of a value. The sign of a value x is:   1 when x   1  -1 when x   0  0 when x == 0   For matrices, the function is evaluated element wise.", 
            "title": "Function sign"
        }, 
        {
            "location": "/functions/sign/#syntax", 
            "text": "sign(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sign/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix   Unit  The number for which to determine the sign", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sign/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix   Unit  e The sign of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sign/#examples", 
            "text": "sign(3.5);               // returns 1\nsign(-4.2);              // returns -1\nsign(0);                 // returns 0\n\nsign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sign/#see-also", 
            "text": "abs", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sin/", 
            "text": "Function sin\n\n\nCalculate the sine of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsin(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nSine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nsin(2);                      // returns number 0.9092974268256813\nsin(pi / 4);            // returns number 0.7071067811865475\nsin(unit(90, 'deg'));   // returns number 1\nsin(unit(30, 'deg'));   // returns number 0.5\n\nvar angle = 0.2;\npow(sin(angle), 2) + pow(cos(angle), 2); // returns number ~1\n\n\n\n\nSee also\n\n\ncos\n,\n\ntan", 
            "title": "Sin"
        }, 
        {
            "location": "/functions/sin/#function-sin", 
            "text": "Calculate the sine of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function sin"
        }, 
        {
            "location": "/functions/sin/#syntax", 
            "text": "sin(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sin/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sin/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Sine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sin/#examples", 
            "text": "sin(2);                      // returns number 0.9092974268256813\nsin(pi / 4);            // returns number 0.7071067811865475\nsin(unit(90, 'deg'));   // returns number 1\nsin(unit(30, 'deg'));   // returns number 0.5\n\nvar angle = 0.2;\npow(sin(angle), 2) + pow(cos(angle), 2); // returns number ~1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sin/#see-also", 
            "text": "cos , tan", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sinh/", 
            "text": "Function sinh\n\n\nCalculate the hyperbolic sine of a value,\ndefined as \nsinh(x) = 1/2 * (exp(x) - exp(-x))\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsinh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nHyperbolic sine of x\n\n\n\n\n\n\n\n\nExamples\n\n\nsinh(0.5);       // returns number 0.5210953054937474\n\n\n\n\nSee also\n\n\ncosh\n,\n\ntanh", 
            "title": "Sinh"
        }, 
        {
            "location": "/functions/sinh/#function-sinh", 
            "text": "Calculate the hyperbolic sine of a value,\ndefined as  sinh(x) = 1/2 * (exp(x) - exp(-x)) .  For matrices, the function is evaluated element wise.", 
            "title": "Function sinh"
        }, 
        {
            "location": "/functions/sinh/#syntax", 
            "text": "sinh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sinh/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sinh/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Hyperbolic sine of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sinh/#examples", 
            "text": "sinh(0.5);       // returns number 0.5210953054937474", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sinh/#see-also", 
            "text": "cosh , tanh", 
            "title": "See also"
        }, 
        {
            "location": "/functions/size/", 
            "text": "Function size\n\n\nCalculate the size of a matrix or scalar.\n\n\nSyntax\n\n\nsize(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nboolean \n number \n Complex \n Unit \n string \n Array \n Matrix\n\n\nA matrix\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nA vector with size of \nx\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nsize(2.3);                  // returns []\nsize('hello world');        // returns [11]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nsize(A);                    // returns [2, 3]\nsize(range(1,6));      // returns [5]\n\n\n\n\nSee also\n\n\nresize\n,\n\nsqueeze\n,\n\nsubset", 
            "title": "Size"
        }, 
        {
            "location": "/functions/size/#function-size", 
            "text": "Calculate the size of a matrix or scalar.", 
            "title": "Function size"
        }, 
        {
            "location": "/functions/size/#syntax", 
            "text": "size(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/size/#parameters", 
            "text": "Parameter  Type  Description      x  boolean   number   Complex   Unit   string   Array   Matrix  A matrix", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/size/#returns", 
            "text": "Type  Description      Array   Matrix  A vector with size of  x .", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/size/#examples", 
            "text": "size(2.3);                  // returns []\nsize('hello world');        // returns [11]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nsize(A);                    // returns [2, 3]\nsize(range(1,6));      // returns [5]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/size/#see-also", 
            "text": "resize , squeeze , subset", 
            "title": "See also"
        }, 
        {
            "location": "/functions/slu/", 
            "text": "Function slu\n\n\nCalculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix \nA\n is decomposed in two matrices (\nL\n, \nU\n) and two permutation vectors (\npinv\n, \nq\n) where\n\n\nP * A * Q = L * U\n\n\nSyntax\n\n\nslu(A, order, threshold);\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nA\n\n\nSparseMatrix\n\n\nA two dimensional sparse matrix for which to get the LU decomposition.\n\n\n\n\n\n\norder\n\n\nNumber\n\n\nThe Symbolic Ordering and Analysis order: 0 - Natural ordering, no permutation vector q is returned 1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A' 2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. This is appropriatefor LU factorization of unsymmetric matrices. 3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n\n\n\n\n\n\nthreshold\n\n\nNumber\n\n\nPartial pivoting threshold (1 for partial pivoting)\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nObject\n\n\nThe lower triangular matrix, the upper triangular matrix and the permutation vectors.\n\n\n\n\n\n\n\n\nSee also\n\n\nlup\n,\n\nlsolve\n,\n\nusolve\n,\n\nlusolve", 
            "title": "Slu"
        }, 
        {
            "location": "/functions/slu/#function-slu", 
            "text": "Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix  A  is decomposed in two matrices ( L ,  U ) and two permutation vectors ( pinv ,  q ) where  P * A * Q = L * U", 
            "title": "Function slu"
        }, 
        {
            "location": "/functions/slu/#syntax", 
            "text": "slu(A, order, threshold);", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/slu/#parameters", 
            "text": "Parameter  Type  Description      A  SparseMatrix  A two dimensional sparse matrix for which to get the LU decomposition.    order  Number  The Symbolic Ordering and Analysis order: 0 - Natural ordering, no permutation vector q is returned 1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A' 2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. This is appropriatefor LU factorization of unsymmetric matrices. 3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.    threshold  Number  Partial pivoting threshold (1 for partial pivoting)", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/slu/#returns", 
            "text": "Type  Description      Object  The lower triangular matrix, the upper triangular matrix and the permutation vectors.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/slu/#see-also", 
            "text": "lup , lsolve , usolve , lusolve", 
            "title": "See also"
        }, 
        {
            "location": "/functions/smaller/", 
            "text": "Function smaller\n\n\nTest whether value x is smaller than y.\n\n\nThe function returns true when x is smaller than y and the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsmaller(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the x is smaller than y, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nsmaller(2, 3);            // returns true\nsmaller(5, 2 * 2);        // returns false\n\nvar a = unit('5 cm');\nvar b = unit('2 inch');\nsmaller(a, b);            // returns true\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal\n,\n\nsmallerEq\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\ncompare", 
            "title": "Smaller"
        }, 
        {
            "location": "/functions/smaller/#function-smaller", 
            "text": "Test whether value x is smaller than y.  The function returns true when x is smaller than y and the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.", 
            "title": "Function smaller"
        }, 
        {
            "location": "/functions/smaller/#syntax", 
            "text": "smaller(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/smaller/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/smaller/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the x is smaller than y, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/smaller/#examples", 
            "text": "smaller(2, 3);            // returns true\nsmaller(5, 2 * 2);        // returns false\n\nvar a = unit('5 cm');\nvar b = unit('2 inch');\nsmaller(a, b);            // returns true", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/smaller/#see-also", 
            "text": "equal , unequal , smallerEq , smaller , smallerEq , compare", 
            "title": "See also"
        }, 
        {
            "location": "/functions/smallerEq/", 
            "text": "Function smallerEq\n\n\nTest whether value x is smaller or equal to y.\n\n\nThe function returns true when x is smaller than y or the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsmallerEq(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Unit \n string \n Array \n Matrix\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the x is smaller than y, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nsmaller(1 + 2, 3);        // returns false\nsmallerEq(1 + 2, 3);      // returns true\n\n\n\n\nSee also\n\n\nequal\n,\n\nunequal\n,\n\nsmaller\n,\n\nlarger\n,\n\nlargerEq\n,\n\ncompare", 
            "title": "smallerEq"
        }, 
        {
            "location": "/functions/smallerEq/#function-smallereq", 
            "text": "Test whether value x is smaller or equal to y.  The function returns true when x is smaller than y or the relative\ndifference between x and y is smaller than the configured epsilon. The\nfunction cannot be used to compare values smaller than approximately 2.22e-16.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function smallerEq"
        }, 
        {
            "location": "/functions/smallerEq/#syntax", 
            "text": "smallerEq(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/smallerEq/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  First value to compare    y  number   BigNumber   Fraction   boolean   Unit   string   Array   Matrix  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/smallerEq/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the x is smaller than y, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/smallerEq/#examples", 
            "text": "smaller(1 + 2, 3);        // returns false\nsmallerEq(1 + 2, 3);      // returns true", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/smallerEq/#see-also", 
            "text": "equal , unequal , smaller , larger , largerEq , compare", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sort/", 
            "text": "Function sort\n\n\nSort the items in a matrix.\n\n\nSyntax\n\n\nsort(x)\nsort(x, compare)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nA one dimensional matrix or array to sort\n\n\n\n\n\n\ncompare\n\n\nFunction \n 'asc' \n 'desc'\n\n\nAn optional _comparator function. The function is called as \ncompare(a, b)\n, and must return 1 when a \n b, -1 when a \n b, and 0 when a == b. Default value: 'asc'.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array\n\n\nReturns the sorted matrix.\n\n\n\n\n\n\n\n\nExamples\n\n\nsort([5, 10, 1]); // returns [1, 5, 10]\nsort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\nfunction sortByLength (a, b) {\n  return a.length - b.length;\n}\nsort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']\n\n\n\n\nSee also\n\n\nfilter\n,\n\nforEach\n,\n\nmap", 
            "title": "Sort"
        }, 
        {
            "location": "/functions/sort/#function-sort", 
            "text": "Sort the items in a matrix.", 
            "title": "Function sort"
        }, 
        {
            "location": "/functions/sort/#syntax", 
            "text": "sort(x)\nsort(x, compare)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sort/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  A one dimensional matrix or array to sort    compare  Function   'asc'   'desc'  An optional _comparator function. The function is called as  compare(a, b) , and must return 1 when a   b, -1 when a   b, and 0 when a == b. Default value: 'asc'.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sort/#returns", 
            "text": "Type  Description      Matrix   Array  Returns the sorted matrix.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sort/#examples", 
            "text": "sort([5, 10, 1]); // returns [1, 5, 10]\nsort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']\n\nfunction sortByLength (a, b) {\n  return a.length - b.length;\n}\nsort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sort/#see-also", 
            "text": "filter , forEach , map", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sparse/", 
            "text": "Function sparse\n\n\nCreate a Sparse Matrix. The function creates a new \ntype.Matrix\n object from\nan \nArray\n. A Matrix has utility functions to manipulate the data in the\nmatrix, like getting the size and getting or setting values in the matrix.\n\n\nSyntax\n\n\nsparse()               // creates an empty sparse matrix.\nsparse(data)           // creates a sparse matrix with initial data.\nsparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nArray \n Matrix\n\n\nA two dimensional array\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix\n\n\nThe created matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nvar m = sparse([[1, 2], [3, 4]]);\nm.size();                        // Array [2, 2]\nm.resize([3, 2], 5);\nm.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\nm.get([1, 0])                    // number 3\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nnumber\n,\n\nstring\n,\n\nunit\n,\n\nmatrix", 
            "title": "Sparse"
        }, 
        {
            "location": "/functions/sparse/#function-sparse", 
            "text": "Create a Sparse Matrix. The function creates a new  type.Matrix  object from\nan  Array . A Matrix has utility functions to manipulate the data in the\nmatrix, like getting the size and getting or setting values in the matrix.", 
            "title": "Function sparse"
        }, 
        {
            "location": "/functions/sparse/#syntax", 
            "text": "sparse()               // creates an empty sparse matrix.\nsparse(data)           // creates a sparse matrix with initial data.\nsparse(data, 'number') // creates a sparse matrix with initial data, number datatype.", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sparse/#parameters", 
            "text": "Parameter  Type  Description      data  Array   Matrix  A two dimensional array", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sparse/#returns", 
            "text": "Type  Description      Matrix  The created matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sparse/#examples", 
            "text": "var m = sparse([[1, 2], [3, 4]]);\nm.size();                        // Array [2, 2]\nm.resize([3, 2], 5);\nm.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]\nm.get([1, 0])                    // number 3", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sparse/#see-also", 
            "text": "bignumber , boolean , complex , index , number , string , unit , matrix", 
            "title": "See also"
        }, 
        {
            "location": "/functions/splitUnit/", 
            "text": "Function splitUnit\n\n\nReturns an array of units whose sum is equal to this unit\n\n\nSyntax\n\n\nsplitUnit(unit: Unit, parts: Array.\nUnit\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparts\n\n\nArray\n\n\nAn array of strings or valueless units.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\nAn array of units.\n\n\n\n\n\n\n\n\nExamples\n\n\nsplitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n// [ 3 feet, 3.3700787401575 inch ]\n\n\n\n\nSee also\n\n\nunit", 
            "title": "splitUnit"
        }, 
        {
            "location": "/functions/splitUnit/#function-splitunit", 
            "text": "Returns an array of units whose sum is equal to this unit", 
            "title": "Function splitUnit"
        }, 
        {
            "location": "/functions/splitUnit/#syntax", 
            "text": "splitUnit(unit: Unit, parts: Array. Unit )", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/splitUnit/#parameters", 
            "text": "Parameter  Type  Description      parts  Array  An array of strings or valueless units.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/splitUnit/#returns", 
            "text": "Type  Description      Array  An array of units.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/splitUnit/#examples", 
            "text": "splitUnit(new Unit(1, 'm'), ['feet', 'inch']);\n// [ 3 feet, 3.3700787401575 inch ]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/splitUnit/#see-also", 
            "text": "unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sqrt/", 
            "text": "Function sqrt\n\n\nCalculate the square root of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsqrt(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix \n Unit\n\n\nValue for which to calculate the square root.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix \n Unit\n\n\nReturns the square root of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\nsqrt(25);                // returns 5\nsquare(5);               // returns 25\nsqrt(-4);                // returns Complex 2i\n\n\n\n\nSee also\n\n\nsquare\n,\n\nmultiply\n,\n\ncube\n,\n\ncbrt", 
            "title": "Sqrt"
        }, 
        {
            "location": "/functions/sqrt/#function-sqrt", 
            "text": "Calculate the square root of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function sqrt"
        }, 
        {
            "location": "/functions/sqrt/#syntax", 
            "text": "sqrt(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sqrt/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Array   Matrix   Unit  Value for which to calculate the square root.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sqrt/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix   Unit  Returns the square root of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sqrt/#examples", 
            "text": "sqrt(25);                // returns 5\nsquare(5);               // returns 25\nsqrt(-4);                // returns Complex 2i", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sqrt/#see-also", 
            "text": "square , multiply , cube , cbrt", 
            "title": "See also"
        }, 
        {
            "location": "/functions/square/", 
            "text": "Function square\n\n\nCompute the square of a value, \nx * x\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsquare(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nNumber for which to calculate the square\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Array \n Matrix \n Unit\n\n\nSquared value\n\n\n\n\n\n\n\n\nExamples\n\n\nsquare(2);           // returns number 4\nsquare(3);           // returns number 9\npow(3, 2);           // returns number 9\nmultiply(3, 3);      // returns number 9\n\nsquare([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]\n\n\n\n\nSee also\n\n\nmultiply\n,\n\ncube\n,\n\nsqrt\n,\n\npow", 
            "title": "Square"
        }, 
        {
            "location": "/functions/square/#function-square", 
            "text": "Compute the square of a value,  x * x .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function square"
        }, 
        {
            "location": "/functions/square/#syntax", 
            "text": "square(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/square/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Array   Matrix   Unit  Number for which to calculate the square", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/square/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Array   Matrix   Unit  Squared value", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/square/#examples", 
            "text": "square(2);           // returns number 4\nsquare(3);           // returns number 9\npow(3, 2);           // returns number 9\nmultiply(3, 3);      // returns number 9\n\nsquare([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/square/#see-also", 
            "text": "multiply , cube , sqrt , pow", 
            "title": "See also"
        }, 
        {
            "location": "/functions/squeeze/", 
            "text": "Function squeeze\n\n\nSqueeze a matrix, remove inner and outer singleton dimensions from a matrix.\n\n\nSyntax\n\n\nsqueeze(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nMatrix \n Array\n\n\nMatrix to be squeezed\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMatrix \n Array\n\n\nSqueezed matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nsqueeze([3]);           // returns 3\nsqueeze([[3]]);         // returns 3\n\nvar A = zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\nsqueeze(A);             // returns [0, 0, 0] (size 3)\n\nvar B = zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\nsqueeze(B);             // returns [0, 0, 0] (size 3)\n\n// only inner and outer dimensions are removed\nvar C = zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\nsqueeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\n\n\n\n\nSee also\n\n\nsubset", 
            "title": "Squeeze"
        }, 
        {
            "location": "/functions/squeeze/#function-squeeze", 
            "text": "Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.", 
            "title": "Function squeeze"
        }, 
        {
            "location": "/functions/squeeze/#syntax", 
            "text": "squeeze(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/squeeze/#parameters", 
            "text": "Parameter  Type  Description      x  Matrix   Array  Matrix to be squeezed", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/squeeze/#returns", 
            "text": "Type  Description      Matrix   Array  Squeezed matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/squeeze/#examples", 
            "text": "squeeze([3]);           // returns 3\nsqueeze([[3]]);         // returns 3\n\nvar A = zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)\nsqueeze(A);             // returns [0, 0, 0] (size 3)\n\nvar B = zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)\nsqueeze(B);             // returns [0, 0, 0] (size 3)\n\n// only inner and outer dimensions are removed\nvar C = zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)\nsqueeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/squeeze/#see-also", 
            "text": "subset", 
            "title": "See also"
        }, 
        {
            "location": "/functions/std/", 
            "text": "Function std\n\n\nCompute the standard deviation of a matrix or a  list with values.\nThe standard deviations is defined as the square root of the variance:\n\nstd(A) = sqrt(var(A))\n.\nIn case of a (multi dimensional) array or matrix, the standard deviation\nover all elements will be calculated.\n\n\nOptionally, the type of normalization can be specified as second\nparameter. The parameter \nnormalization\n can be one of the following values:\n\n\n\n\n'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\n\n'uncorrected'        The sum of squared errors is divided by n\n\n\n'biased'             The sum of squared errors is divided by (n + 1)\n\n\n\n\nSyntax\n\n\nstd(a, b, c, ...)\nstd(A)\nstd(A, normalization)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\nArray \n Matrix\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\nnormalization\n\n\nstring\n\n\nDetermines how to normalize the variance. Choose 'unbiased' (default), 'uncorrected', or 'biased'. Default value: 'unbiased'.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe standard deviation\n\n\n\n\n\n\n\n\nExamples\n\n\nstd(2, 4, 6);                     // returns 2\nstd([2, 4, 6, 8]);                // returns 2.581988897471611\nstd([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\nstd([2, 4, 6, 8], 'biased');      // returns 2\n\nstd([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmax\n,\n\nmin\n,\n\nprod\n,\n\nsum\n,\n\nvar", 
            "title": "Std"
        }, 
        {
            "location": "/functions/std/#function-std", 
            "text": "Compute the standard deviation of a matrix or a  list with values.\nThe standard deviations is defined as the square root of the variance: std(A) = sqrt(var(A)) .\nIn case of a (multi dimensional) array or matrix, the standard deviation\nover all elements will be calculated.  Optionally, the type of normalization can be specified as second\nparameter. The parameter  normalization  can be one of the following values:   'unbiased' (default) The sum of squared errors is divided by (n - 1)  'uncorrected'        The sum of squared errors is divided by n  'biased'             The sum of squared errors is divided by (n + 1)", 
            "title": "Function std"
        }, 
        {
            "location": "/functions/std/#syntax", 
            "text": "std(a, b, c, ...)\nstd(A)\nstd(A, normalization)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/std/#parameters", 
            "text": "Parameter  Type  Description      array  Array   Matrix  A single matrix or or multiple scalar values    normalization  string  Determines how to normalize the variance. Choose 'unbiased' (default), 'uncorrected', or 'biased'. Default value: 'unbiased'.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/std/#returns", 
            "text": "Type  Description      *  The standard deviation", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/std/#examples", 
            "text": "std(2, 4, 6);                     // returns 2\nstd([2, 4, 6, 8]);                // returns 2.581988897471611\nstd([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979\nstd([2, 4, 6, 8], 'biased');      // returns 2\n\nstd([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/std/#see-also", 
            "text": "mean , median , max , min , prod , sum , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/stirlingS2/", 
            "text": "Function stirlingS2\n\n\nThe Stirling numbers of the second kind, counts the number of ways to partition\na set of n labelled objects into k nonempty unlabelled subsets.\nstirlingS2 only takes integer arguments.\nThe following condition must be enforced: k \n= n.\n\n\nIf n = k or k = 1, then s(n,k) = 1\n\n\nSyntax\n\n\nstirlingS2(n, k)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber \n BigNumber\n\n\nTotal number of objects in the set\n\n\n\n\n\n\nk\n\n\nNumber \n BigNumber\n\n\nNumber of objects in the subset\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nNumber \n BigNumber\n\n\nS(n,k)\n\n\n\n\n\n\n\n\nExamples\n\n\nstirlingS2(5, 3); //returns 25\n\n\n\n\nSee also\n\n\nBell numbers", 
            "title": "stirlingS2"
        }, 
        {
            "location": "/functions/stirlingS2/#function-stirlings2", 
            "text": "The Stirling numbers of the second kind, counts the number of ways to partition\na set of n labelled objects into k nonempty unlabelled subsets.\nstirlingS2 only takes integer arguments.\nThe following condition must be enforced: k  = n.  If n = k or k = 1, then s(n,k) = 1", 
            "title": "Function stirlingS2"
        }, 
        {
            "location": "/functions/stirlingS2/#syntax", 
            "text": "stirlingS2(n, k)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/stirlingS2/#parameters", 
            "text": "Parameter  Type  Description      n  Number   BigNumber  Total number of objects in the set    k  Number   BigNumber  Number of objects in the subset", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/stirlingS2/#returns", 
            "text": "Type  Description      Number   BigNumber  S(n,k)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/stirlingS2/#examples", 
            "text": "stirlingS2(5, 3); //returns 25", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/stirlingS2/#see-also", 
            "text": "Bell numbers", 
            "title": "See also"
        }, 
        {
            "location": "/functions/string/", 
            "text": "Function string\n\n\nCreate a string or convert any object into a string.\nElements of Arrays and Matrices are processed element wise.\n\n\nSyntax\n\n\nstring(value)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\n* \n Array \n Matrix \n null\n\n\nA value to convert to a string\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring \n Array \n Matrix\n\n\nThe created string\n\n\n\n\n\n\n\n\nExamples\n\n\nstring(4.2);               // returns string '4.2'\nstring(complex(3, 2); // returns string '3 + 2i'\n\nvar u = unit(5, 'km');\nstring(u.to('m'));         // returns string '5000 m'\n\nstring([true, false]);     // returns ['true', 'false']\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nmatrix\n,\n\nnumber\n,\n\nunit", 
            "title": "String"
        }, 
        {
            "location": "/functions/string/#function-string", 
            "text": "Create a string or convert any object into a string.\nElements of Arrays and Matrices are processed element wise.", 
            "title": "Function string"
        }, 
        {
            "location": "/functions/string/#syntax", 
            "text": "string(value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/string/#parameters", 
            "text": "Parameter  Type  Description      value  *   Array   Matrix   null  A value to convert to a string", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/string/#returns", 
            "text": "Type  Description      string   Array   Matrix  The created string", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/string/#examples", 
            "text": "string(4.2);               // returns string '4.2'\nstring(complex(3, 2); // returns string '3 + 2i'\n\nvar u = unit(5, 'km');\nstring(u.to('m'));         // returns string '5000 m'\n\nstring([true, false]);     // returns ['true', 'false']", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/string/#see-also", 
            "text": "bignumber , boolean , complex , index , matrix , number , unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/subset/", 
            "text": "Function subset\n\n\nGet or set a subset of a matrix or string.\n\n\nSyntax\n\n\nsubset(value, index)                                // retrieve a subset\nsubset(value, index, replacement [, defaultValue])  // replace a subset\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmatrix\n\n\nArray \n Matrix \n string\n\n\nAn array, matrix, or string\n\n\n\n\n\n\nindex\n\n\nIndex\n\n\nAn index containing ranges for each dimension\n\n\n\n\n\n\nreplacement\n\n\n*\n\n\nAn array, matrix, or scalar. If provided, the subset is replaced with replacement. If not provided, the subset is returned\n\n\n\n\n\n\ndefaultValue\n\n\n*\n\n\nDefault value, filled in on new entries when the matrix is resized. If not provided, matrix elements will be left undefined. Default value: undefined.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix \n string\n\n\nEither the retrieved subset or the updated matrix.\n\n\n\n\n\n\n\n\nExamples\n\n\n// get a subset\nvar d = [[1, 2], [3, 4]];\nsubset(d, index(1, 0));        // returns 3\nsubset(d, index([0, 2], 1));   // returns [[2], [4]]\n\n// replace a subset\nvar e = [];\nvar f = subset(e, index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\nvar g = subset(f, index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]\n\n\n\n\nSee also\n\n\nsize\n,\n\nresize\n,\n\nsqueeze\n,\n\nindex", 
            "title": "Subset"
        }, 
        {
            "location": "/functions/subset/#function-subset", 
            "text": "Get or set a subset of a matrix or string.", 
            "title": "Function subset"
        }, 
        {
            "location": "/functions/subset/#syntax", 
            "text": "subset(value, index)                                // retrieve a subset\nsubset(value, index, replacement [, defaultValue])  // replace a subset", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/subset/#parameters", 
            "text": "Parameter  Type  Description      matrix  Array   Matrix   string  An array, matrix, or string    index  Index  An index containing ranges for each dimension    replacement  *  An array, matrix, or scalar. If provided, the subset is replaced with replacement. If not provided, the subset is returned    defaultValue  *  Default value, filled in on new entries when the matrix is resized. If not provided, matrix elements will be left undefined. Default value: undefined.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/subset/#returns", 
            "text": "Type  Description      Array   Matrix   string  Either the retrieved subset or the updated matrix.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/subset/#examples", 
            "text": "// get a subset\nvar d = [[1, 2], [3, 4]];\nsubset(d, index(1, 0));        // returns 3\nsubset(d, index([0, 2], 1));   // returns [[2], [4]]\n\n// replace a subset\nvar e = [];\nvar f = subset(e, index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]\nvar g = subset(f, index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/subset/#see-also", 
            "text": "size , resize , squeeze , index", 
            "title": "See also"
        }, 
        {
            "location": "/functions/subtract/", 
            "text": "Function subtract\n\n\nSubtract two values, \nx - y\n.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nsubtract(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nInitial value\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nValue to subtract from \nx\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nSubtraction of \nx\n and \ny\n\n\n\n\n\n\n\n\nExamples\n\n\nsubtract(5.3, 2);        // returns number 3.3\n\nvar a = complex(2, 3);\nvar b = complex(4, 1);\nsubtract(a, b);          // returns Complex -2 + 2i\n\nsubtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\nvar c = unit('2.1 km');\nvar d = unit('500m');\nsubtract(c, d);          // returns Unit 1.6 km\n\n\n\n\nSee also\n\n\nadd", 
            "title": "Subtract"
        }, 
        {
            "location": "/functions/subtract/#function-subtract", 
            "text": "Subtract two values,  x - y .\nFor matrices, the function is evaluated element wise.", 
            "title": "Function subtract"
        }, 
        {
            "location": "/functions/subtract/#syntax", 
            "text": "subtract(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/subtract/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Initial value    y  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Value to subtract from  x", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/subtract/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Subtraction of  x  and  y", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/subtract/#examples", 
            "text": "subtract(5.3, 2);        // returns number 3.3\n\nvar a = complex(2, 3);\nvar b = complex(4, 1);\nsubtract(a, b);          // returns Complex -2 + 2i\n\nsubtract([5, 7, 4], 4);  // returns Array [1, 3, 0]\n\nvar c = unit('2.1 km');\nvar d = unit('500m');\nsubtract(c, d);          // returns Unit 1.6 km", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/subtract/#see-also", 
            "text": "add", 
            "title": "See also"
        }, 
        {
            "location": "/functions/sum/", 
            "text": "Function sum\n\n\nCompute the sum of a matrix or a list with values.\nIn case of a (multi dimensional) array or matrix, the sum of all\nelements will be calculated.\n\n\nSyntax\n\n\nsum(a, b, c, ...)\nsum(A)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n... *\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe sum of all values\n\n\n\n\n\n\n\n\nExamples\n\n\nsum(2, 1, 4, 3);               // returns 10\nsum([2, 1, 4, 3]);             // returns 10\nsum([[2, 5], [4, 3], [1, 7]]); // returns 22\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmin\n,\n\nmax\n,\n\nprod\n,\n\nstd\n,\n\nvar", 
            "title": "Sum"
        }, 
        {
            "location": "/functions/sum/#function-sum", 
            "text": "Compute the sum of a matrix or a list with values.\nIn case of a (multi dimensional) array or matrix, the sum of all\nelements will be calculated.", 
            "title": "Function sum"
        }, 
        {
            "location": "/functions/sum/#syntax", 
            "text": "sum(a, b, c, ...)\nsum(A)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/sum/#parameters", 
            "text": "Parameter  Type  Description      args  ... *  A single matrix or or multiple scalar values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/sum/#returns", 
            "text": "Type  Description      *  The sum of all values", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/sum/#examples", 
            "text": "sum(2, 1, 4, 3);               // returns 10\nsum([2, 1, 4, 3]);             // returns 10\nsum([[2, 5], [4, 3], [1, 7]]); // returns 22", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/sum/#see-also", 
            "text": "mean , median , min , max , prod , std , var", 
            "title": "See also"
        }, 
        {
            "location": "/functions/tan/", 
            "text": "Function tan\n\n\nCalculate the tangent of a value. \ntan(x)\n is equal to \nsin(x) / cos(x)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ntan(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nTangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\ntan(0.5);                    // returns number 0.5463024898437905\nsin(0.5) / cos(0.5);    // returns number 0.5463024898437905\ntan(pi / 4);            // returns number 1\ntan(unit(45, 'deg'));   // returns number 1\n\n\n\n\nSee also\n\n\natan\n,\n\nsin\n,\n\ncos", 
            "title": "Tan"
        }, 
        {
            "location": "/functions/tan/#function-tan", 
            "text": "Calculate the tangent of a value.  tan(x)  is equal to  sin(x) / cos(x) .  For matrices, the function is evaluated element wise.", 
            "title": "Function tan"
        }, 
        {
            "location": "/functions/tan/#syntax", 
            "text": "tan(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/tan/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/tan/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Tangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/tan/#examples", 
            "text": "tan(0.5);                    // returns number 0.5463024898437905\nsin(0.5) / cos(0.5);    // returns number 0.5463024898437905\ntan(pi / 4);            // returns number 1\ntan(unit(45, 'deg'));   // returns number 1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/tan/#see-also", 
            "text": "atan , sin , cos", 
            "title": "See also"
        }, 
        {
            "location": "/functions/tanh/", 
            "text": "Function tanh\n\n\nCalculate the hyperbolic tangent of a value,\ndefined as \ntanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)\n.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\ntanh(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFunction input\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Complex \n Array \n Matrix\n\n\nHyperbolic tangent of x\n\n\n\n\n\n\n\n\nExamples\n\n\n// tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\ntanh(0.5);                   // returns 0.46211715726000974\nsinh(0.5) / cosh(0.5);  // returns 0.46211715726000974\n1 / coth(0.5);               // returns 0.46211715726000974\n\n\n\n\nSee also\n\n\nsinh\n,\n\ncosh\n,\n\ncoth", 
            "title": "Tanh"
        }, 
        {
            "location": "/functions/tanh/#function-tanh", 
            "text": "Calculate the hyperbolic tangent of a value,\ndefined as  tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1) .  For matrices, the function is evaluated element wise.", 
            "title": "Function tanh"
        }, 
        {
            "location": "/functions/tanh/#syntax", 
            "text": "tanh(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/tanh/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  Function input", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/tanh/#returns", 
            "text": "Type  Description      number   BigNumber   Complex   Array   Matrix  Hyperbolic tangent of x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/tanh/#examples", 
            "text": "// tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\ntanh(0.5);                   // returns 0.46211715726000974\nsinh(0.5) / cosh(0.5);  // returns 0.46211715726000974\n1 / coth(0.5);               // returns 0.46211715726000974", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/tanh/#see-also", 
            "text": "sinh , cosh , coth", 
            "title": "See also"
        }, 
        {
            "location": "/functions/to/", 
            "text": "Function to\n\n\nChange the unit of a value.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nto(x, unit)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nUnit \n Array \n Matrix\n\n\nThe unit to be converted.\n\n\n\n\n\n\nunit\n\n\nUnit \n Array \n Matrix\n\n\nNew unit. Can be a string like \"cm\" or a unit without value.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUnit \n Array \n Matrix\n\n\nvalue with changed, fixed unit.\n\n\n\n\n\n\n\n\nExamples\n\n\nto(unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\nto(unit('2 inch'), unit(null, 'cm'));  // returns Unit 5.08 cm\nto(unit(16, 'bytes'), 'bits');              // returns Unit 128 bits\n\n\n\n\nSee also\n\n\nunit", 
            "title": "To"
        }, 
        {
            "location": "/functions/to/#function-to", 
            "text": "Change the unit of a value.  For matrices, the function is evaluated element wise.", 
            "title": "Function to"
        }, 
        {
            "location": "/functions/to/#syntax", 
            "text": "to(x, unit)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/to/#parameters", 
            "text": "Parameter  Type  Description      x  Unit   Array   Matrix  The unit to be converted.    unit  Unit   Array   Matrix  New unit. Can be a string like \"cm\" or a unit without value.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/to/#returns", 
            "text": "Type  Description      Unit   Array   Matrix  value with changed, fixed unit.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/to/#examples", 
            "text": "to(unit('2 inch'), 'cm');                   // returns Unit 5.08 cm\nto(unit('2 inch'), unit(null, 'cm'));  // returns Unit 5.08 cm\nto(unit(16, 'bytes'), 'bits');              // returns Unit 128 bits", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/to/#see-also", 
            "text": "unit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/trace/", 
            "text": "Function trace\n\n\nCalculate the trace of a matrix: the sum of the elements on the main\ndiagonal of a square matrix.\n\n\nSyntax\n\n\ntrace(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nA matrix\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber\n\n\nThe trace of \nx\n\n\n\n\n\n\n\n\nExamples\n\n\ntrace([[1, 2], [3, 4]]); // returns 5\n\nvar A = [\n  [1, 2, 3],\n  [-1, 2, 3],\n  [2, 0, 3]\n]\ntrace(A); // returns 6\n\n\n\n\nSee also\n\n\ndiag", 
            "title": "Trace"
        }, 
        {
            "location": "/functions/trace/#function-trace", 
            "text": "Calculate the trace of a matrix: the sum of the elements on the main\ndiagonal of a square matrix.", 
            "title": "Function trace"
        }, 
        {
            "location": "/functions/trace/#syntax", 
            "text": "trace(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/trace/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix  A matrix", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/trace/#returns", 
            "text": "Type  Description      number  The trace of  x", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/trace/#examples", 
            "text": "trace([[1, 2], [3, 4]]); // returns 5\n\nvar A = [\n  [1, 2, 3],\n  [-1, 2, 3],\n  [2, 0, 3]\n]\ntrace(A); // returns 6", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/trace/#see-also", 
            "text": "diag", 
            "title": "See also"
        }, 
        {
            "location": "/functions/transpose/", 
            "text": "Function transpose\n\n\nTranspose a matrix. All values of the matrix are reflected over its\nmain diagonal. Only applicable to two dimensional matrices containing\na vector (i.e. having size \n[1,n]\n or \n[n,1]\n). One dimensional\nvectors and scalars return the input unchanged.\n\n\nSyntax\n\n\ntranspose(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nArray \n Matrix\n\n\nMatrix to be transposed\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nThe transposed matrix\n\n\n\n\n\n\n\n\nExamples\n\n\nvar A = [[1, 2, 3], [4, 5, 6]];\ntranspose(A);               // returns [[1, 4], [2, 5], [3, 6]]\n\n\n\n\nSee also\n\n\ndiag\n,\n\ninv\n,\n\nsubset\n,\n\nsqueeze", 
            "title": "Transpose"
        }, 
        {
            "location": "/functions/transpose/#function-transpose", 
            "text": "Transpose a matrix. All values of the matrix are reflected over its\nmain diagonal. Only applicable to two dimensional matrices containing\na vector (i.e. having size  [1,n]  or  [n,1] ). One dimensional\nvectors and scalars return the input unchanged.", 
            "title": "Function transpose"
        }, 
        {
            "location": "/functions/transpose/#syntax", 
            "text": "transpose(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/transpose/#parameters", 
            "text": "Parameter  Type  Description      x  Array   Matrix  Matrix to be transposed", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/transpose/#returns", 
            "text": "Type  Description      Array   Matrix  The transposed matrix", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/transpose/#examples", 
            "text": "var A = [[1, 2, 3], [4, 5, 6]];\ntranspose(A);               // returns [[1, 4], [2, 5], [3, 6]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/transpose/#see-also", 
            "text": "diag , inv , subset , squeeze", 
            "title": "See also"
        }, 
        {
            "location": "/functions/unaryMinus/", 
            "text": "Function unaryMinus\n\n\nInverse the sign of a value, apply a unary minus operation.\n\n\nFor matrices, the function is evaluated element wise. Boolean values and\nstrings will be converted to a number. For complex numbers, both real and\ncomplex value are inverted.\n\n\nSyntax\n\n\nunaryMinus(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nNumber to be inverted.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nReturns the value with inverted sign.\n\n\n\n\n\n\n\n\nExamples\n\n\nunaryMinus(3.5);      // returns -3.5\nunaryMinus(-4.2);     // returns 4.2\n\n\n\n\nSee also\n\n\nadd\n,\n\nsubtract\n,\n\nunaryPlus", 
            "title": "unaryMinus"
        }, 
        {
            "location": "/functions/unaryMinus/#function-unaryminus", 
            "text": "Inverse the sign of a value, apply a unary minus operation.  For matrices, the function is evaluated element wise. Boolean values and\nstrings will be converted to a number. For complex numbers, both real and\ncomplex value are inverted.", 
            "title": "Function unaryMinus"
        }, 
        {
            "location": "/functions/unaryMinus/#syntax", 
            "text": "unaryMinus(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/unaryMinus/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Number to be inverted.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/unaryMinus/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Returns the value with inverted sign.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/unaryMinus/#examples", 
            "text": "unaryMinus(3.5);      // returns -3.5\nunaryMinus(-4.2);     // returns 4.2", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/unaryMinus/#see-also", 
            "text": "add , subtract , unaryPlus", 
            "title": "See also"
        }, 
        {
            "location": "/functions/unaryPlus/", 
            "text": "Function unaryPlus\n\n\nUnary plus operation.\nBoolean values and strings will be converted to a number, numeric values will be returned as is.\n\n\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nunaryPlus(x)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n string \n Complex \n Unit \n Array \n Matrix\n\n\nInput value\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber \n BigNumber \n Fraction \n Complex \n Unit \n Array \n Matrix\n\n\nReturns the input value when numeric, converts to a number when input is non-numeric.\n\n\n\n\n\n\n\n\nExamples\n\n\nunaryPlus(3.5);      // returns 3.5\nunaryPlus(1);     // returns 1\n\n\n\n\nSee also\n\n\nunaryMinus\n,\n\nadd\n,\n\nsubtract", 
            "title": "unaryPlus"
        }, 
        {
            "location": "/functions/unaryPlus/#function-unaryplus", 
            "text": "Unary plus operation.\nBoolean values and strings will be converted to a number, numeric values will be returned as is.  For matrices, the function is evaluated element wise.", 
            "title": "Function unaryPlus"
        }, 
        {
            "location": "/functions/unaryPlus/#syntax", 
            "text": "unaryPlus(x)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/unaryPlus/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   string   Complex   Unit   Array   Matrix  Input value", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/unaryPlus/#returns", 
            "text": "Type  Description      number   BigNumber   Fraction   Complex   Unit   Array   Matrix  Returns the input value when numeric, converts to a number when input is non-numeric.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/unaryPlus/#examples", 
            "text": "unaryPlus(3.5);      // returns 3.5\nunaryPlus(1);     // returns 1", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/unaryPlus/#see-also", 
            "text": "unaryMinus , add , subtract", 
            "title": "See also"
        }, 
        {
            "location": "/functions/unequal/", 
            "text": "Function unequal\n\n\nTest whether two values are unequal.\n\n\nThe function tests whether the relative difference between x and y is\nlarger than the configured epsilon. The function cannot be used to compare\nvalues smaller than approximately 2.22e-16.\n\n\nFor matrices, the function is evaluated element wise.\nIn case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n\n\nValues \nnull\n and \nundefined\n are compared strictly, thus \nnull\n is unequal\nwith everything except \nnull\n, and \nundefined\n is unequal with everying\nexcept. \nundefined\n.\n\n\nSyntax\n\n\nunequal(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Complex \n Unit \n string \n Array \n Matrix \n undefined\n\n\nFirst value to compare\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Fraction \n boolean \n Complex \n Unit \n string \n Array \n Matrix \n undefined\n\n\nSecond value to compare\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when the compared values are unequal, else returns false\n\n\n\n\n\n\n\n\nExamples\n\n\nunequal(2 + 2, 3);       // returns true\nunequal(2 + 2, 4);       // returns false\n\nvar a = unit('50 cm');\nvar b = unit('5 m');\nunequal(a, b);           // returns false\n\nvar c = [2, 5, 1];\nvar d = [2, 7, 1];\n\nunequal(c, d);           // returns [false, true, false]\ndeepEqual(c, d);         // returns false\n\nunequal(0, null);        // returns true\n\n\n\n\nSee also\n\n\nequal\n,\n\ndeepEqual\n,\n\nsmaller\n,\n\nsmallerEq\n,\n\nlarger\n,\n\nlargerEq\n,\n\ncompare", 
            "title": "Unequal"
        }, 
        {
            "location": "/functions/unequal/#function-unequal", 
            "text": "Test whether two values are unequal.  The function tests whether the relative difference between x and y is\nlarger than the configured epsilon. The function cannot be used to compare\nvalues smaller than approximately 2.22e-16.  For matrices, the function is evaluated element wise.\nIn case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.  Values  null  and  undefined  are compared strictly, thus  null  is unequal\nwith everything except  null , and  undefined  is unequal with everying\nexcept.  undefined .", 
            "title": "Function unequal"
        }, 
        {
            "location": "/functions/unequal/#syntax", 
            "text": "unequal(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/unequal/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Fraction   boolean   Complex   Unit   string   Array   Matrix   undefined  First value to compare    y  number   BigNumber   Fraction   boolean   Complex   Unit   string   Array   Matrix   undefined  Second value to compare", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/unequal/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when the compared values are unequal, else returns false", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/unequal/#examples", 
            "text": "unequal(2 + 2, 3);       // returns true\nunequal(2 + 2, 4);       // returns false\n\nvar a = unit('50 cm');\nvar b = unit('5 m');\nunequal(a, b);           // returns false\n\nvar c = [2, 5, 1];\nvar d = [2, 7, 1];\n\nunequal(c, d);           // returns [false, true, false]\ndeepEqual(c, d);         // returns false\n\nunequal(0, null);        // returns true", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/unequal/#see-also", 
            "text": "equal , deepEqual , smaller , smallerEq , larger , largerEq , compare", 
            "title": "See also"
        }, 
        {
            "location": "/functions/unit/", 
            "text": "Function unit\n\n\nCreate a unit. Depending on the passed arguments, the function\nwill create and return a new type.Unit object.\nWhen a matrix is provided, all elements will be converted to units.\n\n\nSyntax\n\n\nunit(unit : string)\nunit(value : number, unit : string)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargs\n\n\n* \n Array \n Matrix\n\n\nA number and unit.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUnit \n Array \n Matrix\n\n\nThe created unit\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = unit(5, 'cm');    // returns Unit 50 mm\nvar b = unit('23 kg');    // returns Unit 23 kg\na.to('m');                     // returns Unit 0.05 m\n\n\n\n\nSee also\n\n\nbignumber\n,\n\nboolean\n,\n\ncomplex\n,\n\nindex\n,\n\nmatrix\n,\n\nnumber\n,\n\nstring\n,\n\ncreateUnit", 
            "title": "Unit"
        }, 
        {
            "location": "/functions/unit/#function-unit", 
            "text": "Create a unit. Depending on the passed arguments, the function\nwill create and return a new type.Unit object.\nWhen a matrix is provided, all elements will be converted to units.", 
            "title": "Function unit"
        }, 
        {
            "location": "/functions/unit/#syntax", 
            "text": "unit(unit : string)\nunit(value : number, unit : string)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/unit/#parameters", 
            "text": "Parameter  Type  Description      args  *   Array   Matrix  A number and unit.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/unit/#returns", 
            "text": "Type  Description      Unit   Array   Matrix  The created unit", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/unit/#examples", 
            "text": "var a = unit(5, 'cm');    // returns Unit 50 mm\nvar b = unit('23 kg');    // returns Unit 23 kg\na.to('m');                     // returns Unit 0.05 m", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/unit/#see-also", 
            "text": "bignumber , boolean , complex , index , matrix , number , string , createUnit", 
            "title": "See also"
        }, 
        {
            "location": "/functions/usolve/", 
            "text": "Function usolve\n\n\nSolves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.\n\n\nU * x = b\n\n\nSyntax\n\n\nusolve(U, b);\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nU\n\n\nMatrix, Array\n\n\nA N x N matrix or array (U)\n\n\n\n\n\n\nb\n\n\nMatrix, Array\n\n\nA column vector with the b values\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDenseMatrix \n Array\n\n\nA column vector with the linear system solution (x)\n\n\n\n\n\n\n\n\nExamples\n\n\nvar a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = usolve(a, b);  // [[8], [9]]\n\n\n\n\nSee also\n\n\nlup\n,\n\nslu\n,\n\nusolve\n,\n\nlusolve", 
            "title": "Usolve"
        }, 
        {
            "location": "/functions/usolve/#function-usolve", 
            "text": "Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.  U * x = b", 
            "title": "Function usolve"
        }, 
        {
            "location": "/functions/usolve/#syntax", 
            "text": "usolve(U, b);", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/usolve/#parameters", 
            "text": "Parameter  Type  Description      U  Matrix, Array  A N x N matrix or array (U)    b  Matrix, Array  A column vector with the b values", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/usolve/#returns", 
            "text": "Type  Description      DenseMatrix   Array  A column vector with the linear system solution (x)", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/usolve/#examples", 
            "text": "var a = [[-2, 3], [2, 1]];\nvar b = [11, 9];\nvar x = usolve(a, b);  // [[8], [9]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/usolve/#see-also", 
            "text": "lup , slu , usolve , lusolve", 
            "title": "See also"
        }, 
        {
            "location": "/functions/var/", 
            "text": "Function var\n\n\nCompute the variance of a matrix or a  list with values.\nIn case of a (multi dimensional) array or matrix, the variance over all\nelements will be calculated.\n\n\nOptionally, the type of normalization can be specified as second\nparameter. The parameter \nnormalization\n can be one of the following values:\n\n\n\n\n'unbiased' (default) The sum of squared errors is divided by (n - 1)\n\n\n'uncorrected'        The sum of squared errors is divided by n\n\n\n'biased'             The sum of squared errors is divided by (n + 1)\n\n\n\n\nNote that older browser may not like the variable name \nvar\n. In that\ncase, the function can be called as \nmath['var'](...)\n instead of\n\nvar(...)\n.\n\n\nSyntax\n\n\nvar(a, b, c, ...)\nvar(A)\nvar(A, normalization)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narray\n\n\nArray \n Matrix\n\n\nA single matrix or or multiple scalar values\n\n\n\n\n\n\nnormalization\n\n\nstring\n\n\nDetermines how to normalize the variance. Choose 'unbiased' (default), 'uncorrected', or 'biased'. Default value: 'unbiased'.\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThe variance\n\n\n\n\n\n\n\n\nExamples\n\n\nvar(2, 4, 6);                     // returns 4\nvar([2, 4, 6, 8]);                // returns 6.666666666666667\nvar([2, 4, 6, 8], 'uncorrected'); // returns 5\nvar([2, 4, 6, 8], 'biased');      // returns 4\n\nvar([[1, 2, 3], [4, 5, 6]]);      // returns 3.5\n\n\n\n\nSee also\n\n\nmean\n,\n\nmedian\n,\n\nmax\n,\n\nmin\n,\n\nprod\n,\n\nstd\n,\n\nsum", 
            "title": "Var"
        }, 
        {
            "location": "/functions/var/#function-var", 
            "text": "Compute the variance of a matrix or a  list with values.\nIn case of a (multi dimensional) array or matrix, the variance over all\nelements will be calculated.  Optionally, the type of normalization can be specified as second\nparameter. The parameter  normalization  can be one of the following values:   'unbiased' (default) The sum of squared errors is divided by (n - 1)  'uncorrected'        The sum of squared errors is divided by n  'biased'             The sum of squared errors is divided by (n + 1)   Note that older browser may not like the variable name  var . In that\ncase, the function can be called as  math['var'](...)  instead of var(...) .", 
            "title": "Function var"
        }, 
        {
            "location": "/functions/var/#syntax", 
            "text": "var(a, b, c, ...)\nvar(A)\nvar(A, normalization)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/var/#parameters", 
            "text": "Parameter  Type  Description      array  Array   Matrix  A single matrix or or multiple scalar values    normalization  string  Determines how to normalize the variance. Choose 'unbiased' (default), 'uncorrected', or 'biased'. Default value: 'unbiased'.", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/var/#returns", 
            "text": "Type  Description      *  The variance", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/var/#examples", 
            "text": "var(2, 4, 6);                     // returns 4\nvar([2, 4, 6, 8]);                // returns 6.666666666666667\nvar([2, 4, 6, 8], 'uncorrected'); // returns 5\nvar([2, 4, 6, 8], 'biased');      // returns 4\n\nvar([[1, 2, 3], [4, 5, 6]]);      // returns 3.5", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/var/#see-also", 
            "text": "mean , median , max , min , prod , std , sum", 
            "title": "See also"
        }, 
        {
            "location": "/functions/xgcd/", 
            "text": "Function xgcd\n\n\nCalculate the extended greatest common divisor for two values.\nSee http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.\n\n\nSyntax\n\n\nxgcd(a, b)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\na\n\n\nnumber \n BigNumber\n\n\nAn integer number\n\n\n\n\n\n\nb\n\n\nnumber \n BigNumber\n\n\nAn integer number\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray\n\n\nReturns an array containing 3 integers \n[div, m, n]\n where \ndiv = gcd(a, b)\n and \na*m + b*n = div\n\n\n\n\n\n\n\n\nExamples\n\n\nxgcd(8, 12);             // returns [4, -1, 1]\ngcd(8, 12);              // returns 4\nxgcd(36163, 21199);      // returns [1247, -7, 12]\n\n\n\n\nSee also\n\n\ngcd\n,\n\nlcm", 
            "title": "Xgcd"
        }, 
        {
            "location": "/functions/xgcd/#function-xgcd", 
            "text": "Calculate the extended greatest common divisor for two values.\nSee http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.", 
            "title": "Function xgcd"
        }, 
        {
            "location": "/functions/xgcd/#syntax", 
            "text": "xgcd(a, b)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/xgcd/#parameters", 
            "text": "Parameter  Type  Description      a  number   BigNumber  An integer number    b  number   BigNumber  An integer number", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/xgcd/#returns", 
            "text": "Type  Description      Array  Returns an array containing 3 integers  [div, m, n]  where  div = gcd(a, b)  and  a*m + b*n = div", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/xgcd/#examples", 
            "text": "xgcd(8, 12);             // returns [4, -1, 1]\ngcd(8, 12);              // returns 4\nxgcd(36163, 21199);      // returns [1247, -7, 12]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/xgcd/#see-also", 
            "text": "gcd , lcm", 
            "title": "See also"
        }, 
        {
            "location": "/functions/xor/", 
            "text": "Function xor\n\n\nLogical \nxor\n. Test whether one and only one value is defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.\n\n\nSyntax\n\n\nxor(x, y)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nx\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nFirst value to check\n\n\n\n\n\n\ny\n\n\nnumber \n BigNumber \n Complex \n Unit \n Array \n Matrix\n\n\nSecond value to check\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboolean \n Array \n Matrix\n\n\nReturns true when one and only one input is defined with a nonzero/nonempty value.\n\n\n\n\n\n\n\n\nExamples\n\n\nxor(2, 4);   // returns false\n\na = [2, 0, 0];\nb = [2, 7, 0];\nc = 0;\n\nxor(a, b);   // returns [false, true, false]\nxor(a, c);   // returns [true, false, false]\n\n\n\n\nSee also\n\n\nand\n,\n\nnot\n,\n\nor", 
            "title": "Xor"
        }, 
        {
            "location": "/functions/xor/#function-xor", 
            "text": "Logical  xor . Test whether one and only one value is defined with a nonzero/nonempty value.\nFor matrices, the function is evaluated element wise.", 
            "title": "Function xor"
        }, 
        {
            "location": "/functions/xor/#syntax", 
            "text": "xor(x, y)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/xor/#parameters", 
            "text": "Parameter  Type  Description      x  number   BigNumber   Complex   Unit   Array   Matrix  First value to check    y  number   BigNumber   Complex   Unit   Array   Matrix  Second value to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/xor/#returns", 
            "text": "Type  Description      boolean   Array   Matrix  Returns true when one and only one input is defined with a nonzero/nonempty value.", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/xor/#examples", 
            "text": "xor(2, 4);   // returns false\n\na = [2, 0, 0];\nb = [2, 7, 0];\nc = 0;\n\nxor(a, b);   // returns [false, true, false]\nxor(a, c);   // returns [true, false, false]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/xor/#see-also", 
            "text": "and , not , or", 
            "title": "See also"
        }, 
        {
            "location": "/functions/zeros/", 
            "text": "Function zeros\n\n\nCreate a matrix filled with zeros. The created matrix can have one or\nmultiple dimensions.\n\n\nSyntax\n\n\nzeros(m)\nzeros(m, format)\nzeros(m, n)\nzeros(m, n, format)\nzeros([m, n])\nzeros([m, n], format)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\n...number \n Array\n\n\nThe size of each dimension of the matrix\n\n\n\n\n\n\nformat\n\n\nstring\n\n\nThe Matrix storage format\n\n\n\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nArray \n Matrix\n\n\nA matrix filled with zeros\n\n\n\n\n\n\n\n\nExamples\n\n\nzeros(3);                  // returns [0, 0, 0]\nzeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\nzeros(3, 'dense');         // returns [0, 0, 0]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nzeros(size(A));       // returns [[0, 0, 0], [0, 0, 0]]\n\n\n\n\nSee also\n\n\nones\n,\n\neye\n,\n\nsize\n,\n\nrange", 
            "title": "Zeros"
        }, 
        {
            "location": "/functions/zeros/#function-zeros", 
            "text": "Create a matrix filled with zeros. The created matrix can have one or\nmultiple dimensions.", 
            "title": "Function zeros"
        }, 
        {
            "location": "/functions/zeros/#syntax", 
            "text": "zeros(m)\nzeros(m, format)\nzeros(m, n)\nzeros(m, n, format)\nzeros([m, n])\nzeros([m, n], format)", 
            "title": "Syntax"
        }, 
        {
            "location": "/functions/zeros/#parameters", 
            "text": "Parameter  Type  Description      size  ...number   Array  The size of each dimension of the matrix    format  string  The Matrix storage format", 
            "title": "Parameters"
        }, 
        {
            "location": "/functions/zeros/#returns", 
            "text": "Type  Description      Array   Matrix  A matrix filled with zeros", 
            "title": "Returns"
        }, 
        {
            "location": "/functions/zeros/#examples", 
            "text": "zeros(3);                  // returns [0, 0, 0]\nzeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]\nzeros(3, 'dense');         // returns [0, 0, 0]\n\nvar A = [[1, 2, 3], [4, 5, 6]];\nzeros(size(A));       // returns [[0, 0, 0], [0, 0, 0]]", 
            "title": "Examples"
        }, 
        {
            "location": "/functions/zeros/#see-also", 
            "text": "ones , eye , size , range", 
            "title": "See also"
        }
    ]
}